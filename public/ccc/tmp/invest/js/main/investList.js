(function(n){"use strict";if(n.BCP&&"function"===typeof n.BCP.prelude)return n.BCP.prelude;var e=n.requestAnimationFrame||n.setImmediate||function(n){return setTimeout(n,1)};this.QAS=function(n){var e=n.requestAnimationFrame||n.setImmediate||function(n){return setTimeout(n,1)};var r=[].concat(n._qas_queue||[]);if(n._qas_queue)delete n._qas_queue;var t=Array.prototype.slice;var u=function(n){var e=t.call(arguments,1);if(u.loaded)o(n,e);else r.push([n,e]);return u};u.sync=function(n){n.sync=true;return u.apply(null,arguments)};u.ready=i;u.sync.ready=i;function i(){u.loaded=true;var n;while(n=r.shift()){o(n[0],n[1])}}function o(r,t){if(typeof r!="function")return;r.sync?r.apply(n,t):e(function(){r.apply(n,t)})}return u}(this);var r=n.BCP=t;function t(n){QAS(n,l([]))}t.sync=function(n){QAS.sync(n,l([]))};r.prelude=c;r.mergeModules=a;var u=0;var i=r.cache={};var o=r.modules={};return c;function a(n){n=n||{};for(var e in n){if(typeof e!=="number"&&n.hasOwnProperty(e)){if(!(e in o)){o[e]=n[e];if(e[0]!=="/")o["/"+e]=n[e]}}}}function f(){u+=1;e(function(){if(u>=document.querySelectorAll("script[data-common]").length){QAS.ready()}})}function c(n,e,t){r.mergeModules(n);var u=l(t);if(!t||!t.length){f()}else{var i;QAS(function(n){while(i=n.shift()){u(i)}},t)}return u}function l(n){return function e(r){if(!QAS.loaded){throw new Error("external libs not ready!")}var t=r;if(typeof t==="string"&&t[0]==="/"){t=t.replace(/^\//,"")}var u;if(!i[t]){if(!(u=o[t])){if(!(u=o[r==="/"+t?r:t="/"+t])){if(!(u=o[t="/node_modules"+t])){var a=new Error("Cannot find module '"+r+"'\n\nall available modules:\n"+s().join("\n"));a.code="MODULE_NOT_FOUND";throw a}}}var f=i[t]=i[r]={exports:{}};u[0].call(f.exports,function(n){var r=u[1][n];return e(r?r:"/"+n)},f,f.exports,c,o,i,n)}return i[t].exports}}function s(){var n={};p(o,function(e,r){if((""+r).match(/^\/?\d+$/))return;n[r.replace(/^\/(node_modules\/)?/,"")]=1});return m(n)}function d(n,e){var r,t;for(r=0,t=n.length;r<t;r++){e.call(n,n[r],k,n)}}function p(n,e){for(var r in n){if(n.hasOwnProperty(r)){e.call(n,n[r],r,n)}}}function m(n){var e=[];p(n,function(n,r){e.push(r)});return e}}).call(this,this)({"/ccc/global/js/lib/jquery.easy-pie-chart.js":[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
"use strict";

(function ($) {
  $.easyPieChart = function (el, options) {
    var addScaleLine,
        animateLine,
        drawLine,
        easeInOutQuad,
        rAF,
        renderBackground,
        renderScale,
        renderTrack,
        _this = this;
    this.el = el;
    this.$el = $(el);
    this.$el.data("easyPieChart", this);
    this.init = function () {
      var percent, scaleBy;
      _this.options = $.extend({}, $.easyPieChart.defaultOptions, options);
      percent = parseInt(_this.$el.data('percent'), 10);
      _this.percentage = 0;
      _this.canvas = $("<canvas width='" + _this.options.size + "' height='" + _this.options.size + "'></canvas>").get(0);
      _this.$el.append(_this.canvas);
      if (typeof G_vmlCanvasManager !== "undefined" && G_vmlCanvasManager !== null) {
        G_vmlCanvasManager.initElement(_this.canvas);
      }
      _this.ctx = _this.canvas.getContext('2d');
      if (window.devicePixelRatio > 1) {
        scaleBy = window.devicePixelRatio;
        $(_this.canvas).css({
          width: _this.options.size,
          height: _this.options.size
        });
        _this.canvas.width *= scaleBy;
        _this.canvas.height *= scaleBy;
        _this.ctx.scale(scaleBy, scaleBy);
      }
      _this.ctx.translate(_this.options.size / 2, _this.options.size / 2);
      _this.ctx.rotate(_this.options.rotate * Math.PI / 180);
      _this.$el.addClass('easyPieChart');
      _this.$el.css({
        width: _this.options.size,
        height: _this.options.size,
        lineHeight: "" + _this.options.size + "px"
      });
      _this.update(percent);
      return _this;
    };
    this.update = function (percent) {
      percent = parseFloat(percent) || 0;
      if (_this.options.animate === false) {
        drawLine(percent);
      } else {
        animateLine(_this.percentage, percent);
      }
      return _this;
    };
    renderScale = function () {
      var i, _i, _results;
      _this.ctx.fillStyle = _this.options.scaleColor;
      _this.ctx.lineWidth = 1;
      _results = [];
      for (i = _i = 0; _i <= 24; i = ++_i) {
        _results.push(addScaleLine(i));
      }
      return _results;
    };
    addScaleLine = function (i) {
      var offset;
      offset = i % 6 === 0 ? 0 : _this.options.size * 0.017;
      _this.ctx.save();
      _this.ctx.rotate(i * Math.PI / 12);
      _this.ctx.fillRect(_this.options.size / 2 - offset, 0, -_this.options.size * 0.05 + offset, 1);
      _this.ctx.restore();
    };
    renderTrack = function () {
      var offset;
      offset = _this.options.size / 2 - _this.options.lineWidth / 2;
      if (_this.options.scaleColor !== false) {
        offset -= _this.options.size * 0.08;
      }
      _this.ctx.beginPath();
      _this.ctx.arc(0, 0, offset, 0, Math.PI * 2, true);
      _this.ctx.closePath();
      _this.ctx.strokeStyle = _this.options.trackColor;
      _this.ctx.lineWidth = _this.options.lineWidth;
      _this.ctx.stroke();
    };
    renderBackground = function () {
      if (_this.options.scaleColor !== false) {
        renderScale();
      }
      if (_this.options.trackColor !== false) {
        renderTrack();
      }
    };
    drawLine = function (percent) {
      var offset;
      renderBackground();
      _this.ctx.strokeStyle = $.isFunction(_this.options.barColor) ? _this.options.barColor(percent) : _this.options.barColor;
      _this.ctx.lineCap = _this.options.lineCap;
      _this.ctx.lineWidth = _this.options.lineWidth;
      offset = _this.options.size / 2 - _this.options.lineWidth / 2;
      if (_this.options.scaleColor !== false) {
        offset -= _this.options.size * 0.08;
      }
      _this.ctx.save();
      _this.ctx.rotate(-Math.PI / 2);
      _this.ctx.beginPath();
      _this.ctx.arc(0, 0, offset, 0, Math.PI * 2 * percent / 100, false);
      _this.ctx.stroke();
      _this.ctx.restore();
    };
    rAF = (function () {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {
        return window.setTimeout(callback, 1000 / 60);
      };
    })();
    animateLine = function (from, to) {
      var anim, startTime;
      _this.options.onStart.call(_this);
      _this.percentage = to;
      Date.now || (Date.now = function () {
        return +new Date();
      });
      startTime = Date.now();
      anim = function () {
        var currentValue, process;
        process = Date.now() - startTime;
        if (process < _this.options.animate) {
          rAF(anim);
        }
        _this.ctx.clearRect(-_this.options.size / 2, -_this.options.size / 2, _this.options.size, _this.options.size);
        renderBackground.call(_this);
        currentValue = [easeInOutQuad(process, from, to - from, _this.options.animate)];
        _this.options.onStep.call(_this, currentValue);
        drawLine.call(_this, currentValue);
        if (process >= _this.options.animate) {
          return _this.options.onStop.call(_this, currentValue, to);
        }
      };
      rAF(anim);
    };
    easeInOutQuad = function (t, b, c, d) {
      var easeIn, easing;
      easeIn = function (t) {
        return Math.pow(t, 2);
      };
      easing = function (t) {
        if (t < 1) {
          return easeIn(t);
        } else {
          return 2 - easeIn(t / 2 * -2 + 2);
        }
      };
      t /= d / 2;
      return c / 2 * easing(t) + b;
    };
    return this.init();
  };
  $.easyPieChart.defaultOptions = {
    barColor: '#ef1e25',
    trackColor: '#f2f2f2',
    scaleColor: '#dfe0e0',
    lineCap: 'round',
    rotate: 0,
    size: 110,
    lineWidth: 3,
    animate: false,
    onStart: $.noop,
    onStop: $.noop,
    onStep: $.noop
  };
  $.fn.easyPieChart = function (options) {
    return $.each(this, function (i, el) {
      var $el, instanceOptions;
      $el = $(el);
      if (!$el.data('easyPieChart')) {
        instanceOptions = $.extend({}, options, $el.data());
        return $el.data('easyPieChart', new $.easyPieChart(el, instanceOptions));
      }
    });
  };
  return void 0;
})(jQuery);
/*
Easy pie chart is a jquery plugin to display simple animated pie charts for only one value

Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.

Built on top of the jQuery library (http://jquery.com)

@source: http://github.com/rendro/easy-pie-chart/
@autor: Robert Fleischmann
@version: 1.2.3

Inspired by: http://dribbble.com/shots/631074-Simple-Pie-Charts-II?list=popular&offset=210
Thanks to Philip Thrasher for the jquery plugin boilerplate for coffee script
*/

},{}],"/ccc/global/js/lib/utils.js":[function(require,module,exports){
"use strict";
module.exports = (function () {

    // 公用表单验证组件

    var FormValidator = function FormValidator() {};

    FormValidator.prototype = {

        checkLoginName: function checkLoginName(loginName, next) {
            var reg = /^(?!(([1][3|5|7|8][0-9]{9})|([\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+)))([0-9a-zA-Z_\u4E00-\u9FBF]+)/;

            if (!loginName || !loginName.length) {
                next(false, 'LOGINNAME_NULL');
                return;
            }

            if (loginName.length < 2 || loginName.length > 30) {
                next(false, 'LOGINNAME_SIZE');
                return;
            }

            if (!!('' + loginName).match(/[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+/)) {
                next(false, 'LOGINNAME_NOT_EMAIL');
                return;
            }

            if (!!('' + loginName).match(/^[1][3|5|7|8][0-9]{9}$/)) {
                next(false, 'LOGINNAME_NOT_MOBILE');
                return;
            }

            next(true, null);
        },

        checkRegisterName: function checkRegisterName(registerName, next) {
            var reg = /^(?!(([1][3|5|7|8][0-9]{9})|([\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+)))([0-9a-zA-Z_\u4E00-\u9FBF]+)/;

            if (!registerName || !registerName.length) {
                next(false, 'LOGINNAME_NULL');
                return;
            }

            if (!('' + registerName).match(reg)) {
                next(false, 'LOGINNAME_INVALID');
                return;
            }

            if (registerName.indexOf('-') >= 0) {
                next(false, 'LOGINNAME_INVALID');
                return;
            }

            if (registerName.length < 2 || registerName.length > 30) {
                next(false, 'LOGINNAME_SIZE');
                return;
            }

            next(true, null);
        },

        checkPassword: function checkPassword(password, next) {

            if (!password || !password.length) {
                next(false, 'PASSWORD_NULL');
                return;
            }

            if (password.length < 6) {
                next(false, 'PASSWORD_LENGTH');
                return;
            }

            next(true, null);
        },
        checkRePassword: function checkRePassword(password, repassword, next) {

            if (!repassword || !repassword.length) {
                next(false, 'REPASSWROD_NULL');
                return;
            }

            if (repassword !== password) {
                next(false, 'REPASSWORD_INVALID');
                return;
            }

            next(true, null);
        },

        checkEmail: function checkEmail(email, next) {
            if (!email || !email.length) {
                next(false, 'EMAIL_NULL');
                return;
            }
            if (!('' + email).match(/[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+/)) {
                next(false, 'EMAIL_INVALID');
                return;
            }
            next(true, null);
        },
        checkMobile: function checkMobile(mobile, next) {
            if (!mobile || !mobile.length) {
                next(false, 'MOBILE_NULL');
                return;
            }
            if (!('' + mobile).match(/^[1][3|5|7|8][0-9]{9}$/)) {
                next(false, 'MOBILE_INVALID');
                return;
            }
            next(true, null);
        },
        checkIdNumber: function checkIdNumber(idNumber, next) {
            idNumber = ('' + idNumber).replace(/^\s+|\s+$/g, '');
            var pcode = []; //只有这些数字开头的代码才是合法的
            pcode.push("11"); //北京
            pcode.push("12"); //天津
            pcode.push("13"); //河北
            pcode.push("14"); //山西
            pcode.push("15"); //内蒙古
            pcode.push("21"); //辽宁
            pcode.push("22"); //吉林
            pcode.push("23"); //黑龙江
            pcode.push("31"); //上海
            pcode.push("32"); //江苏
            pcode.push("33"); //浙江
            pcode.push("34"); //安徽
            pcode.push("35"); //福建
            pcode.push("36"); //江西
            pcode.push("37"); //山东
            pcode.push("41"); //河南
            pcode.push("42"); //湖北
            pcode.push("43"); //湖南
            pcode.push("44"); //广东
            pcode.push("45"); //广西
            pcode.push("46"); //海南
            pcode.push("50"); //重庆
            pcode.push("51"); //四川
            pcode.push("52"); //贵州
            pcode.push("53"); //云南
            pcode.push("54"); //西藏
            pcode.push("61"); //陕西
            pcode.push("62"); //甘肃
            pcode.push("63"); //青海
            pcode.push("64"); //宁夏
            pcode.push("65"); //新疆
            if (! ~pcode.indexOf(idNumber.substring(0, 2))) {
                if (next) {
                    next(false, 'IDNUMBER_INVALID');
                    return;
                } else {
                    return {
                        success: false,
                        data: 'IDNUMBER_INVALID'
                    };
                }
            }

            var factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
            var validEnding = ["1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"];

            if (idNumber[17] != validEnding[_.reduce(factor, function (r, n, i) {
                return r + n * ~ ~idNumber[i];
            }, 0) % 11]) {
                if (next) {
                    next(false, 'IDNUMBER_INVALID');
                    return;
                } else {
                    return {
                        success: false,
                        data: 'IDNUMBER_INVALID'
                    };
                }
            }
            if (next) {
                next(true, null);
                return;
            } else {
                return {
                    success: true,
                    data: null
                };
            }
        },
        checkName: function checkName(name, next) {
            if (!name || !name.length) {
                next(false, 'NAME_NULL');
                return;
            }
            if (!('' + name).match(/[\u4E00-\u9FBF]{2,15}/)) {
                next(false, 'NAME_INVALID');
                return;
            }
            next(true, null);
        },
        checkSmsCaptcha: function checkSmsCaptcha(sms, next) {
            if (!sms || !sms.length) {
                next(false, 'SMSCAPTCHA_NULL');
                return;
            }

            if (sms.length !== 6) {
                next(false, 'SMSCAPTCHA_INVALID');
                return;
            }
            next(true, null);
        }
    };

    var ErrorMsg = {
        PASSWORD_NULL: '请填写密码,不能为空字符',
        PASSWORD_LENGTH: '密码由6-20位数字和字母组成，区分大小写，不能包含空字符',
        PASSWORD_AGAIN_NULL: '请填写密码确认',
        PASSWORD_AGAIN_INVALID: '两次输入的密码不一致',
        REPASSWORD_NULL: '请填写密码确认',
        REPASSWORD_INVALID: '两次输入的密码不一致',
        MOBILE_USED: '手机号码已被使用',
        MOBILE_CAPTCHA_NULL: '请填写手机短信验证码',
        MOBILE_CAPTCHA_INVALID: '验证码无效或已过期，请尝试重新发送',
        MOBILE_CAPTCHA_EXPIRED: '验证码过期，请尝试重新发送',
        AGREEMENT_NULL: '注册需先同意服务条款',
        CAPTCHA_NULL: '请填写验证码',
        CAPTCHA_INVALID: '验证码不正确',
        MOBILE_NULL: '请填写手机号码',
        MOBILE_INVALID: '请输入正确的手机号',
        LOGINNAME_EXISTS: '用户名已存在',
        LOGINNAME_STRICT: '2至15位中英文字符、数字或下划线',
        LOGINNAME_NULL: '请填写用户名',
        LOGINNAME_INVALID: '2至15位中英文字符、数字或下划线',
        LOGINNAME_SIZE: '2至15位中英文字符、数字或下划线',
        LOGINNAME_NOT_MOBILE: '用户名不能是手机号（注册后可以用手机号登录）',
        LOGINNAME_NOT_EMAIL: '用户名不能是邮箱',
        NAME_NULL: '请填写真实姓名',
        NAME_INVALID: '真实姓名错误，应为2-15位中文汉字',
        EMAIL_NULL: '请填写电子邮箱',
        EMAIL_INVALID: '请输入正确的邮箱',
        IDNUMBER_INVALID: '请正确填写 18 位身份证号码',
        LOGIN_INVALID: '手机号或密码错误',
        INVALID_CAPTCHA: '验证码错误',
        LOGINNAME_NOT_MATCH: '手机号码与登录名不匹配',
        INVITATION_INVALID: 'H码无效',
        INVITATION_NULL: 'H码为空',
        PAYMENT_ACCOUNT_CREATE_ERROR: '国政通实名认证校验未通过',
        SMSCAPTCHA_INVALID: '验证码为6位',
        SMSCAPTCHA_NULL: '验证码不能为空',
        IDNUMBER_NULL: '身份证号不能为空'
    };

    var CountDown = function CountDown() {};

    CountDown.prototype = {
        getCountDownTime: function getCountDownTime(time, serverDate, next) {
            time = parseInt(time, 10);
            if (!time || time === null) {
                return;
            }

            var checkTime = function checkTime(i) {
                if (i < 10) {
                    i = "0" + i;
                }
                return i;
            };
            var leftTime = new Date(time) - new Date(serverDate);
            if (leftTime < 0) {
                return;
            }
            var dd = Math.floor(leftTime / 1000 / 60 / 60 / 24);
            leftTime -= dd * 1000 * 60 * 60 * 24;
            var hh = Math.floor(leftTime / 1000 / 60 / 60);
            leftTime -= hh * 1000 * 60 * 60;
            var mm = Math.floor(leftTime / 1000 / 60);
            leftTime -= mm * 1000 * 60;
            var ss = Math.floor(leftTime / 1000);

            // 倒计时完成后刷新页面
            if (hh === 0 && mm === 0 && ss === 0) {
                setTimeout(function () {
                    window.location.reload();
                }, 2000);
            }
            leftTime -= ss * 1000;
            dd = checkTime(dd);
            hh = checkTime(hh);
            mm = checkTime(mm);
            ss = checkTime(ss);
            var o = {
                day: dd,
                hour: parseInt(hh, 10) + (dd > 0 ? dd * 24 : 0),
                min: mm,
                sec: ss
            };
            if (next) {
                next(o);
            } else {
                return o;
            }
        },
        getCountDownTime2: function getCountDownTime2(time, serverDate, next) {
            time = parseInt(time, 10);
            if (!time || time === null) {
                return;
            }

            var checkTime = function checkTime(i) {
                if (i < 10) {
                    i = "0" + i;
                }
                return i;
            };
            var leftTime = new Date(time) - new Date(serverDate);
            if (leftTime < 0) {
                return;
            }
            var dd = Math.floor(leftTime / 1000 / 60 / 60 / 24);
            leftTime -= dd * 1000 * 60 * 60 * 24;
            var hh = Math.floor(leftTime / 1000 / 60 / 60);
            leftTime -= hh * 1000 * 60 * 60;
            var mm = Math.floor(leftTime / 1000 / 60);
            leftTime -= mm * 1000 * 60;
            var ss = Math.floor(leftTime / 1000);
            leftTime -= ss * 1000;
            //dd = checkTime(dd);
            hh = checkTime(hh);
            mm = checkTime(mm);
            ss = checkTime(ss);
            var o = {
                day: dd,
                hour: hh,
                min: mm,
                sec: ss
            };
            if (next) {
                next(o);
            } else {
                return o;
            }
        }
    };

    // 格式化duration
    var formateDuration = function formateDuration(dur) {
        var _month = 0;
        if (dur.days > 0) {
            if (typeof dur.totalDays === "undefined") {
                _month = dur.days + "天";
            } else {
                _month = dur.totalDays + "天";
            }
        } else {
            if (dur.years > 0) {
                _month += dur.years * 12;
            }
            if (dur.months > 0) {
                _month += dur.months;
            }
            _month = _month + "个月";
        }
        return _month;
    };

    // 格式化银行卡号
    var bankAccount = function bankAccount(str) {
        str = str.toString();
        str = str.trim();
        var result = '';
        if (str.length === 16) {
            result = str.substring(0, 4) + ' ' + '**** ****' + ' ' + str.substring(12);
        } else if (str.length === 19) {
            result = str.substring(0, 6) + ' ' + '*******' + ' ' + str.substring(13);
        } else {
            console.error('Bank account number ' + str + ' is invalid');
            result = str;
        }
        //return result.replace(/\s/g, '&nbsp;')
        return result;
    };

    // format amount
    var formatAmount = function formatAmount(s, n) {
        n = n > 0 && n <= 20 ? n : 0;
        if (s < 0) {
            var _s = 0;
            return _s.toFixed(n);
        }
        s = parseFloat((s + "").replace(/[^\d\.-]/g, "")).toFixed(n) + "";
        var l = s.split(".")[0].split("").reverse();
        var r = s.split(".")[1];
        var t = "",
            i;
        for (i = 0; i < l.length; i++) {
            t += l[i] + ((i + 1) % 3 === 0 && i + 1 !== l.length ? "," : "");
        }
        if (r) {
            return t.split("").reverse().join("") + "." + r; // 99.99
        } else {
                return t.split("").reverse().join("");
            }
    };

    // format percent
    var formatPercent = function formatPercent(percent, offset) {
        percent = percent.toString();
        if (offset === undefined || offset === null) {
            offset = 2;
        }
        if (percent.indexOf('.') === -1) {
            return percent;
        } else {
            if (offset === 0) {
                return percent.substring(0, percent.indexOf("."));
            } else {
                return percent.substring(0, percent.indexOf(".") + (offset + 1));
            }
        }
    };

    // format timeElapsed

    var timeElapsed = function timeElapsed(_timeElapsed, isobj) {
        if (_timeElapsed < 0) {
            return;
        }
        var s = ~ ~(_timeElapsed / 1000),
            m = 0,
            h = 0,
            d = 0;
        var result = '';

        if (s > 59) {
            m = ~ ~(s / 60);
            s = s % 60;
        }
        if (m > 59) {
            h = ~ ~(m / 60);
            m = m % 60;
        }
        if (h > 24) {
            d = ~ ~(h / 24);
            h = h % 24;
        }

        if (s < 0) {
            s = 0;
        }
        result = '' + s + '秒';
        if (m) {
            result = '' + m + '分' + result;
        }
        if (h) {
            result = '' + h + '小时' + result;
        }
        if (d) {
            result = '' + d + '天' + result;
        }
        return !isobj ? result : {
            day: d,
            hour: h,
            min: m,
            sec: parseInt(s)
        };
    };

    var ieCheck = function ieCheck() {
        var version = typeof navigator !== 'undefined' && navigator.appVersion && navigator.appVersion.match(/MSIE ([\d.]+)/);

        return version ? Number(version[1]) || 0 : 0;
    };

    var match = {
        mobile: function mobile(_mobile) {
            var req = /^[1][3|5|7|8][0-9]{9}$/;
            return !!_mobile.toString().match(req);
        },
        amount: function amount(_amount) {
            var exp = /^([1-9][\d]{0,7}|0)(\.[\d]{1,2})?$/;
            return exp.test(_amount);
        },
        email: function email(_email) {
            var exp = /^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/;
            return exp.test(_email);
        },
        // 6到20位数字字母密码
        password: function password(s) {
            return !!s.match(/[0-9a-zA-Z]{6,20}/);
        }
    };

    var tool = {
        jsonToParams: function jsonToParams(params) {
            var str = '';
            for (var key in params) {
                if (typeof params[key] === 'object') {
                    for (var i = 0; i < params[key].length; i++) {
                        str += '&' + key + '=' + params[key][i];
                    }
                } else {
                    if (params.hasOwnProperty(key)) {
                        str += '&' + key + '=' + params[key];
                    }
                }
            }
            return str;
        },
        setDate: function setDate(date) {
            var _date, y, m, d;
            _date = date.split("-");
            y = parseInt(_date[0]);
            m = parseInt(_date[1]);
            d = parseInt(_date[2]);
            if (m < 10) {
                m = '0' + m;
            }
            if (d < 10) {
                d = '0' + d;
            }
            return y + '-' + m + '-' + d;
        },

        loadScript: function loadScript(url, callback) {
            var _script = document.createElement("script");
            _script.setAttribute('type', 'text/javascript');
            _script.setAttribute('src', url);
            document.getElementsByTagName("head")[0].appendChild(_script);
            if (_script.readyState) {
                //IE
                _script.onreadystatechange = function () {
                    if (_script.readyState == "loaded" || _script.readyState == "complete") {
                        _script.onreadystatechange = null;
                        callback();
                    }
                };
            } else {
                //非IE
                _script.onload = function () {
                    callback();
                };
            }
        }
    };

    // 暴露接口
    return {
        formValidator: new FormValidator(),
        errorMsg: ErrorMsg,
        countDown: new CountDown(),
        format: {
            amount: formatAmount,
            duration: formateDuration,
            percent: formatPercent,
            timeElapsed: timeElapsed
        },
        bankAccount: bankAccount,
        i18n: require('@ds/i18n')['zh-cn'].enums,
        ieCheck: ieCheck,
        match: match,
        tool: tool
    };
})();

},{"@ds/i18n":"/node_modules/@ds/i18n/index.js"}],"/ccc/global/js/modules/cccBox.js":[function(require,module,exports){
'use strict';

var $ = require('jquery');

function Dialog(content, options) {
    Dialog.__zindex = 9000;
    Dialog.__count = 1;
    var defaults = {
        title: '',
        showTitle: true,
        // 是否显示标题栏。
        width: '500px',
        height: '200px',
        draggable: false,
        // 是否移动
        modal: true,
        // 是否是模态对话框
        center: true,
        // 是否居中。
        fixed: true,
        // 是否跟随页面滚动。
        time: 0,
        // 自动关闭时间，为0表示不会自动关闭。
        top: null,
        cla: '', // dialog wrap的扩展class
        id: false // 对话框的id，若为false，则由系统自动产生一个唯一id。
    };

    options = $.extend(defaults, options);
    options.title = options.title || '';
    options.time = options.time || 0;
    options.id = options.id ? options.id : 'dialog-' + Dialog.__count; // 唯一ID
    var overlayId = options.id + '-overlay'; // 遮罩层ID
    var timeId = null; // 自动关闭计时器
    var isShow = false;

    options.top = content.top || '20%';
    options.cla = content.cla || '';
    options.overlay = content.overlay || true;

    //var isIe = $.browser.msie;
    //var isIe6 = $.browser.msie && ('6.0' == $.browser.version);

    //var isIe = document.all && window.external;
    var isIe6 = false;
    var getWrap = function getWrap() {
        return {
            width: $(window).width() + $(document).scrollLeft(),
            height: $(document).height()
        };
    };
    /*
       var wrap = {
           width: $(window).width() + $(document).scrollLeft(),
           height: $(document).height()
       };
    */
    var wrap = getWrap();

    /* 对话框的布局及标题内容。*/
    options.title = content.title || "";
    var barHtml = !options.showTitle ? '' : '<div class="bar"><span class="title">' + (options.title === "" || options.title === false ? "" : options.title) + '</span><a class="close"></a></div>';
    var theDialog = $('<div id="' + options.id + '" class="dialog ccc-box-wrap ' + options.cla + '">' + barHtml + '<div class="Dcontent"></div></div>').hide();
    $('body').append(theDialog);

    /**
     * 重置对话框的位置。
     *
     * 主要是在需要居中的时候，每次加载完内容，都要重新定位
     *
     * @return void
     */
    this.resetPos = function () {
        /* 是否需要居中定位，必需在已经知道了dialog元素大小的情况下，才能正确居中，也就是要先设置dialog的内容。 */
        if (options.center) {
            var width = $(".Dcontent", theDialog).outerWidth();

            theDialog.css("width", width);

            var left = ($(window).width() - theDialog.width()) / 2;
            var top = ($(window).height() - theDialog.height()) / 2;
            if (top < 0) {
                top = 0;
            }

            if (!isIe6 && options.fixed) {
                theDialog.css({
                    top: options.top ? options.top : top,
                    left: left
                });
            } else {
                theDialog.css({
                    top: top + $(document).scrollTop(),
                    left: left + $(document).scrollLeft()
                });
            }
        }
    };

    /**
     * 初始化位置及一些事件函数。
     *
     * 其中的this表示Dialog对象而不是init函数。
     */
    var init = function init() {
        /* 是否需要初始化背景遮罩层 */

        if (options.modal) {
            $('body').append('<div id="' + overlayId + '" class="dialog-overlay ccc-box-overlay"></div>');
            $('#' + overlayId).css('width', wrap.width).css('height', wrap.height).css('z-index', ++Dialog.__zindex);
            $('#' + overlayId).css({
                'left': 0,
                'top': 0,
                'position': 'absolute'
            }).hide();
        }

        theDialog.css({
            'z-index': ++Dialog.__zindex,
            'position': options.fixed ? 'fixed' : 'absolute'
        });

        /*  IE6 兼容fixed代码 */
        if (isIe6 && options.fixed) {
            theDialog.css('position', 'absolute');
            // resetPos();
            $(window).scroll(function () {
                var dia = {
                    top: $(document).scrollTop() + $(window).height() / 2 - theDialog.height() / 2 + 'px',
                    left: $(document).scrollLeft() + $(window).width() / 2 - theDialog.outerWidth() / 2 + 'px'
                };
                theDialog.css({
                    'top': dia.top,
                    'left': dia.left
                });
            });
        }

        /* 以下代码处理框体是否可以移动 */
        var mouse = {
            x: 0,
            y: 0
        };

        function moveDialog(event) {
            var e = window.event || event;
            var top = parseInt(theDialog.css('top')) + (e.clientY - mouse.y);
            var left = parseInt(theDialog.css('left')) + (e.clientX - mouse.x);
            theDialog.css({
                top: top,
                left: left
            });
            mouse.x = e.clientX;
            mouse.y = e.clientY;
        }
        theDialog.find('.bar').mousedown(function (event) {
            if (!options.draggable) {
                return;
            }

            var e = window.event || event;
            mouse.x = e.clientX;
            mouse.y = e.clientY;
            $(document).bind('mousemove', moveDialog);
        });
        $(document).mouseup(function () {
            $(document).unbind('mousemove', moveDialog);
        });

        /* 绑定一些相关事件。 */
        theDialog.find('.close').bind('click', this.close);
        theDialog.bind('mousedown', function () {
            theDialog.css('z-index', ++Dialog.__zindex);
        });

        // 自动关闭
        if (0 !== options.time) {
            timeId = setTimeout(this.close, options.time);
        }
    };

    /**
     * 设置对话框的内容。
     *
     * @param string c 可以是HTML文本。
     * @return void
     */
    this.setContent = function (c) {
        if (c.time) {
            options.time = c.time;
        }
        var div = theDialog.find('.Dcontent');
        var width = c.width ? c.width : defaults.width,
            height = c.height ? c.height : defaults.height;

        if (c.alert) {
            c.value = '<div class="box-alert-wrap" style="padding-top:80px;">' + c.value + '</div>';
        }
        if (c.confirm) {
            c.value = '<div class="box-alert-wrap"><p>' + c.value + '</p>' + '<button class="btn btn-yes btn-long btn-close">确定</button><span></span>' + '<button class="btn btn-cancel btn-long btn-gray btn-close">取消</button></div>';
        }
        var that = this;
        if ('object' === typeof c) {
            c.type = c.type || "";
            switch (c.type.toLowerCase()) {
                case 'id':
                    // 将ID的内容复制过来，原来的还在。
                    div.append($('#' + c.value));
                    $('#' + c.value).css("display", "block");
                    break;
                case 'img':
                    div.html('加载中...');
                    $('<img alt="" />').load(function () {
                        div.empty().append($(this));
                        that.resetPos();
                    }).attr('src', c.value);
                    break;
                case 'url':
                    div.html('加载中...');
                    $.ajax({
                        url: c.value,
                        success: function success(html) {
                            div.html(html);
                            that.resetPos();
                        },
                        error: function error() {
                            div.html('出错啦');
                        }
                    });
                    break;
                case 'iframe':
                    div.append($('<iframe src="' + c.value + '" width=' + width + ' height=' + height + ' />'));
                    break;
                case 'text':
                    break;
                default:
                    !!width && div.width(width);!!height && div.height(height);

                    div.html(c.value);
                    break;
            }
        } else {
            div.html(c);
        }

        // 主动显示弹窗
        if (c.showed) {
            this.show(c.showed);
        }

        if (c.alert || c.confirm) {
            theDialog.find('.btn-close').bind('click', this.close);
        }
    };

    /**
     * 显示对话框
     */
    this.show = function (callback) {
        if (undefined !== options.beforeShow && !options.beforeShow()) {
            return;
        }

        /**
         * 获得某一元素的透明度。IE从滤境中获得。
         *
         * @return float
         */

        /* 是否显示背景遮罩层 */
        if (options.modal) {
            $('#' + overlayId).css("display", "block");
        }
        theDialog.css("display", "block");
        if (undefined !== options.afterShow) {
            options.afterShow();
        }
        isShow = true;
        // 自动关闭
        if (0 !== options.time) {
            timeId = setTimeout(this.close, options.time);
        }
        this.resetPos();

        // 设置overlay背景
        if (options.overlay) {
            $(".dialog-overlay").css("background", "#D3D3D3");
        }

        //回调
        if (callback) {
            var d = theDialog.find(".Dcontent");
            callback(d[0], this);
        }

        var that = this;

        $(window).keydown(function (e) {
            var tag = e.target.tagName.toLowerCase();
            if (!e.target) {
                return false;
            };
            if (tag === 'input' || tag === 'textarea') {} else {
                if (e.keyCode === 27) {
                    that.close();
                }
            }
        });
    };
    /*
     * 隐藏对话框。但并不取消窗口内容。
     */
    this.hide = function (callback) {
        if (!isShow) {
            return;
        }

        if (undefined !== options.beforeHide && !options.beforeHide()) {
            return;
        }

        theDialog.css('display', "none");
        if (undefined !== options.afterHide) {
            options.afterHide();
        }

        if (options.modal) {
            $('#' + overlayId).css('display', "none");
        }

        isShow = false;

        if (callback) {
            callback();
        }
    };

    /**
     * 关闭对话框
     *
     * @return void
     */
    this.close = function (e, real) {
        $("body").find(".dialog").remove();
        if (undefined !== options.beforeClose && !options.beforeClose()) {
            return;
        }
        if (!real) {
            theDialog.find(".Dcontent:eq(0)").appendTo("body").css("display", "none");
        }
        theDialog.remove();
        isShow = false;
        if (undefined !== options.afterClose) {
            options.afterClose();
        }

        if (options.modal) {
            $('#' + overlayId).css('display', "none").remove();
        }
        clearTimeout(timeId);
        $("body").find(".Dcontent").remove();
    };

    this.resetOverlay = function () {
        $('#' + overlayId).css({
            'width': $(window).width() + $(document).scrollLeft(),
            'height': $(document).height(),
            'left': 0,
            'top': 0
        });
    };

    init.call(this);
    this.setContent(content);

    Dialog.__count++;
    Dialog.__zindex++;
}
module.exports = Dialog;

},{"jquery":"/jquery"}],"/ccc/global/js/modules/cccCalculator.js":[function(require,module,exports){
'use strict';

/**
 * 收益计算器 (cccCalculator)
 *
 * <link rel="stylesheet" href="/assets/css/modules/cccCalculator.css">
 * var Cal = require('assets/js/modules/cccCalculator');
 * Cal.create();
 */
var utils = require('ccc/global/js/lib/utils');
var tpl = {
    wrap: require('ccc/global/partials/modules/cccCalculator.html'),
    list: '{{#each list}}\
			<div class="clearfix backgr-f tdContent">\
				<div class="ccc-f tdCell backgr-f">{{dueDate}}</div>\
				<div class="tdCell backgr-f">{{amount}}</div>\
				<div class="tdCell backgr-f">{{amountPrincipal}}</div>\
				<div class="tdCell backgr-f">{{amountInterest}}</div>\
				<div class="ccc-l tdCell backgr-f">{{amountOutstanding}}</div>\
			</div>\
		{{/each}}'
};

var Dialog = require("ccc/global/js/modules/cccBox");

// 缓存部分数据
window.CC_CACHE = {};

var reg = /^([1-9][\d]{0,7}|0)$/;
var reg1 = /^([1-9][\d]{0,1}|0)(\.[\d]{1,8})?$/;

module.exports.create = function (p) {
    p = p || {};
    var defaults = {
        title: p.title || '收益计算器',
        tpl: p.tpl || tpl.wrap,
        width: 850,
        height: 400,
        top: '20%',
        callback: function callback() {}
    };

    $.extend(defaults, p);
    var o = defaults;

    // get data
    var renderPurpose = function renderPurpose() {
        //var P = T('zh-cn').enums.RepaymentMethod;
        var _option = '';

        $.each(utils.i18n.RepaymentMethod, function (k, v) {
            _option += '<option value="' + k + '">' + v[0] + '</option>';
        });

        //过滤还款方式
        return '<option value="EqualInstallment">按月等额本息</option>\
				<option value="EqualPrincipal">按月等额本金</option>\
				<option value="MonthlyInterest">按月付息到期还本</option>\
				<option value="BulletRepayment">一次性还本付息</option>';
    };

    if (!CC_CACHE.options) {
        CC_CACHE.options = renderPurpose();
    }

    new Dialog({
        title: o.title,
        value: o.tpl,
        width: o.width,
        height: o.height,
        top: o.top,
        showed: function showed(ele, box) {
            // set list tpl
            //tpl.list = $(ele).find('.ccc-calculator-tpl-list').html();

            var date_cal = new Date();
            var date_cal1 = new Date(date_cal);
            date_cal1.setDate(date_cal.getDate() + 3);
            var last_date = date_cal1.getFullYear() + '-' + (date_cal1.getMonth() + 1) + '-' + date_cal1.getDate();

            // render options
            $(ele).find('select[name=paymentMethod]').html(CC_CACHE.options);
            $(ele).find('form[name=ccCalculatorForm]').submit(function (e) {
                if (e && e.preventDefault) {
                    e.preventDefault();
                } else {
                    window.event.returnValue = false;
                }
                var $this = $(this);
                var datas = $this.serializeArray();
                var nc = function nc(msg) {
                    $(ele).find('#cc-cal-list-wp').html('<p>' + msg + '</p>');
                };

                for (var i = 0; i < datas.length; i++) {
                    if (datas[i].name === 'paymentMethod') {
                        continue;
                    }
                    var calValue = datas[i].value;
                    var isLegal = reg.test(calValue);
                    var tex = $(ele).find('[name=' + datas[i].name + ']').parent().prev().text();
                    if (calValue === '') {
                        $(ele).find('[name=' + datas[i].name + ']').addClass('nc').focus();
                        nc('请输入' + tex);
                        return;
                    } else if (!isLegal && datas[i].name !== 'annualRate') {
                        $(ele).find('[name=' + datas[i].name + ']').addClass('nc').focus();
                        if (datas[i].name === 'amountValue' && calValue > 99999999) {
                            nc(tex + '不能超过8位数字');
                        } else {
                            nc(tex + '必须为整数');
                        }
                        return;
                    } else if (datas[i].name === 'annualRate' && !reg1.test(calValue)) {
                        $(ele).find('[name=' + datas[i].name + ']').addClass('nc').focus();
                        nc(tex + '必须为小于100的数字');
                        return;
                    } else {
                        $(ele).find('[name=' + datas[i].name + ']').removeClass('nc');
                    }
                }

                var $postBtn = $(ele).find('.btn-cal');
                $postBtn.addClass('disabled').text('计算中…');

                var url = '/api/v2/loan/request/analyse';
                $.post(url, datas, function (res) {
                    if (res.success) {
                        $postBtn.removeClass('disabled').text('计算收益');
                        $(ele).find('.Tamount').text(res.data.interest + res.data.principal);
                        $(ele).find('.Famount').html('￥' + utils.format.amount(res.data.interest + res.data.principal, 2) + '<span style="padding-left:20px;">假设起息日为' + last_date + '</span>');
                        $(ele).find('.TamountPrincipal').text(res.data.principal);
                        $(ele).find('.TamountInterest').text(res.data.interest);
                        $(ele).find('.cc-talbe-total').removeClass('hide');
                        //$(ele).find('.Frate').text(datas[2].value+'%');

                        new Ractive({
                            el: $(ele).find('#cc-cal-list-wp'),
                            template: tpl.list,
                            data: {
                                list: res.data.repayments
                            }
                        });
                    } else {
                        nc('请求出错~');
                    }
                }).error(function () {
                    $postBtn.removeClass('disabled').text('计算收益');
                    nc('请求出错~');
                });
            });
            o.callback(ele, box);
        }
    });
};

},{"ccc/global/js/lib/utils":"/ccc/global/js/lib/utils.js","ccc/global/js/modules/cccBox":"/ccc/global/js/modules/cccBox.js","ccc/global/partials/modules/cccCalculator.html":"/ccc/global/partials/modules/cccCalculator.html"}],"/ccc/global/partials/modules/cccCalculator.html":[function(require,module,exports){
module.exports = '<link rel="stylesheet" href="/ccc/global/css/modules/cccCalculator.css">\n<div class="cc-calculator-wp">\n    <div class="calculator-title">\n        <p class="calculator-title-left">收益计算器</p>\n        <div class="calculator-line">\n        </div>\n    </div>\n    <div class="row">\n        <div class="col-md-4" style="width:33%;float:left;">\n            <form name="ccCalculatorForm" class="form-horizontal" role="form">\n                <div class="form-group">\n                    <label for="cc-cal-f2" class="col-sm-4 control-label">投资金额</label>\n                    <div class="col-sm-8" style="float:right;margin-top:-30px;">\n                        <input type="text" class="form-control" id="cc-cal-f2" name="amountValue" value="" placeholder="您的投资金额">\n                        <span>元</span>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="cc-cal-f3" class="col-sm-4 control-label" placeholder="">投资期限</label>\n                    <div class="col-sm-8" style="float:right;margin-top:-30px;">\n                        <input type="text" class="form-control" id="cc-cal-f3" name="dueMonth" value="" placeholder="期望时间长度">\n                        <span>月</span>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="cc-cal-f4" class="col-sm-4 control-label">年化利率</label>\n                    <div class="col-sm-8" style="float:right;margin-top:-30px;">\n                        <input type="text" class="form-control" id="cc-cal-f4" name="annualRate" value="" placeholder="年化利率">\n                        <span>%</span>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <label for="cc-cal-f5" class="col-sm-4 control-label">还款方式</label>\n                    <div class="col-sm-8" style="float:right;margin-top:-30px;">\n                        <select class="form-control" name="paymentMethod" id="cc-cal-f5">\n                            <option value="">loading...</option>\n                        </select>\n                    </div>\n                </div>\n                <div class="form-group">\n                    <div class="col-sm-offset-4 col-sm-8">\n                        <button type="submit" class="btn btn-orange btn-cal">计算收益</button>\n                        <button type="reset" class="reset">重置</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n        <div class="col-md-8" style="width:64%;float:left;">\n            <div class="cc-cal-results-box">\n                <div class="cc-res table table-bordered1 tdContent">\n                    <div class="ccc-f tdCell">收款日期</div>\n                    <div class="tdCell">收款金额</div>\n                    <div class="tdCell">收回本金</div>\n                    <div class="tdCell">收回利息</div>\n                    <div class="ccc-l tdCell">剩余本金</div>\n                </div>\n                <div class="cc-res cc-table-container">\n                    <div class="table_wrap">\n                        <div class="table table-bordered table-hover">\n                            <div id="cc-cal-list-wp">\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class="cc-res table-bordered1 cc-talbe-total hide">\n                    <div id="cc-cal-total table-bordered1 tdContent">\n                        <div class="cc-total-tr clearfix cc-total-tr-b">\n                            <div class="ccc-f tdCell">总计</div>\n                            <div class="Tamount tdCell"></div>\n                            <div class="TamountPrincipal tdCell"></div>\n                            <div class="TamountInterest tdCell"></div>\n                            <div class="ccc-l TamountOutstanding tdCell"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class="cc-total">\n                <span>本息合计：<em class="Famount"></em></span>\n            </div>\n        </div>\n    </div>\n</div>';
},{}],"/ccc/global/partials/singleInvestList.html":[function(require,module,exports){
module.exports = '<!--{{JSON.stringify(list)}}-->\n{{#list}}\n\n<div class="loanItemWrapper" {{#if status === \'SCHEDULED\' }}{{/if}}>\n    <div class="loanPartOne">\n        <div class="loantitle">\n			{{#if titleLength>20}}\n			<p>{{title}}</p>\n			{{/if}}\n\n<!--\n			<a href="/loan/{{ id }}" class="invest-title" style="color:#4a4a4a;">\n				{{#if title.length>11}}\n				{{title.substr(0,10)}}...\n			</a>\n-->\n\n            <a href="/loan/{{ id }}" class="invest-title" {{#if loanRequest.productKey==="LTB"}}style="color:#4a4a4a"{{elseif loanRequest.productKey==="LXY"}}style="color:#4a4a4a"{{else}}style="color:#4a4a4a"{{/if}}>\n				{{#if titleLength>20}}\n                {{title.substr(0,12)}}...\n				{{else}}\n				{{title}}\n				{{/if}}\n            </a>\n        </div>\n        <!--\n        <div class="loanPurpose">{{ purpose }}</div>\n        <div class="loanRepayMethod">{{ RepaymentMethod[method][0] }}</div>\n-->\n    </div>\n    <div class="amount">{{ amount }}<span>{{ amountUnit }}</span>\n    </div>\n    <div class="loanRate">{{ rate }}<i>%</i>\n    </div>\n    <div class="duration">{{ fduration }}<span>{{ fdurunit }}</span>\n    </div>\n    <div class="backmoney">{{ methodFmt }}</div>\n    <div class="process">\n        <div class="rate-chart">\n            <div class="easy-pie-chart pie" data-percent="{{ investPercent }}" style="top:9px">\n                <span class="percentageNum">{{ investPercent }} </span>\n            </div>\n        </div>\n    </div>\n    \n    <div class="investBtn">\n        {{#if status === \'OPENED\'}}\n        <a href="/loan/{{id}}" style="text-decoration:none">\n            <div class="investbtn">立即投资</div>\n        </a>\n        {{/if}} \n        {{#if status === \'SCHEDULED\'}}\n        <a href="/loan/{{id}}" style="text-decoration:none">\n            <div class="investbtn-hover" >即将开始</div>\n        </a>\n        <div class="investbtn-time" data-id="{{ id }}" data-status="{{ status }}" data-open="{{ timeOpen }}"\n        data-serv="{{ serverDate }}" style="margin-top:5px;color: black;width: 180px;text-align: center;margin-left:-40px"></div>\n        {{/if}} \n        {{#if status === \'FINISHED\'}}\n        <a href="/loan/{{id}}" style="text-decoration:none">\n            <div class="investbtn" style="background:lightgrey; color: #fff">已满标</div>\n        </a>\n        {{/if}}\n        {{#if status === \'FAILED\'}}\n        <a href="/loan/{{id}}" style="text-decoration:none">\n            <div class="investbtn" style="background:lightgrey; color: #fff">流标</div>\n        </a>\n        {{/if}} \n        {{#if status === \'SETTLED\'}}\n        <a href="/loan/{{id}}" style="text-decoration:none">\n            <div class="investbtn" style="background:lightgrey; color: #ffffff">还款中</div>\n        </a>\n        {{/if}} \n        {{#if status === \'CLEARED\'}}\n        <a href="/loan/{{id}}" style="text-decoration:none">\n            <div class="investbtn" style="background:lightgrey; color: #fff">还款结束</div>\n        </a>\n        {{/if}}\n    </div>\n</div>\n<script type="text/javascript">\n	$(\'.loantitle a\').mouseenter(function(){\n		$(this).siblings().fadeIn(200);\n	}).mouseleave(function(){\n		$(this).siblings().fadeOut(100);\n	})\n	\n</script>\n{{/list}}\n';
},{}],"/ccc/invest/js/main/investList.js":[function(require,module,exports){
/*jshint multistr: true */

"use strict";

var i18n = require('@ds/i18n')['zh-cn'];

var InvestListService = require('ccc/invest/js/main/service/list').InvestListService;
var utils = require('ccc/global/js/lib/utils');
require('ccc/global/js/lib/jquery.easy-pie-chart.js');

// 收益计算器
var Cal = require('ccc/global/js/modules/cccCalculator');
$('.benefit-calculator').on('click', function () {
    Cal.create();
});

var params = {
    pageSize: 10,
    status: 'SCHEDULED',
    minDuration: 0,
    maxDuration: 100,
    minRate: 0,
    maxRate: 100,
    currentPage: 1
};

function jsonToParams(params) {
    var str = '';
    for (var key in params) {
        if (params.hasOwnProperty(key)) {
            str += '&' + key + '=' + params[key];
        }
    }
    return str;
}

function formateLeftTime(leftTime) {
    var diffmin = leftTime / 1000 / 60;
    var str = "";
    if (diffmin > 0) {
        var _day = Math.ceil(diffmin / 60 / 24);
        if (_day > 1) {
            str = _day + "天";
        } else {
            var _hour = Math.ceil(diffmin / 60);
            if (_hour > 1) {
                str = _hour + "小时";
            } else {
                str = Math.ceil(diffmin) + "分";
            }
        }
    } else {
        var sec = Math.ceil(leftTime / 1000);
        str = sec + "秒";
    }
    return str;
}

function formatItem(item) {
    var purposeMap = {
        "SHORTTERM": "短期周转",
        "PERSONAL": "个人信贷",
        "INVESTMENT": "投资创业",
        "CAR": "车辆融资",
        "HOUSE": "房产融资",
        "CORPORATION": "企业融资",
        "OTHER": "其它借款"
    };

    item.rate = item.rate / 100;
    item.purpose = purposeMap[item.purpose];
    item.investPercent = parseInt(item.investPercent * 100, 10);
    if (item.duration.days > 0) {
        if (typeof item.duration.totalDays === "undefined") {
            item.fduration = item.duration.days;
        } else {
            item.fduration = item.duration.totalDays;
        }
        item.fdurunit = "天";
    } else {
        item.fduration = item.duration.totalMonths;
        item.fdurunit = "个月";
    }

    if (item.amount >= 10000) {
        item.amountUnit = '万';
        item.amount = item.amount / 10000;
    } else {
        item.amountUnit = '元';
    }

    if (item.status == "OPENED") {
        item.leftTime = formateLeftTime(item.timeLeft);
        item.open = true;
    } else if (item.status == "SCHEDULED") {
        item.scheduled = true;
    } else {
        item.finished = true;
    }
    //格式化序列号
    if (item.providerProjectCode) {
        if (item.providerProjectCode.indexOf('#') > 0) {
            var hh_project_code = item.providerProjectCode.split('#');
            item.fProjectType = hh_project_code[0];
            item.fProjectCode = hh_project_code[1];
        } else {
            item.fProjectType = '';
            item.fProjectCode = item.providerProjectCode;
        }
    }
    return item;
}

function parseLoanList(list) {
    for (var i = 0; i < list.length; i++) {
        list[i] = formatItem(list[i]);
        var method = list[i].method;
        var methodFmt = i18n.enums.RepaymentMethod[method][0];
        list[i].methodFmt = methodFmt;
        list[i].titleLength = replaceStr(list[i].title);
    }
    return list;
}

function replaceStr(str) {
    return str.replace(/[^\x00-xff]/g, 'xx').length;
}

InvestListService.getLoanListWithCondition(jsonToParams(params), function (res) {
    var investRactive = new Ractive({
        el: ".invest-list-wrapper",
        template: require('ccc/global/partials/singleInvestList.html'),
        data: {
            list: parseLoanList(res.results),
            RepaymentMethod: i18n.enums.RepaymentMethod, // 还款方式
            user: CC.user
        }
    });
    initailEasyPieChart();
    ininconut();
    renderPager(res);
    investRactive.on("mouseover mouseleave", function (e) {
        var hovering = e.name === "mouseover";
        this.set(e.keypath + ".hovering", hovering);
    });

    $('.no-warry-ul .no-warry').click(function () {
        if (!$(this).hasClass("selected active")) {
            $(this).addClass("selected active").siblings().removeClass("selected active");
            var product = $(this).data('product');
            params.currentPage = 1;
            params.product = product;
            render(params);
        }
    });

    $('.sDuration li').click(function () {
        if (!$(this).hasClass("selectTitle")) {
            $(this).addClass("s__is-selected").siblings().removeClass("s__is-selected");
            var minDuration = $(this).data('min-duration');
            var maxDuration = $(this).data('max-duration');

            params.currentPage = 1;
            params.minDuration = minDuration;
            params.maxDuration = maxDuration;
            render(params);
        }
    });

    $('.sStatus li').click(function () {
        if (!$(this).hasClass("selectTitle")) {
            $(this).addClass("s__is-selected").siblings().removeClass("s__is-selected");
            var status = $(this).data("status");
            params.status = status;
            params.currentPage = 1;
            render(params);
        }
    });

    function render(params) {
        InvestListService.getLoanListWithCondition(jsonToParams(params), function (res) {
            investRactive.set('list', []);
            setTimeout(function () {
                investRactive.set('list', parseLoanList(res.results));
                console.log(investRactive.get('list'));
                initailEasyPieChart();
                ininconut();
                renderPager(res, params.currentPage);
            }, 1);
        });
    }

    function renderPager(res, current) {
        if (!current) {
            current = 1;
        }
        var pagerRactive = new Ractive({
            el: '#invest-pager',
            template: require('ccc/invest/partials/pager.html'),
            data: {
                totalPage: createList(res.totalSize, current),
                current: current
            }
        });

        pagerRactive.on('previous', function (e) {
            e.original.preventDefault();
            var current = this.get('current');
            if (current > 1) {
                current -= 1;
                this.set('current', current);
                params.currentPage = current;
                render(params);
            }
        });

        pagerRactive.on('page', function (e, page) {
            e.original.preventDefault();
            if (page) {
                current = page;
            } else {
                current = e.context;
            }
            this.set('current', current);
            params.currentPage = current;
            render(params);
        });
        pagerRactive.on('next', function (e) {
            e.original.preventDefault();
            var current = this.get('current');
            if (current < this.get('totalPage')[this.get('totalPage').length - 1]) {
                current += 1;
                this.set('current', current);
                params.currentPage = current;
                render(params);
            }
        });
    }
});

function createList(len, current) {
    var arr = [];
    var i = parseInt(len / params.pageSize);
    if (len % params.pageSize > 0) {
        i++;
    }
    for (var m = 0; m < i; m++) {
        arr[m] = m + 1;
    }
    return arr;
};

function ininconut() {
    $(".investBtn > .investbtn-time").each(function () {
        var t = $(this);
        if (t.data("status") === 'SCHEDULED') {
            var id = t.data("id");
            var openTime = t.data("open");
            var serverDate = t.data("serv");
            var leftTime = utils.countDown.getCountDownTime2(openTime, serverDate);
            var textDay = leftTime.day ? leftTime.day + '天' : '';
            var interval = setInterval(function () {
                serverDate += 1000;
                var leftTime = utils.countDown.getCountDownTime2(openTime, serverDate);
                var textDay = leftTime.day ? leftTime.day + '天' : '';
                if (! +leftTime.day && ! +leftTime.hour && ! +leftTime.min && ! +leftTime.sec) {
                    clearInterval(interval);
                    t.prev().hide();
                    t.replaceWith('<a href="/loan/' + id + '" style="text-decoration:none"><div class="investbtn">立即投资</div></a>');
                } else {
                    t.html('<span class="text" style="color:#c6c6c6">倒计时<span style="color:#ff7200">' + textDay + leftTime.hour + '</span>时<span style="color:#ff7200">' + leftTime.min + '</span>分<span style="color:#ff7200">' + leftTime.sec + '</span>秒</span>');
                }
            }, 1000);
        }
    });
};

function initailEasyPieChart() {
    ///////////////////////////////////////////////////////////
    // 初始化饼状图
    ///////////////////////////////////////////////////////////
    $(function () {
        var oldie = /msie\s*(8|7|6)/.test(navigator.userAgent.toLowerCase());
        $(".easy-pie-chart").each(function () {
            var percentage = $(this).data("percent");
            // 100%进度条颜色显示为背景色
            var color = percentage === 100 ? "#f58220" : '#009ada';
            $(this).easyPieChart({
                barColor: color,
                trackColor: '#ddd',
                scaleColor: false,
                lineCap: 'butt',
                lineWidth: 4,
                animate: oldie ? false : 1000,
                size: 45,
                onStep: function onStep(from, to, percent) {
                    $(this.el).find('.percent').text(Math.round(percent));
                }
            });
            $(this).find("span.percentageNum").html(percentage + "%");
        });
    });
};

// banenr动效
//$(".no-warry").mouseenter(function(){
//    $(this).addClass("active");
//}).mouseleave(function(){
//    $(this).removeClass("active");
//})

},{"@ds/i18n":"/node_modules/@ds/i18n/index.js","ccc/global/js/lib/jquery.easy-pie-chart.js":"/ccc/global/js/lib/jquery.easy-pie-chart.js","ccc/global/js/lib/utils":"/ccc/global/js/lib/utils.js","ccc/global/js/modules/cccCalculator":"/ccc/global/js/modules/cccCalculator.js","ccc/global/partials/singleInvestList.html":"/ccc/global/partials/singleInvestList.html","ccc/invest/js/main/service/list":"/ccc/invest/js/main/service/list.js","ccc/invest/partials/pager.html":"/ccc/invest/partials/pager.html"}],"/ccc/invest/js/main/service/list.js":[function(require,module,exports){
/**
 * @file 首页数据交互逻辑
 * @author huip(hui.peng@creditcloud.com)
 */

'use strict';
var request = require('cc-superagent-promise');

exports.InvestListService = {
    getSummaryData: function getSummaryData(next) {
        request.get('/api/v2/loans/summary').end().then(function (res) {
            next(res.body);
        });
    },
    getLoanListWithCondition: function getLoanListWithCondition(params, next) {
        try {
            return request.get('/api/v2/loans/getLoanWithPage?' + params).end().then(function (res) {
                next(res.body);
            });
        } catch (e) {
            next({
                totalSize: 0,
                results: []
            });
        }
    },
    getProductKey: function getProductKey(next, params) {
        request.get('/api/v2/loan/getLoanProduct/productKey/' + params).end().then(function (res) {
            next(res.body);
        });
    }

};

function parseLoanList(loans) {
    var MaxOpened = 3;
    var MaxScheduled = 2;
    var MaxFinished = 1;
    var loanList = [];
    if (loans.scheduled.length <= MaxScheduled) {
        addItem(loans.scheduled);
    } else {
        addItem(loans.scheduled.slice(0, MaxScheduled));
    }
    if (loans.open.length <= MaxOpened) {
        addItem(loans.open);
    } else {
        addItem(loans.open.slice(0, MaxOpened));
    }
    if (loans.finished.length <= MaxFinished) {
        addItem(loans.finished);
    } else {
        addItem(loans.finished.slice(0, MaxFinished));
    }

    function addItem(items) {
        if (!items.length) {
            return;
        }
        for (var i = 0, l = items.length; i < l; i++) {
            loanList.push(formatItem(items[i]));
        }
    }

    function formatItem(item) {
        item.rate = item.rate / 100;
        if (item.amount > 10000) {
            item.amountUnit = '万';
            item.amount = item.amount / 10000;
        } else {
            item.amountUnit = '元';
        }
        return item;
    }
    return loanList;
}

},{"cc-superagent-promise":"/node_modules/cc-superagent-promise/index.js"}],"/ccc/invest/partials/pager.html":[function(require,module,exports){
module.exports = '{{#if totalPage.length }}\n<ul class="invest-pager">\n    <li class="index-page" on-click="page:1">\n        <a href="" >首页</a>\n    </li>\n    <li class="page-last" on-click="previous"><a href="#" >上一页</a>\n    </li>\n    {{#totalPage}}\n    <li class="current-page-now {{#if current == totalPage[@key]}} current-page {{/if}}" on-click="page:{{this}}"><a href="#" >{{totalPage[@key]}}</a>\n    </li>\n    {{/totalPage}}\n    <li class="page-next"  on-click="next"><a href="#">下一页</a>\n    </li>\n</ul>\n{{/if}}\n';
},{}],"/node_modules/@ds/i18n/index.js":[function(require,module,exports){
module.exports = {
  'zh-cn': require('./zh-cn')
}

},{"./zh-cn":"/node_modules/@ds/i18n/zh-cn.json"}],"/node_modules/@ds/i18n/zh-cn.json":[function(require,module,exports){
module.exports={
  "enums": {
    "FundRecordType": {
      "INVEST": "投标",
      "WITHDRAW": "取现",
      "DEPOSIT": "充值",
      "LOAN": "放款",
      "LOAN_REPAY": "贷款还款",
      "DISBURSE": "垫付还款",
      "INVEST_REPAY": "投资还款",
      "CREDIT_ASSIGN": "债权转让",
      "TRANSFER": "转账扣款",
      "REWARD_REGISTER": "注册奖励",
      "REWARD_INVEST": "投标奖励",
      "REWARD_DEPOSIT": "充值奖励",
      "FEE_WITHDRAW": "提现手续费",
      "FEE_AUTHENTICATE": "身份验证手续费",
      "FEE_INVEST_INTEREST": "回款利息管理费",
      "FEE_LOAN_SERVICE": "借款服务费",
      "FEE_LOAN_MANAGE": "借款管理费",
      "FEE_LOAN_INTEREST": "还款利息管理费",
      "FEE_LOAN_VISIT": "实地考察费",
      "FEE_LOAN_GUARANTEE": "担保费",
      "FEE_LOAN_RISK": "风险管理费",
      "FEE_LOAN_OVERDUE": "逾期管理费",
      "FEE_LOAN_PENALTY": "逾期罚息(给商户)",
      "FEE_LOAN_PENALTY_INVEST": "逾期罚息(给投资人)",
      "FEE_DEPOSIT": "充值手续费",
      "FEE_ADVANCE_REPAY": "提前还款违约金(给商户)",
      "FEE_ADVANCE_REPAY_INVEST": "提前还款违约金(给投资人)",
      "FSS": "生利宝"
    },
    "FundRecordOperation": {
      "FREEZE": "冻结",
      "RELEASE": "解冻",
      "IN": "资金转入",
      "OUT": "资金转出"
    },
    "FundRecordStatus": {
      "INITIALIZED": "初始",
      "PROCESSING": "处理中",
      "AUDITING": "审核中",
      "SUCCESSFUL": "成功",
      "FAILED": "失败",
      "REJECTED": "拒绝",
      "CANCELED": "取消"
    },
    "MaritalStatus": {
      "MARRIED": "已婚",
      "SINGLE": "未婚",
      "DIVORCED": "离异",
      "WIDOWED": "丧偶"
    },
    "EducationLevel": {
      "HIGHSCHOOL": "高中及以下",
      "TECHNICALSCHOOL": "中专",
      "JUNIORCOLLEGE": "大专",
      "UNDERGRADUATE": "本科",
      "MASTER": "硕士",
      "DOCTOR": "博士"
    },
    "CareerStatus": {
      "EMPLOYEE": "普通员工",
      "MANAGER": "管理人员",
      "SHAREHOLDER": "股东",
      "PRIVATE_ENTREPRENEUR": "私营企业主",
      "OTHER": "其他"
    },
    "CompanyType": {
      "GOVERNMENT_OFFICES": "国家及地方政府行政机构",
      "PUBLIC_INSTITUTION": "事业单位",
      "EDUCATION_RESEARCH_INSTITUTION": "学校及科研机构",
      "STATEOWNED_KEY_ENTERPRISES": "央企(包括下级单位)",
      "STATEOWNED_ENTERPRISES": "一般国企(包括下级单位)",
      "OVERSEAS_FUNDED_ENTERPRISES": "外资企业",
      "TAIWAN_HONGKONG_MACAU": "台港澳企业",
      "JOINT_VENTURE": "合资企业",
      "PRIVATE_ENTERPRISES": "民营企业",
      "SELF_EMPLOYED": "个体经营",
      "OTHER": "其他"
    },
    "CompanyIndustry": {
      "EXCAVATE": "采掘业",
      "GEO_SURVEY": "地质勘查业",
      "RESEARCH": "科学研究/技术服务",
      "IRRIGATION_ENVIRONMENT": "水利/环境/公共设施管理",
      "RENTAL": "租赁/商务服务",
      "MILITARY": "军队/武警",
      "INTERNATIONAL": "国际组织",
      "MANUFACTURE": "制造业",
      "IT": "电信/通信/计算机/软件/互联网",
      "GOVERNMENT": "国家机关/政党机关/社会团体",
      "MEDIA_ADVERTISEMENT": "媒体/广告/广播/电影/电视",
      "RETAIL_WHOLESALE": "零售/批发",
      "EDUCATION_TRAINING": "教育/培训 ",
      "PUBLIC_SERVICES": "社会服务业",
      "FINANCE_LAW": "金融/保险/法律",
      "TRANSPORTATION": "交通运输/仓储/邮政",
      "REAL_ESTATE": "房地产业",
      "ENERGY": "水/电/煤/气/能源生产供应",
      "CATERING_HOTEL": "住宿/餐饮",
      "MEDICAL_HEALTH_CARE": "医疗/卫生/保健",
      "CONSTRUCTION_ENGINERRING": "建筑/工程",
      "AGRICULTURE": "农/林/牧/渔",
      "ENTERTAIMENT": "文化/娱乐服务业",
      "SPORT_ART": "体育/艺术",
      "UTILITY": "社会福利/公益事业",
      "OTHER": "其他"
    },
    "CompanySize": {
      "SIZE_BELOW_10": "10人以下",
      "SIZE_11_100": "11﹣100人",
      "SIZE_101_500": "101﹣500人",
      "SIZE_501_2000": "501-2000人",
      "SIZE_2001_10000": "2001-10000人",
      "SIZE_10001_100000": "10000人以上"
    },
    "MonthlySalary": {
      "SALARY_BELOW_2000": "2000以下",
      "SALARY_2001_50000": "2001﹣5000",
      "SALARY_5001_10000": "5001﹣10000",
      "SALARY_10001_20000": "10001﹣20000",
      "SALARY_20001_50000": "20001﹣50000",
      "SALARY_ABOVE_50001": "50001以上"
    },
    "YearOfService": {
      "YEAR_BELOW_1": "1年以下",
      "YEAR_1_3": "1-3年(含)",
      "YEAR_3_5": "3-5年(含)",
      "YEAR_5_10": "5-10年(含)",
      "YEAR_10_20": "10-20年(含)",
      "YEAR_ABOVE_20": "20年以上"
    },
    "EthnicGroup": {
      "Han": "汉族",
      "Zhuang": "壮族",
      "Manchu": "满族",
      "Hui": "回族",
      "Miao": "苗族",
      "Uighur": "维吾尔族",
      "Yi": "彝族",
      "Tujia": "土家族",
      "Mongol": "蒙古族",
      "Tibetan": "藏族",
      "Buyi": "布依族",
      "Dong": "侗族",
      "Yao": "瑶族",
      "Korean": "朝鲜族",
      "Bai": "白族",
      "Hani": "哈尼族",
      "Li": "黎族",
      "Kazakh": "哈萨克族",
      "Dai": "傣族",
      "She": "畲族",
      "Lisu": "僳僳族",
      "Gelao": "仡佬族",
      "Lahu": "拉祜族",
      "Dongxiang": "东乡族",
      "Wa": "佤族",
      "Shui": "水族",
      "Naxi": "纳西族",
      "Qiang": "羌族",
      "Du": "土族",
      "Xibe": "锡伯族",
      "Mulam": "仫佬族",
      "Kirghiz": "柯尔克孜族",
      "Daur": "达斡尔族",
      "Jingpo": "景颇族",
      "Salar": "撒拉族",
      "Blang": "布朗族",
      "Maonan": "毛南族",
      "Tajik": "塔吉克族",
      "Pumi": "普米族",
      "Achang": "阿昌族",
      "Nu": "怒族",
      "Evenki": "鄂温克族",
      "Gin": "京族",
      "Jino": "基诺族",
      "Deang": "德昂族",
      "Uzbek": "乌孜别克族",
      "Russian": "俄罗斯族",
      "Yugur": "裕固族",
      "Bonan": "保安族",
      "Menba": "门巴族",
      "Oroqin": "鄂伦春族",
      "Drung": "独龙族",
      "Tatar": "塔塔尔族",
      "Hezhen": "赫哲族",
      "Lhoba": "珞巴族",
      "Gaoshan": "高山族"
    },
    "MaritalStatus": {
      "MARRIED": "已婚",
      "SINGLE": "未婚",
      "DIVORCED": "离异",
      "WIDOWED": "丧偶"
    },
    "CertificateType": {
      "ID": "身份认证",
      "CREDITREPORT": "信用报告",
      "FAMILY": "家庭情况认证",
      "EDUCATION": "学历认证",
      "INCOME": "收入认证",
      "CAREER": "工作认证",
      "REALESTATE": "房产认证",
      "LOCATION": "居住地认证",
      "VEHICLE": "购车认证",
      "LOANPURPOSE": "借款用途认证",
      "GUARANTEE": "担保认证",
      "OTHERS": "其他认证"
    },
    "CertificateStatus": {
      "UNCHECKED": "未审核",
      "CHECKED": "审核通过",
      "DENIED": "审核未通过",
      "ARCHIVED": "已存档",
      "DELETED": "已刪除"
    },
    "ProofType": {
      "ID_CARD": ["身份证", "ID"],
      "ID_HUKOU": ["户口本", "ID"],
      "ID_SOCIAL_SECURITY": ["社保", "ID"],
      "ID_DRIVE_LICENCE": ["驾照", "ID"],
      "ID_MARITAL": ["结婚证", "ID"],
      "ID_DIVORSE": ["离婚证", "ID"],
      "ID_VIDEO": ["本人视频", "ID"],
      "ID_OTHER": ["其他个人身份证明", "ID"],
      "CAREER_LABOUR_CONTRACT": ["劳动合同", "CAREER"],
      "CAREER_LABOUR_CERTIFICATE": ["技术职称及技能认证", "CAREER"],
      "CAREER_BUSINESS_LICENCE": ["营业执照", "CAREER"],
      "CAREER_TAX_REGISTRATION": ["税务登记证", "CAREER"],
      "CAREER_ORGANIZATION_REGISTRATION": ["组织机构代码证", "CAREER"],
      "CAREER_SANITARY_LICENCE": ["卫生许可证", "CAREER"],
      "CAREER_BUSINESS_CONTRACT": ["经营相关合同及合作协议", "CAREER"],
      "CAREER_BUSINESS_CERTIFICATE": ["经营相关许可证", "CAREER"],
      "CAREER_BUSINESS_PLACE": ["经营或施工场所", "CAREER"],
      "CAREER_CORP_COVER": ["企业大图", "CAREER"],
      "CAREER_CORP_LOGO": ["企业Logo", "CAREER"],
      "CAREER_CORP_ICON": ["企业Icon", "CAREER"],
      "CAREER_CORP_COMMITMENT_LETTER": ["企业承诺函", "CAREER"],
      "CAREER_OTHER": ["其他工作相关证明", "CAREER"],
      "INCOME_BANKACCOUNT": ["银行流水", "INCOME"],
      "INCOME_SALARY": ["工资证明", "INCOME"],
      "INCOME_OTHER": ["其他收入证明", "INCOME"],
      "RE_HOUSE_PROPERTY": ["住房权证或合同", "REALESTATE"],
      "RE_HOUSE_PICTURE": ["住房照片", "REALESTATE"],
      "RE_LAND_PROPERTY": ["土地权证或合同", "REALESTATE"],
      "RE_LAND_PICTURE": ["土地照片", "REALESTATE"],
      "RE_FACTORY_PROPERTY": ["厂房仓库权证或合同", "REALESTATE"],
      "RE_FACTORY_PICTURE": ["厂房仓库照片", "REALESTATE"],
      "RF_OTHER": ["其他房产相关证明", "REALESTATE"],
      "VEHICLE_LICENCE": ["行驶证", "VEHICLE"],
      "VEHICLE_PROPERTY": ["车辆权证或合同发票", "VEHICLE"],
      "VEHICLE_PLATE": ["车牌号", "VEHICLE"],
      "VEHICLE_PICTURE": ["车辆照片", "VEHICLE"],
      "VEHICLE_OTHER": ["其他车辆相关证明", "VEHICLE"],
      "GUARANTEE_ID": ["借款担保人身份", "GUARANTEE"],
      "GUARANTEE_REALESTATE": ["借款担保人房产", "GUARANTEE"],
      "GUARANTEE_CONTRACT": ["借款担保合同或文件", "GUARANTEE"],
      "GUARANTEE_OTHER": ["其他借款担保相关证明", "GUARANTEE"],
      "FACTORING_HISTORY": ["历史交易", "FACTORING"],
      "FACTORING_PROJECT": ["保理项目", "FACTORING"],
      "FACTORING_ANTI": ["反保理措施", "FACTORING"],
      "FACTORING_FINANCE_CORP": ["融资企业", "FACTORING"],
      "CREDITREPORT": ["信用报告", "CREDITREPORT"],
      "LOANPURPOSE": ["贷款用途", "LOANPURPOSE"],
      "FAMILY": ["家庭情况", "FAMILY"],
      "EDUCATION": ["学历", "EDUCATION"],
      "LOCATION": ["居住地", "LOCATION"],
      "OTHER_SINA_WEIBO": ["新浪微博", "OTHERS"],
      "OTHER_TECENT_WEIBO": ["腾讯微博", "OTHERS"],
      "OTHER_QQ": ["腾讯QQ", "OTHERS"],
      "FUNDINGPROJECT_BANNER": ["首屏图片", "CROWDFUNDING"],
      "FUNDINGPROJECT_PRE": ["预热图片", "CROWDFUNDING"],
      "FUNDINGPROJECT_PROJECT": ["项目图片", "CROWDFUNDING"],
      "FUNDINGPROJECT_MOBILE": ["移动端图片", "CROWDFUNDING"],
      "INVESTMENT_FUND_OVERVIEW": ["基金概况", "INVESTMENTFUND"],
      "INVESTMENT_FUND_CHART": ["基金图表", "INVESTMENTFUND"],
      "INVESTMENT_FUND_ASSET_MANAGE": ["资产管理", "INVESTMENTFUND"],
      "INVESTMENT_FUND_FEES_LEVEL": ["费率水平", "INVESTMENTFUND"],
      "INSURANCE_OVERVIEW": ["保险概况", "INSURANCE"],
      "INSURANCE_CHART": ["投资方向及资产配置", "INSURANCE"],
      "INSURANCE_CASE_DEMO": ["案例演示", "INSURANCE"],
      "ORDER_ID_CARD_FRONT": ["身份证正面", "ORDER_DATA"],
      "ORDER_ID_CARD_BACK": ["身份证反面", "ORDER_DATA"],
      "ORDER_BANK_ACCOUNT_FRONT": ["银行卡正面", "ORDER_DATA"],
      "ORDER_PAID_DATA": ["打款凭证", "ORDER_DATA"],
      "ORDER_CONTRACT": ["订单合同", "ORDER_DATA"],
      "WEALTHPRODUCT_OVERVIEW": ["理财产品概况", "WEALTHPRODUCT"],
      "WEALTHPRODUCT_REPORT": ["理财产品管理报告", "WEALTHPRODUCT"]
    },
    "Bank": {
      "ICBC": "中国工商银行",
      "ABC": "中国农业银行",
      "CMB": "招商银行",
      "CCB": "建设银行",
      "BCCB": "北京银行",
      "BJRCB": "北京农村商业银行",
      "BOC": "中国银行",
      "BOCOM": "交通银行",
      "CMBC": "民生银行",
      "BOS": "上海银行",
      "CBHB": "渤海银行",
      "CEB": "光大银行",
      "CIB": "兴业银行",
      "CITIC": "中信银行",
      "CZB": "浙商银行",
      "GDB": "广发银行",
      "HKBEA": "东亚银行",
      "HXB": "华夏银行",
      "HZCB": "杭州银行",
      "NJCB": "南京银行",
      "PINGAN": "平安银行",
      "PSBC": "邮政储蓄银行",
      "SDB": "深发银行",
      "SPDB": "浦发银行",
      "SRCB": "上海农村商业银行"
    },
    "CreditRank": {
      "HR": "99-0",
      "E": "109-100",
      "D": "119-110",
      "C": "129-120",
      "B": "144-130",
      "A": "159-145",
      "AA": "160及以上"
    },
    "LoanPurpose": {
      "SHORTTERM": "短期周转",
      "PERSONAL": "个人消费",
      "INVESTMENT": "投资创业",
      "CAR": "车辆融资",
      "HOUSE": "房产融资",
      "CORPORATION": "企业融资",
      "OTHER": "其它借款"
    },
    "RepaymentMethod": {
      "MonthlyInterest": ["按月付息到期还本", "还款压力小"],
      "EqualInstallment": ["按月等额本息", "还款便捷"],
      "EqualPrincipal": ["按月等额本金", "总利息最低"],
      "BulletRepayment": ["一次性还本付息", "短期首选"],
      "EqualInterest": ["月平息", "实际利率最高"],
      "YearlyInterest": ["按年付息到期还本", "还款压力小"]
    },
	"RepaymentStatus": {
      "UNDUE": "未到期",
      "OVERDUE": "逾期",
      "BREACH": "违约",
      "REPAYED": "已还清"
    },
    "LoanStatus": {
      "UNASSIGNED": "未处理",
      "INITIATED": "初始",
      "SCHEDULED": "已安排",
      "OPENED": "开放投标",
      "FAILED": "流标",
      "FINISHED": "已满标",
      "CANCELED": "已取消",
      "SETTLED": "已结算",
      "CLEARED": "已还清",
      "OVERDUE": "逾期",
      "BREACH": "违约",
      "ARCHIVED": "已存档"
    },
    "BidMethod": {
      "AUTO": "自动投标",
      "MANUAL": "手动投标",
      "WEALTHPRODUCT": "理财产品"
    },
    "MortgageType": {
      "RE_HOUSE": "房产",
      "RE_LAND": "土地(包括山林渔牧)",
      "RE_FACTORY": "厂房库房",
      "COMMONDITY": "商品库存",
      "VEHICLE": "车辆",
      "EQUIPMENT": "设备器材",
      "SECURITIES": "证券",
      "BOND": "债券",
      "STOCK": "股票",
      "DEPOSIT_RECEIPT": "银行存单",
      "OTHER": "其他"
    },
    "LoanRequestStatus": {
      "UNASSIGNED": "未处理",
      "ASSIGNED": "处理中",
      "CANCELED": "已取消",
      "PENDING_VISIT": "实地征信",
      "PENDING_RISK": "风控审核",
      "PENDING_APPORVE": "待批准",
      "APPROVED": "已批准",
      "REJECTED": "已驳回",
      "PUBLISHED": "已发放",
      "ARCHIVED": "已存档",
      "DELETED": "已刪除"
    },
    "HukouType": {
      "AGRICULTURE": "农业户口",
      "URBAN": "城镇户口"
    },
    "HouseStatus": {
      "COMMERCIAL_LOAN": "商业贷款",
      "HAF_LOAN": "公积金贷款",
      "COMPOSITE_LOAN": "组合贷款",
      "SELF_OWNED": "自有住房",
      "RENT": "租房",
      "OTHER": "其他"
    },
    "InvestStatus": {
      "PROPOSED": "申请投标",
      "FROZEN": "账户资金冻结",
      "FROZEN_FAILED": "资金冻结失败",
      "FAILED": "流标",
      "FINISHED": "投标成功",
      "CANCELED": "已取消",
      "SETTLED": "已结算",
      "CLEARED": "还款完成",
      "OVERDUE": "逾期",
      "BREACH": "违约"
    }
  }
}

},{}],"/node_modules/cc-superagent-promise/index.js":[function(require,module,exports){
/**
 * Promise wrapper for superagent
 */

// in the browser Promise is expected to be defined.
var Promise = require('bluebird');

function wrap(superagent) {
  /**
   * Request object similar to superagent.Request, but with end() returning
   * a promise.
   */
  function PromiseRequest() {
    superagent.Request.apply(this, arguments);
  }

  // Inherit form superagent.Request
  PromiseRequest.prototype = Object.create(superagent.Request.prototype);

  /** Send request and get a promise that `end` was emitted */
  PromiseRequest.prototype.end = function(cb) {
    var _super = superagent.Request.prototype.end;
    var context = this;

    return new Promise(function(accept, reject) {
      _super.call(context, function(err, value) {
        if (cb) {
          cb(err, value);
        }

        if (err) {
          return reject(err);
        }
        accept(value);
      });
    });
  };

  /**
   * Request builder with same interface as superagent.
   * It is convenient to import this as `request` in place of superagent.
   */
  var request = function(method, url) {
    return new PromiseRequest(method, url);
  };

  request.wrap = wrap;

  /** Helper for making a get request */
  request.get = function(url, data) {
    var req = request('GET', url);
    if (data) {
      req.query(data);
    }
    return req;
  };

  /** Helper for making a head request */
  request.head = function(url, data) {
    var req = request('HEAD', url);
    if (data) {
      req.send(data);
    }
    return req;
  };

  /** Helper for making a delete request */
  request.del = function(url) {
    return request('DELETE', url);
  };

  /** Helper for making a patch request */
  request.patch = function(url, data) {
    var req = request('PATCH', url);
    if (data) {
      req.send(data);
    }
    return req;
  };

  /** Helper for making a post request */
  request.post = function(url, data) {
    var req = request('POST', url);
    if (data) {
      req.send(data);
    }
    return req;
  };

  /** Helper for making a put request */
  request.put = function(url, data) {
    var req = request('PUT', url);
    if (data) {
      req.send(data);
    }
    return req;
  };

  // Export the request builder
  return request;
}

module.exports = wrap(require('superagent'));

},{"bluebird":"/bluebird","superagent":"/node_modules/superagent/lib/client.js"}],"/node_modules/component-emitter/index.js":[function(require,module,exports){

/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],"/node_modules/reduce-component/index.js":[function(require,module,exports){

/**
 * Reduce `arr` with `fn`.
 *
 * @param {Array} arr
 * @param {Function} fn
 * @param {Mixed} initial
 *
 * TODO: combatible error handling?
 */

module.exports = function(arr, fn, initial){  
  var idx = 0;
  var len = arr.length;
  var curr = arguments.length == 3
    ? initial
    : arr[idx++];

  while (idx < len) {
    curr = fn.call(null, curr, arr[idx], ++idx, arr);
  }
  
  return curr;
};
},{}],"/node_modules/superagent/lib/client.js":[function(require,module,exports){
/**
 * Module dependencies.
 */

var Emitter = require('emitter');
var reduce = require('reduce');

/**
 * Root reference for iframes.
 */

var root = 'undefined' == typeof window
  ? this
  : window;

/**
 * Noop.
 */

function noop(){};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * TODO: future proof, move to compoent land
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isHost(obj) {
  var str = {}.toString.call(obj);

  switch (str) {
    case '[object File]':
    case '[object Blob]':
    case '[object FormData]':
      return true;
    default:
      return false;
  }
}

/**
 * Determine XHR.
 */

function getXHR() {
  if (root.XMLHttpRequest
    && ('file:' != root.location.protocol || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  return false;
}

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return obj === Object(obj);
}

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    if (null != obj[key]) {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(obj[key]));
    }
  }
  return pairs.join('&');
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var parts;
  var pair;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    parts = pair.split('=');
    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'application/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  lines.pop(); // trailing CRLF

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function type(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function params(str){
  return reduce(str.split(/ *; */), function(obj, str){
    var parts = str.split(/ *= */)
      , key = parts.shift()
      , val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req, options) {
  options = options || {};
  this.req = req;
  this.xhr = this.req.xhr;
  this.text = this.req.method !='HEAD' 
     ? this.xhr.responseText 
     : null;
  this.setStatusProperties(this.xhr.status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this.setHeaderProperties(this.header);
  this.body = this.req.method != 'HEAD'
    ? this.parseBody(this.text)
    : null;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

Response.prototype.get = function(field){
  return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

Response.prototype.setHeaderProperties = function(header){
  // content-type
  var ct = this.header['content-type'] || '';
  this.type = type(ct);

  // params
  var obj = params(ct);
  for (var key in obj) this[key] = obj[key];
};

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype.parseBody = function(str){
  var parse = request.parse[this.type];
  return parse && str && str.length
    ? parse(str)
    : null;
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

Response.prototype.setStatusProperties = function(status){
  var type = status / 100 | 0;

  // status / class
  this.status = status;
  this.statusType = type;

  // basics
  this.info = 1 == type;
  this.ok = 2 == type;
  this.clientError = 4 == type;
  this.serverError = 5 == type;
  this.error = (4 == type || 5 == type)
    ? this.toError()
    : false;

  // sugar
  this.accepted = 202 == status;
  this.noContent = 204 == status || 1223 == status;
  this.badRequest = 400 == status;
  this.unauthorized = 401 == status;
  this.notAcceptable = 406 == status;
  this.notFound = 404 == status;
  this.forbidden = 403 == status;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  Emitter.call(this);
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {};
  this._header = {};
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self); 
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
    }

    self.callback(err, res);
  });
}

/**
 * Mixin `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Allow for extension
 */

Request.prototype.use = function(fn) {
  fn(this);
  return this;
}

/**
 * Set timeout to `ms`.
 *
 * @param {Number} ms
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.timeout = function(ms){
  this._timeout = ms;
  return this;
};

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.clearTimeout = function(){
  this._timeout = 0;
  clearTimeout(this._timer);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */

Request.prototype.abort = function(){
  if (this.aborted) return;
  this.aborted = true;
  this.xhr.abort();
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Set header `field` to `val`, or multiple fields with one object.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Get case-insensitive header `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api private
 */

Request.prototype.getHeader = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} pass
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass){
  var str = btoa(user + ':' + pass);
  this.set('Authorization', 'Basic ' + str);
  return this;
};

/**
* Add query-string `val`.
*
* Examples:
*
*   request.get('/shoes')
*     .query('size=10')
*     .query({ color: 'blue' })
*
* @param {Object|String} val
* @return {Request} for chaining
* @api public
*/

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Write the field `name` and `val` for "multipart/form-data"
 * request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 * ```
 *
 * @param {String} name
 * @param {String|Blob|File} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.field = function(name, val){
  if (!this._formData) this._formData = new FormData();
  this._formData.append(name, val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `filename`.
 *
 * ``` js
 * request.post('/upload')
 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String} filename
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, filename){
  if (!this._formData) this._formData = new FormData();
  this._formData.append(field, file, filename);
  return this;
};

/**
 * Send `data`, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // querystring
 *       request.get('/search')
 *         .end(callback)
 *
 *       // multiple data "writes"
 *       request.get('/search')
 *         .send({ search: 'query' })
 *         .send({ range: '1..5' })
 *         .send({ order: 'desc' })
 *         .end(callback)
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"})
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
  *      request.post('/user')
  *        .send('name=tobi')
  *        .send('species=ferret')
  *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.send = function(data){
  var obj = isObject(data);
  var type = this.getHeader('Content-Type');

  // merge
  if (obj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    if (!type) this.type('form');
    type = this.getHeader('Content-Type');
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!obj) return this;
  if (!type) this.type('json');
  return this;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  var fn = this._callback;
  this.clearTimeout();
  if (2 == fn.length) return fn(err, res);
  if (err) return this.emit('error', err);
  fn(res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');
  err.crossDomain = true;
  this.callback(err);
};

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

Request.prototype.timeoutError = function(){
  var timeout = this._timeout;
  var err = new Error('timeout of ' + timeout + 'ms exceeded');
  err.timeout = timeout;
  this.callback(err);
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

Request.prototype.withCredentials = function(){
  this._withCredentials = true;
  return this;
};

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  var self = this;
  var xhr = this.xhr = getXHR();
  var query = this._query.join('&');
  var timeout = this._timeout;
  var data = this._formData || this._data;

  // store callback
  this._callback = fn || noop;

  // state change
  xhr.onreadystatechange = function(){
    if (4 != xhr.readyState) return;
    if (0 == xhr.status) {
      if (self.aborted) return self.timeoutError();
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  if (xhr.upload) {
    xhr.upload.onprogress = function(e){
      e.percent = e.loaded / e.total * 100;
      self.emit('progress', e);
    };
  }

  // timeout
  if (timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self.abort();
    }, timeout);
  }

  // querystring
  if (query) {
    query = request.serializeObject(query);
    this.url += ~this.url.indexOf('?')
      ? '&' + query
      : '?' + query;
  }

  // initiate request
  xhr.open(this.method, this.url, true);

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
    // serialize stuff
    var serialize = request.serialize[this.getHeader('Content-Type')];
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;
    xhr.setRequestHeader(field, this.header[field]);
  }

  // send stuff
  this.emit('request', this);
  xhr.send(data);
  return this;
};

/**
 * Expose `Request`.
 */

request.Request = Request;

/**
 * Issue a request:
 *
 * Examples:
 *
 *    request('GET', '/users').end(callback)
 *    request('/users').end(callback)
 *    request('/users', callback)
 *
 * @param {String} method
 * @param {String|Function} url or callback
 * @return {Request}
 * @api public
 */

function request(method, url) {
  // callback
  if ('function' == typeof url) {
    return new Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new Request('GET', method);
  }

  return new Request(method, url);
}

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.del = function(url, fn){
  var req = request('DELETE', url);
  if (fn) req.end(fn);
  return req;
};

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * Expose `request`.
 */

module.exports = request;

},{"emitter":"/node_modules/component-emitter/index.js","reduce":"/node_modules/reduce-component/index.js"}]},{},["/ccc/invest/js/main/investList.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvemZjbS93b3JrL3Byb2plY3QtenFqci10bXAvd2ViL2NjYy9nbG9iYWwvanMvbGliL2pxdWVyeS5lYXN5LXBpZS1jaGFydC5qcyIsIi9Vc2Vycy96ZmNtL3dvcmsvcHJvamVjdC16cWpyLXRtcC93ZWIvY2NjL2dsb2JhbC9qcy9saWIvdXRpbHMuanMiLCIvVXNlcnMvemZjbS93b3JrL3Byb2plY3QtenFqci10bXAvd2ViL2NjYy9nbG9iYWwvanMvbW9kdWxlcy9jY2NCb3guanMiLCIvVXNlcnMvemZjbS93b3JrL3Byb2plY3QtenFqci10bXAvd2ViL2NjYy9nbG9iYWwvanMvbW9kdWxlcy9jY2NDYWxjdWxhdG9yLmpzIiwiLy0vY2NjL2dsb2JhbC9wYXJ0aWFscy9tb2R1bGVzL2NjY0NhbGN1bGF0b3IuaHRtbCIsIi8tL2NjYy9nbG9iYWwvcGFydGlhbHMvc2luZ2xlSW52ZXN0TGlzdC5odG1sIiwiL1VzZXJzL3pmY20vd29yay9wcm9qZWN0LXpxanItdG1wL3dlYi9jY2MvaW52ZXN0L2pzL21haW4vaW52ZXN0TGlzdC5qcyIsIi9Vc2Vycy96ZmNtL3dvcmsvcHJvamVjdC16cWpyLXRtcC93ZWIvY2NjL2ludmVzdC9qcy9tYWluL3NlcnZpY2UvbGlzdC5qcyIsIi8tL2NjYy9pbnZlc3QvcGFydGlhbHMvcGFnZXIuaHRtbCIsIi8tL25vZGVfbW9kdWxlcy9AZHMvaTE4bi9pbmRleC5qcyIsIi8tL25vZGVfbW9kdWxlcy9AZHMvaTE4bi96aC1jbi5qc29uIiwiLy0vbm9kZV9tb2R1bGVzL2NjLXN1cGVyYWdlbnQtcHJvbWlzZS9pbmRleC5qcyIsIi8tL25vZGVfbW9kdWxlcy9jb21wb25lbnQtZW1pdHRlci9pbmRleC5qcyIsIi8tL25vZGVfbW9kdWxlcy9yZWR1Y2UtY29tcG9uZW50L2luZGV4LmpzIiwiLy0vbm9kZV9tb2R1bGVzL3N1cGVyYWdlbnQvbGliL2NsaWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztBQ2lCQSxDQUFDLFVBQVMsQ0FBQyxFQUFFO0FBQ1gsR0FBQyxDQUFDLFlBQVksR0FBRyxVQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUU7QUFDckMsUUFBSSxZQUFZO1FBQUUsV0FBVztRQUFFLFFBQVE7UUFBRSxhQUFhO1FBQUUsR0FBRztRQUFFLGdCQUFnQjtRQUFFLFdBQVc7UUFBRSxXQUFXO1FBQ3JHLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDZixRQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztBQUNiLFFBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2pCLFFBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNwQyxRQUFJLENBQUMsSUFBSSxHQUFHLFlBQVc7QUFDckIsVUFBSSxPQUFPLEVBQUUsT0FBTyxDQUFDO0FBQ3JCLFdBQUssQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDckUsYUFBTyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNsRCxXQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNyQixXQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxZQUFZLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BILFdBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvQixVQUFJLE9BQU8sa0JBQWtCLEtBQUssV0FBVyxJQUFJLGtCQUFrQixLQUFLLElBQUksRUFBRTtBQUM1RSwwQkFBa0IsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQzlDO0FBQ0QsV0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQyxVQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLEVBQUU7QUFDL0IsZUFBTyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztBQUNsQyxTQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNsQixlQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJO0FBQ3pCLGdCQUFNLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1NBQzNCLENBQUMsQ0FBQztBQUNILGFBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQztBQUM5QixhQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUM7QUFDL0IsYUFBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ25DO0FBQ0QsV0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3BFLFdBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFDdkQsV0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDbkMsV0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7QUFDWixhQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJO0FBQ3pCLGNBQU0sRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUk7QUFDMUIsa0JBQVUsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSTtPQUMzQyxDQUFDLENBQUM7QUFDSCxXQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3RCLGFBQU8sS0FBSyxDQUFDO0tBQ2QsQ0FBQztBQUNGLFFBQUksQ0FBQyxNQUFNLEdBQUcsVUFBUyxPQUFPLEVBQUU7QUFDOUIsYUFBTyxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsVUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUU7QUFDbkMsZ0JBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztPQUNuQixNQUFNO0FBQ0wsbUJBQVcsQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO09BQ3hDO0FBQ0QsYUFBTyxLQUFLLENBQUM7S0FDZCxDQUFDO0FBQ0YsZUFBVyxHQUFHLFlBQVc7QUFDdkIsVUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQztBQUNwQixXQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUMvQyxXQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDeEIsY0FBUSxHQUFHLEVBQUUsQ0FBQztBQUNkLFdBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUU7QUFDbkMsZ0JBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7T0FDaEM7QUFDRCxhQUFPLFFBQVEsQ0FBQztLQUNqQixDQUFDO0FBQ0YsZ0JBQVksR0FBRyxVQUFTLENBQUMsRUFBRTtBQUN6QixVQUFJLE1BQU0sQ0FBQztBQUNYLFlBQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3RELFdBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDakIsV0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDbkMsV0FBSyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxHQUFHLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQy9GLFdBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDckIsQ0FBQztBQUNGLGVBQVcsR0FBRyxZQUFXO0FBQ3ZCLFVBQUksTUFBTSxDQUFDO0FBQ1gsWUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7QUFDOUQsVUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsS0FBSyxLQUFLLEVBQUU7QUFDdEMsY0FBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztPQUNyQztBQUNELFdBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDdEIsV0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ2xELFdBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDdEIsV0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDakQsV0FBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDOUMsV0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztLQUNwQixDQUFDO0FBQ0Ysb0JBQWdCLEdBQUcsWUFBVztBQUM1QixVQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxLQUFLLEtBQUssRUFBRTtBQUN0QyxtQkFBVyxFQUFFLENBQUM7T0FDZjtBQUNELFVBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUssS0FBSyxFQUFFO0FBQ3RDLG1CQUFXLEVBQUUsQ0FBQztPQUNmO0tBQ0YsQ0FBQztBQUNGLFlBQVEsR0FBRyxVQUFTLE9BQU8sRUFBRTtBQUMzQixVQUFJLE1BQU0sQ0FBQztBQUNYLHNCQUFnQixFQUFFLENBQUM7QUFDbkIsV0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ3hILFdBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzFDLFdBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQzlDLFlBQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0FBQzlELFVBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEtBQUssS0FBSyxFQUFFO0FBQ3RDLGNBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7T0FDckM7QUFDRCxXQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ2pCLFdBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUMvQixXQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3RCLFdBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxPQUFPLEdBQUcsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ25FLFdBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDbkIsV0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNyQixDQUFDO0FBQ0YsT0FBRyxHQUFHLENBQUMsWUFBVztBQUNoQixhQUFPLE1BQU0sQ0FBQyxxQkFBcUIsSUFBSSxNQUFNLENBQUMsMkJBQTJCLElBQUksTUFBTSxDQUFDLHdCQUF3QixJQUFJLFVBQVMsUUFBUSxFQUFFO0FBQ2pJLGVBQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO09BQy9DLENBQUM7S0FDSCxDQUFBLEVBQUcsQ0FBQztBQUNMLGVBQVcsR0FBRyxVQUFTLElBQUksRUFBRSxFQUFFLEVBQUU7QUFDL0IsVUFBSSxJQUFJLEVBQUUsU0FBUyxDQUFDO0FBQ3BCLFdBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNsQyxXQUFLLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUN0QixVQUFJLENBQUMsR0FBRyxLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsWUFBVztBQUNqQyxlQUFPLENBQUUsSUFBSSxJQUFJLEVBQUEsQUFBQyxDQUFDO09BQ3BCLENBQUEsQUFBQyxDQUFDO0FBQ0gsZUFBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN2QixVQUFJLEdBQUcsWUFBVztBQUNoQixZQUFJLFlBQVksRUFBRSxPQUFPLENBQUM7QUFDMUIsZUFBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUM7QUFDakMsWUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7QUFDbkMsYUFBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ1g7QUFDRCxhQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzlHLHdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM3QixvQkFBWSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxHQUFHLElBQUksRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFDaEYsYUFBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMvQyxnQkFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDbkMsWUFBSSxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7QUFDcEMsaUJBQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDM0Q7T0FDRixDQUFDO0FBQ0YsU0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ1gsQ0FBQztBQUNGLGlCQUFhLEdBQUcsVUFBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7QUFDbkMsVUFBSSxNQUFNLEVBQUUsTUFBTSxDQUFDO0FBQ25CLFlBQU0sR0FBRyxVQUFTLENBQUMsRUFBRTtBQUNuQixlQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO09BQ3ZCLENBQUM7QUFDRixZQUFNLEdBQUcsVUFBUyxDQUFDLEVBQUU7QUFDbkIsWUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQ1QsaUJBQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2xCLE1BQU07QUFDTCxpQkFBTyxDQUFDLEdBQUcsTUFBTSxDQUFDLEFBQUMsQ0FBQyxHQUFHLENBQUMsR0FBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNyQztPQUNGLENBQUM7QUFDRixPQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNYLGFBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzlCLENBQUM7QUFDRixXQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztHQUNwQixDQUFDO0FBQ0YsR0FBQyxDQUFDLFlBQVksQ0FBQyxjQUFjLEdBQUc7QUFDOUIsWUFBUSxFQUFFLFNBQVM7QUFDbkIsY0FBVSxFQUFFLFNBQVM7QUFDckIsY0FBVSxFQUFFLFNBQVM7QUFDckIsV0FBTyxFQUFFLE9BQU87QUFDaEIsVUFBTSxFQUFFLENBQUM7QUFDVCxRQUFJLEVBQUUsR0FBRztBQUNULGFBQVMsRUFBRSxDQUFDO0FBQ1osV0FBTyxFQUFFLEtBQUs7QUFDZCxXQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUk7QUFDZixVQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUk7QUFDZCxVQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUk7R0FDZixDQUFDO0FBQ0YsR0FBQyxDQUFDLEVBQUUsQ0FBQyxZQUFZLEdBQUcsVUFBUyxPQUFPLEVBQUU7QUFDcEMsV0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxVQUFTLENBQUMsRUFBRSxFQUFFLEVBQUU7QUFDbEMsVUFBSSxHQUFHLEVBQUUsZUFBZSxDQUFDO0FBQ3pCLFNBQUcsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDWixVQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRTtBQUM3Qix1QkFBZSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUNwRCxlQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFFLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztPQUMxRTtLQUNGLENBQUMsQ0FBQztHQUNKLENBQUM7QUFDRixTQUFPLEtBQUssQ0FBQyxDQUFDO0NBQ2YsQ0FBQSxDQUFFLE1BQU0sQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNoTVgsWUFBWSxDQUFDO0FBQ2IsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLFlBQVk7Ozs7QUFLMUIsUUFBSSxhQUFhLEdBQUcsU0FBaEIsYUFBYSxHQUFlLEVBQUUsQ0FBQzs7QUFFbkMsaUJBQWEsQ0FBQyxTQUFTLEdBQUc7O0FBRXRCLHNCQUFjLEVBQUUsd0JBQVUsU0FBUyxFQUFFLElBQUksRUFBRTtBQUN2QyxnQkFBSSxHQUFHLEdBQ0gsaUdBQWlHLENBQUM7O0FBRXRHLGdCQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtBQUNqQyxvQkFBSSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzlCLHVCQUFPO2FBQ1Y7O0FBRUQsZ0JBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUU7QUFDL0Msb0JBQUksQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztBQUM5Qix1QkFBTzthQUNWOztBQUVELGdCQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUEsQ0FBRSxLQUFLLENBQUMscUNBQXFDLENBQUMsRUFBRTtBQUNqRSxvQkFBSSxDQUFDLEtBQUssRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO0FBQ25DLHVCQUFPO2FBQ1Y7O0FBRUQsZ0JBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLFNBQVMsQ0FBQSxDQUFFLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO0FBQ3BELG9CQUFJLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUM7QUFDcEMsdUJBQU87YUFDVjs7QUFFRCxnQkFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNwQjs7QUFFRCx5QkFBaUIsRUFBRSwyQkFBVSxZQUFZLEVBQUUsSUFBSSxFQUFFO0FBQzdDLGdCQUFJLEdBQUcsR0FDSCxpR0FBaUcsQ0FBQzs7QUFFdEcsZ0JBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO0FBQ3ZDLG9CQUFJLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDOUIsdUJBQU87YUFDVjs7QUFFRCxnQkFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLFlBQVksQ0FBQSxDQUNsQixLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7QUFDYixvQkFBSSxDQUFDLEtBQUssRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQ2pDLHVCQUFPO2FBQ1Y7O0FBRUQsZ0JBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDaEMsb0JBQUksQ0FBQyxLQUFLLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztBQUNqQyx1QkFBTzthQUNWOztBQUVELGdCQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQzlDLEVBQUUsRUFBRTtBQUNKLG9CQUFJLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDOUIsdUJBQU87YUFDVjs7QUFFRCxnQkFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNwQjs7QUFFRCxxQkFBYSxFQUFFLHVCQUFVLFFBQVEsRUFBRSxJQUFJLEVBQUU7O0FBRXJDLGdCQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtBQUMvQixvQkFBSSxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztBQUM3Qix1QkFBTzthQUNWOztBQUVELGdCQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ3JCLG9CQUFJLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQUM7QUFDL0IsdUJBQU87YUFDVjs7QUFFRCxnQkFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUNwQjtBQUNELHVCQUFlLEVBQUUseUJBQVUsUUFBUSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUU7O0FBRW5ELGdCQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtBQUNuQyxvQkFBSSxDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0FBQy9CLHVCQUFPO2FBQ1Y7O0FBRUQsZ0JBQUksVUFBVSxLQUFLLFFBQVEsRUFBRTtBQUN6QixvQkFBSSxDQUFDLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO0FBQ2xDLHVCQUFPO2FBQ1Y7O0FBRUQsZ0JBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDcEI7O0FBRUQsa0JBQVUsRUFBRSxvQkFBVSxLQUFLLEVBQUUsSUFBSSxFQUFFO0FBQy9CLGdCQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtBQUN6QixvQkFBSSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztBQUMxQix1QkFBTzthQUNWO0FBQ0QsZ0JBQUksQ0FBQyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUEsQ0FBRSxLQUFLLENBQUMscUNBQXFDLENBQUMsRUFBRTtBQUM1RCxvQkFBSSxDQUFDLEtBQUssRUFBRSxlQUFlLENBQUMsQ0FBQztBQUM3Qix1QkFBTzthQUNWO0FBQ0QsZ0JBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDcEI7QUFDRCxtQkFBVyxFQUFFLHFCQUFVLE1BQU0sRUFBRSxJQUFJLEVBQUU7QUFDakMsZ0JBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzNCLG9CQUFJLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQzNCLHVCQUFPO2FBQ1Y7QUFDRCxnQkFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQSxDQUNaLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO0FBQ2xDLG9CQUFJLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7QUFDOUIsdUJBQU87YUFDVjtBQUNELGdCQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQ3BCO0FBQ0QscUJBQWEsRUFBRSx1QkFBVSxRQUFRLEVBQUUsSUFBSSxFQUFFO0FBQ3JDLG9CQUFRLEdBQUcsQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFBLENBQUUsT0FBTyxDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNyRCxnQkFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO0FBQ2YsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDakIsaUJBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcmFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24obil7XCJ1c2Ugc3RyaWN0XCI7aWYobi5CQ1AmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLkJDUC5wcmVsdWRlKXJldHVybiBuLkJDUC5wcmVsdWRlO3ZhciBlPW4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxuLnNldEltbWVkaWF0ZXx8ZnVuY3Rpb24obil7cmV0dXJuIHNldFRpbWVvdXQobiwxKX07dGhpcy5RQVM9ZnVuY3Rpb24obil7dmFyIGU9bi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fG4uc2V0SW1tZWRpYXRlfHxmdW5jdGlvbihuKXtyZXR1cm4gc2V0VGltZW91dChuLDEpfTt2YXIgcj1bXS5jb25jYXQobi5fcWFzX3F1ZXVlfHxbXSk7aWYobi5fcWFzX3F1ZXVlKWRlbGV0ZSBuLl9xYXNfcXVldWU7dmFyIHQ9QXJyYXkucHJvdG90eXBlLnNsaWNlO3ZhciB1PWZ1bmN0aW9uKG4pe3ZhciBlPXQuY2FsbChhcmd1bWVudHMsMSk7aWYodS5sb2FkZWQpbyhuLGUpO2Vsc2Ugci5wdXNoKFtuLGVdKTtyZXR1cm4gdX07dS5zeW5jPWZ1bmN0aW9uKG4pe24uc3luYz10cnVlO3JldHVybiB1LmFwcGx5KG51bGwsYXJndW1lbnRzKX07dS5yZWFkeT1pO3Uuc3luYy5yZWFkeT1pO2Z1bmN0aW9uIGkoKXt1LmxvYWRlZD10cnVlO3ZhciBuO3doaWxlKG49ci5zaGlmdCgpKXtvKG5bMF0sblsxXSl9fWZ1bmN0aW9uIG8ocix0KXtpZih0eXBlb2YgciE9XCJmdW5jdGlvblwiKXJldHVybjtyLnN5bmM/ci5hcHBseShuLHQpOmUoZnVuY3Rpb24oKXtyLmFwcGx5KG4sdCl9KX1yZXR1cm4gdX0odGhpcyk7dmFyIHI9bi5CQ1A9dDtmdW5jdGlvbiB0KG4pe1FBUyhuLGwoW10pKX10LnN5bmM9ZnVuY3Rpb24obil7UUFTLnN5bmMobixsKFtdKSl9O3IucHJlbHVkZT1jO3IubWVyZ2VNb2R1bGVzPWE7dmFyIHU9MDt2YXIgaT1yLmNhY2hlPXt9O3ZhciBvPXIubW9kdWxlcz17fTtyZXR1cm4gYztmdW5jdGlvbiBhKG4pe249bnx8e307Zm9yKHZhciBlIGluIG4pe2lmKHR5cGVvZiBlIT09XCJudW1iZXJcIiYmbi5oYXNPd25Qcm9wZXJ0eShlKSl7aWYoIShlIGluIG8pKXtvW2VdPW5bZV07aWYoZVswXSE9PVwiL1wiKW9bXCIvXCIrZV09bltlXX19fX1mdW5jdGlvbiBmKCl7dSs9MTtlKGZ1bmN0aW9uKCl7aWYodT49ZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInNjcmlwdFtkYXRhLWNvbW1vbl1cIikubGVuZ3RoKXtRQVMucmVhZHkoKX19KX1mdW5jdGlvbiBjKG4sZSx0KXtyLm1lcmdlTW9kdWxlcyhuKTt2YXIgdT1sKHQpO2lmKCF0fHwhdC5sZW5ndGgpe2YoKX1lbHNle3ZhciBpO1FBUyhmdW5jdGlvbihuKXt3aGlsZShpPW4uc2hpZnQoKSl7dShpKX19LHQpfXJldHVybiB1fWZ1bmN0aW9uIGwobil7cmV0dXJuIGZ1bmN0aW9uIGUocil7aWYoIVFBUy5sb2FkZWQpe3Rocm93IG5ldyBFcnJvcihcImV4dGVybmFsIGxpYnMgbm90IHJlYWR5IVwiKX12YXIgdD1yO2lmKHR5cGVvZiB0PT09XCJzdHJpbmdcIiYmdFswXT09PVwiL1wiKXt0PXQucmVwbGFjZSgvXlxcLy8sXCJcIil9dmFyIHU7aWYoIWlbdF0pe2lmKCEodT1vW3RdKSl7aWYoISh1PW9bcj09PVwiL1wiK3Q/cjp0PVwiL1wiK3RdKSl7aWYoISh1PW9bdD1cIi9ub2RlX21vZHVsZXNcIit0XSkpe3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrcitcIidcXG5cXG5hbGwgYXZhaWxhYmxlIG1vZHVsZXM6XFxuXCIrcygpLmpvaW4oXCJcXG5cIikpO2EuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIjt0aHJvdyBhfX19dmFyIGY9aVt0XT1pW3JdPXtleHBvcnRzOnt9fTt1WzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKG4pe3ZhciByPXVbMV1bbl07cmV0dXJuIGUocj9yOlwiL1wiK24pfSxmLGYuZXhwb3J0cyxjLG8saSxuKX1yZXR1cm4gaVt0XS5leHBvcnRzfX1mdW5jdGlvbiBzKCl7dmFyIG49e307cChvLGZ1bmN0aW9uKGUscil7aWYoKFwiXCIrcikubWF0Y2goL15cXC8/XFxkKyQvKSlyZXR1cm47bltyLnJlcGxhY2UoL15cXC8obm9kZV9tb2R1bGVzXFwvKT8vLFwiXCIpXT0xfSk7cmV0dXJuIG0obil9ZnVuY3Rpb24gZChuLGUpe3ZhciByLHQ7Zm9yKHI9MCx0PW4ubGVuZ3RoO3I8dDtyKyspe2UuY2FsbChuLG5bcl0sayxuKX19ZnVuY3Rpb24gcChuLGUpe2Zvcih2YXIgciBpbiBuKXtpZihuLmhhc093blByb3BlcnR5KHIpKXtlLmNhbGwobixuW3JdLHIsbil9fX1mdW5jdGlvbiBtKG4pe3ZhciBlPVtdO3AobixmdW5jdGlvbihuLHIpe2UucHVzaChyKX0pO3JldHVybiBlfX0pLmNhbGwodGhpcyx0aGlzKSIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS42LjNcbi8qXG5FYXN5IHBpZSBjaGFydCBpcyBhIGpxdWVyeSBwbHVnaW4gdG8gZGlzcGxheSBzaW1wbGUgYW5pbWF0ZWQgcGllIGNoYXJ0cyBmb3Igb25seSBvbmUgdmFsdWVcblxuRHVhbCBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbmFuZCBHUEwgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvZ3BsLWxpY2Vuc2UucGhwKSBsaWNlbnNlcy5cblxuQnVpbHQgb24gdG9wIG9mIHRoZSBqUXVlcnkgbGlicmFyeSAoaHR0cDovL2pxdWVyeS5jb20pXG5cbkBzb3VyY2U6IGh0dHA6Ly9naXRodWIuY29tL3JlbmRyby9lYXN5LXBpZS1jaGFydC9cbkBhdXRvcjogUm9iZXJ0IEZsZWlzY2htYW5uXG5AdmVyc2lvbjogMS4yLjNcblxuSW5zcGlyZWQgYnk6IGh0dHA6Ly9kcmliYmJsZS5jb20vc2hvdHMvNjMxMDc0LVNpbXBsZS1QaWUtQ2hhcnRzLUlJP2xpc3Q9cG9wdWxhciZvZmZzZXQ9MjEwXG5UaGFua3MgdG8gUGhpbGlwIFRocmFzaGVyIGZvciB0aGUganF1ZXJ5IHBsdWdpbiBib2lsZXJwbGF0ZSBmb3IgY29mZmVlIHNjcmlwdFxuKi9cblxuKGZ1bmN0aW9uKCQpIHtcbiAgJC5lYXN5UGllQ2hhcnQgPSBmdW5jdGlvbihlbCwgb3B0aW9ucykge1xuICAgIHZhciBhZGRTY2FsZUxpbmUsIGFuaW1hdGVMaW5lLCBkcmF3TGluZSwgZWFzZUluT3V0UXVhZCwgckFGLCByZW5kZXJCYWNrZ3JvdW5kLCByZW5kZXJTY2FsZSwgcmVuZGVyVHJhY2ssXG4gICAgICBfdGhpcyA9IHRoaXM7XG4gICAgdGhpcy5lbCA9IGVsO1xuICAgIHRoaXMuJGVsID0gJChlbCk7XG4gICAgdGhpcy4kZWwuZGF0YShcImVhc3lQaWVDaGFydFwiLCB0aGlzKTtcbiAgICB0aGlzLmluaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwZXJjZW50LCBzY2FsZUJ5O1xuICAgICAgX3RoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkLmVhc3lQaWVDaGFydC5kZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICBwZXJjZW50ID0gcGFyc2VJbnQoX3RoaXMuJGVsLmRhdGEoJ3BlcmNlbnQnKSwgMTApO1xuICAgICAgX3RoaXMucGVyY2VudGFnZSA9IDA7XG4gICAgICBfdGhpcy5jYW52YXMgPSAkKFwiPGNhbnZhcyB3aWR0aD0nXCIgKyBfdGhpcy5vcHRpb25zLnNpemUgKyBcIicgaGVpZ2h0PSdcIiArIF90aGlzLm9wdGlvbnMuc2l6ZSArIFwiJz48L2NhbnZhcz5cIikuZ2V0KDApO1xuICAgICAgX3RoaXMuJGVsLmFwcGVuZChfdGhpcy5jYW52YXMpO1xuICAgICAgaWYgKHR5cGVvZiBHX3ZtbENhbnZhc01hbmFnZXIgIT09IFwidW5kZWZpbmVkXCIgJiYgR192bWxDYW52YXNNYW5hZ2VyICE9PSBudWxsKSB7XG4gICAgICAgIEdfdm1sQ2FudmFzTWFuYWdlci5pbml0RWxlbWVudChfdGhpcy5jYW52YXMpO1xuICAgICAgfVxuICAgICAgX3RoaXMuY3R4ID0gX3RoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICBpZiAod2luZG93LmRldmljZVBpeGVsUmF0aW8gPiAxKSB7XG4gICAgICAgIHNjYWxlQnkgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgJChfdGhpcy5jYW52YXMpLmNzcyh7XG4gICAgICAgICAgd2lkdGg6IF90aGlzLm9wdGlvbnMuc2l6ZSxcbiAgICAgICAgICBoZWlnaHQ6IF90aGlzLm9wdGlvbnMuc2l6ZVxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMuY2FudmFzLndpZHRoICo9IHNjYWxlQnk7XG4gICAgICAgIF90aGlzLmNhbnZhcy5oZWlnaHQgKj0gc2NhbGVCeTtcbiAgICAgICAgX3RoaXMuY3R4LnNjYWxlKHNjYWxlQnksIHNjYWxlQnkpO1xuICAgICAgfVxuICAgICAgX3RoaXMuY3R4LnRyYW5zbGF0ZShfdGhpcy5vcHRpb25zLnNpemUgLyAyLCBfdGhpcy5vcHRpb25zLnNpemUgLyAyKTtcbiAgICAgIF90aGlzLmN0eC5yb3RhdGUoX3RoaXMub3B0aW9ucy5yb3RhdGUgKiBNYXRoLlBJIC8gMTgwKTtcbiAgICAgIF90aGlzLiRlbC5hZGRDbGFzcygnZWFzeVBpZUNoYXJ0Jyk7XG4gICAgICBfdGhpcy4kZWwuY3NzKHtcbiAgICAgICAgd2lkdGg6IF90aGlzLm9wdGlvbnMuc2l6ZSxcbiAgICAgICAgaGVpZ2h0OiBfdGhpcy5vcHRpb25zLnNpemUsXG4gICAgICAgIGxpbmVIZWlnaHQ6IFwiXCIgKyBfdGhpcy5vcHRpb25zLnNpemUgKyBcInB4XCJcbiAgICAgIH0pO1xuICAgICAgX3RoaXMudXBkYXRlKHBlcmNlbnQpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH07XG4gICAgdGhpcy51cGRhdGUgPSBmdW5jdGlvbihwZXJjZW50KSB7XG4gICAgICBwZXJjZW50ID0gcGFyc2VGbG9hdChwZXJjZW50KSB8fCAwO1xuICAgICAgaWYgKF90aGlzLm9wdGlvbnMuYW5pbWF0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZHJhd0xpbmUocGVyY2VudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRlTGluZShfdGhpcy5wZXJjZW50YWdlLCBwZXJjZW50KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9O1xuICAgIHJlbmRlclNjYWxlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSwgX2ksIF9yZXN1bHRzO1xuICAgICAgX3RoaXMuY3R4LmZpbGxTdHlsZSA9IF90aGlzLm9wdGlvbnMuc2NhbGVDb2xvcjtcbiAgICAgIF90aGlzLmN0eC5saW5lV2lkdGggPSAxO1xuICAgICAgX3Jlc3VsdHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IF9pID0gMDsgX2kgPD0gMjQ7IGkgPSArK19pKSB7XG4gICAgICAgIF9yZXN1bHRzLnB1c2goYWRkU2NhbGVMaW5lKGkpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVzdWx0cztcbiAgICB9O1xuICAgIGFkZFNjYWxlTGluZSA9IGZ1bmN0aW9uKGkpIHtcbiAgICAgIHZhciBvZmZzZXQ7XG4gICAgICBvZmZzZXQgPSBpICUgNiA9PT0gMCA/IDAgOiBfdGhpcy5vcHRpb25zLnNpemUgKiAwLjAxNztcbiAgICAgIF90aGlzLmN0eC5zYXZlKCk7XG4gICAgICBfdGhpcy5jdHgucm90YXRlKGkgKiBNYXRoLlBJIC8gMTIpO1xuICAgICAgX3RoaXMuY3R4LmZpbGxSZWN0KF90aGlzLm9wdGlvbnMuc2l6ZSAvIDIgLSBvZmZzZXQsIDAsIC1fdGhpcy5vcHRpb25zLnNpemUgKiAwLjA1ICsgb2Zmc2V0LCAxKTtcbiAgICAgIF90aGlzLmN0eC5yZXN0b3JlKCk7XG4gICAgfTtcbiAgICByZW5kZXJUcmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG9mZnNldDtcbiAgICAgIG9mZnNldCA9IF90aGlzLm9wdGlvbnMuc2l6ZSAvIDIgLSBfdGhpcy5vcHRpb25zLmxpbmVXaWR0aCAvIDI7XG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5zY2FsZUNvbG9yICE9PSBmYWxzZSkge1xuICAgICAgICBvZmZzZXQgLT0gX3RoaXMub3B0aW9ucy5zaXplICogMC4wODtcbiAgICAgIH1cbiAgICAgIF90aGlzLmN0eC5iZWdpblBhdGgoKTtcbiAgICAgIF90aGlzLmN0eC5hcmMoMCwgMCwgb2Zmc2V0LCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgICBfdGhpcy5jdHguY2xvc2VQYXRoKCk7XG4gICAgICBfdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBfdGhpcy5vcHRpb25zLnRyYWNrQ29sb3I7XG4gICAgICBfdGhpcy5jdHgubGluZVdpZHRoID0gX3RoaXMub3B0aW9ucy5saW5lV2lkdGg7XG4gICAgICBfdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgfTtcbiAgICByZW5kZXJCYWNrZ3JvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoX3RoaXMub3B0aW9ucy5zY2FsZUNvbG9yICE9PSBmYWxzZSkge1xuICAgICAgICByZW5kZXJTY2FsZSgpO1xuICAgICAgfVxuICAgICAgaWYgKF90aGlzLm9wdGlvbnMudHJhY2tDb2xvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgcmVuZGVyVHJhY2soKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGRyYXdMaW5lID0gZnVuY3Rpb24ocGVyY2VudCkge1xuICAgICAgdmFyIG9mZnNldDtcbiAgICAgIHJlbmRlckJhY2tncm91bmQoKTtcbiAgICAgIF90aGlzLmN0eC5zdHJva2VTdHlsZSA9ICQuaXNGdW5jdGlvbihfdGhpcy5vcHRpb25zLmJhckNvbG9yKSA/IF90aGlzLm9wdGlvbnMuYmFyQ29sb3IocGVyY2VudCkgOiBfdGhpcy5vcHRpb25zLmJhckNvbG9yO1xuICAgICAgX3RoaXMuY3R4LmxpbmVDYXAgPSBfdGhpcy5vcHRpb25zLmxpbmVDYXA7XG4gICAgICBfdGhpcy5jdHgubGluZVdpZHRoID0gX3RoaXMub3B0aW9ucy5saW5lV2lkdGg7XG4gICAgICBvZmZzZXQgPSBfdGhpcy5vcHRpb25zLnNpemUgLyAyIC0gX3RoaXMub3B0aW9ucy5saW5lV2lkdGggLyAyO1xuICAgICAgaWYgKF90aGlzLm9wdGlvbnMuc2NhbGVDb2xvciAhPT0gZmFsc2UpIHtcbiAgICAgICAgb2Zmc2V0IC09IF90aGlzLm9wdGlvbnMuc2l6ZSAqIDAuMDg7XG4gICAgICB9XG4gICAgICBfdGhpcy5jdHguc2F2ZSgpO1xuICAgICAgX3RoaXMuY3R4LnJvdGF0ZSgtTWF0aC5QSSAvIDIpO1xuICAgICAgX3RoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgX3RoaXMuY3R4LmFyYygwLCAwLCBvZmZzZXQsIDAsIE1hdGguUEkgKiAyICogcGVyY2VudCAvIDEwMCwgZmFsc2UpO1xuICAgICAgX3RoaXMuY3R4LnN0cm9rZSgpO1xuICAgICAgX3RoaXMuY3R4LnJlc3RvcmUoKTtcbiAgICB9O1xuICAgIHJBRiA9IChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIDEwMDAgLyA2MCk7XG4gICAgICB9O1xuICAgIH0pKCk7XG4gICAgYW5pbWF0ZUxpbmUgPSBmdW5jdGlvbihmcm9tLCB0bykge1xuICAgICAgdmFyIGFuaW0sIHN0YXJ0VGltZTtcbiAgICAgIF90aGlzLm9wdGlvbnMub25TdGFydC5jYWxsKF90aGlzKTtcbiAgICAgIF90aGlzLnBlcmNlbnRhZ2UgPSB0bztcbiAgICAgIERhdGUubm93IHx8IChEYXRlLm5vdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gKyhuZXcgRGF0ZSk7XG4gICAgICB9KTtcbiAgICAgIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG4gICAgICBhbmltID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjdXJyZW50VmFsdWUsIHByb2Nlc3M7XG4gICAgICAgIHByb2Nlc3MgPSBEYXRlLm5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgICBpZiAocHJvY2VzcyA8IF90aGlzLm9wdGlvbnMuYW5pbWF0ZSkge1xuICAgICAgICAgIHJBRihhbmltKTtcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5jdHguY2xlYXJSZWN0KC1fdGhpcy5vcHRpb25zLnNpemUgLyAyLCAtX3RoaXMub3B0aW9ucy5zaXplIC8gMiwgX3RoaXMub3B0aW9ucy5zaXplLCBfdGhpcy5vcHRpb25zLnNpemUpO1xuICAgICAgICByZW5kZXJCYWNrZ3JvdW5kLmNhbGwoX3RoaXMpO1xuICAgICAgICBjdXJyZW50VmFsdWUgPSBbZWFzZUluT3V0UXVhZChwcm9jZXNzLCBmcm9tLCB0byAtIGZyb20sIF90aGlzLm9wdGlvbnMuYW5pbWF0ZSldO1xuICAgICAgICBfdGhpcy5vcHRpb25zLm9uU3RlcC5jYWxsKF90aGlzLCBjdXJyZW50VmFsdWUpO1xuICAgICAgICBkcmF3TGluZS5jYWxsKF90aGlzLCBjdXJyZW50VmFsdWUpO1xuICAgICAgICBpZiAocHJvY2VzcyA+PSBfdGhpcy5vcHRpb25zLmFuaW1hdGUpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMub3B0aW9ucy5vblN0b3AuY2FsbChfdGhpcywgY3VycmVudFZhbHVlLCB0byk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByQUYoYW5pbSk7XG4gICAgfTtcbiAgICBlYXNlSW5PdXRRdWFkID0gZnVuY3Rpb24odCwgYiwgYywgZCkge1xuICAgICAgdmFyIGVhc2VJbiwgZWFzaW5nO1xuICAgICAgZWFzZUluID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3codCwgMik7XG4gICAgICB9O1xuICAgICAgZWFzaW5nID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodCA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZWFzZUluKHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiAyIC0gZWFzZUluKCh0IC8gMikgKiAtMiArIDIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdCAvPSBkIC8gMjtcbiAgICAgIHJldHVybiBjIC8gMiAqIGVhc2luZyh0KSArIGI7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5pbml0KCk7XG4gIH07XG4gICQuZWFzeVBpZUNoYXJ0LmRlZmF1bHRPcHRpb25zID0ge1xuICAgIGJhckNvbG9yOiAnI2VmMWUyNScsXG4gICAgdHJhY2tDb2xvcjogJyNmMmYyZjInLFxuICAgIHNjYWxlQ29sb3I6ICcjZGZlMGUwJyxcbiAgICBsaW5lQ2FwOiAncm91bmQnLFxuICAgIHJvdGF0ZTogMCxcbiAgICBzaXplOiAxMTAsXG4gICAgbGluZVdpZHRoOiAzLFxuICAgIGFuaW1hdGU6IGZhbHNlLFxuICAgIG9uU3RhcnQ6ICQubm9vcCxcbiAgICBvblN0b3A6ICQubm9vcCxcbiAgICBvblN0ZXA6ICQubm9vcFxuICB9O1xuICAkLmZuLmVhc3lQaWVDaGFydCA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gJC5lYWNoKHRoaXMsIGZ1bmN0aW9uKGksIGVsKSB7XG4gICAgICB2YXIgJGVsLCBpbnN0YW5jZU9wdGlvbnM7XG4gICAgICAkZWwgPSAkKGVsKTtcbiAgICAgIGlmICghJGVsLmRhdGEoJ2Vhc3lQaWVDaGFydCcpKSB7XG4gICAgICAgIGluc3RhbmNlT3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBvcHRpb25zLCAkZWwuZGF0YSgpKTtcbiAgICAgICAgcmV0dXJuICRlbC5kYXRhKCdlYXN5UGllQ2hhcnQnLCBuZXcgJC5lYXN5UGllQ2hhcnQoZWwsIGluc3RhbmNlT3B0aW9ucykpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gdm9pZCAwO1xufSkoalF1ZXJ5KTtcblxuXG4iLCJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gKGZ1bmN0aW9uICgpIHtcblxuXG4gICAgLy8g5YWs55So6KGo5Y2V6aqM6K+B57uE5Lu2XG5cbiAgICB2YXIgRm9ybVZhbGlkYXRvciA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gICAgRm9ybVZhbGlkYXRvci5wcm90b3R5cGUgPSB7XG5cbiAgICAgICAgY2hlY2tMb2dpbk5hbWU6IGZ1bmN0aW9uIChsb2dpbk5hbWUsIG5leHQpIHtcbiAgICAgICAgICAgIHZhciByZWcgPVxuICAgICAgICAgICAgICAgIC9eKD8hKChbMV1bM3w1fDd8OF1bMC05XXs5fSl8KFtcXHctXSsoXFwuW1xcdy1dKykqQFtcXHctXSsoXFwuW1xcdy1dKykrKSkpKFswLTlhLXpBLVpfXFx1NEUwMC1cXHU5RkJGXSspLztcblxuICAgICAgICAgICAgaWYgKCFsb2dpbk5hbWUgfHwgIWxvZ2luTmFtZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBuZXh0KGZhbHNlLCAnTE9HSU5OQU1FX05VTEwnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsb2dpbk5hbWUubGVuZ3RoIDwgMiB8fCBsb2dpbk5hbWUubGVuZ3RoID4gMzApIHtcbiAgICAgICAgICAgICAgICBuZXh0KGZhbHNlLCAnTE9HSU5OQU1FX1NJWkUnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghISgnJyArIGxvZ2luTmFtZSkubWF0Y2goL1tcXHctXSsoXFwuW1xcdy1dKykqQFtcXHctXSsoXFwuW1xcdy1dKykrLykpIHtcbiAgICAgICAgICAgICAgICBuZXh0KGZhbHNlLCAnTE9HSU5OQU1FX05PVF9FTUFJTCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEhKCcnICsgbG9naW5OYW1lKS5tYXRjaCgvXlsxXVszfDV8N3w4XVswLTldezl9JC8pKSB7XG4gICAgICAgICAgICAgICAgbmV4dChmYWxzZSwgJ0xPR0lOTkFNRV9OT1RfTU9CSUxFJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXh0KHRydWUsIG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrUmVnaXN0ZXJOYW1lOiBmdW5jdGlvbiAocmVnaXN0ZXJOYW1lLCBuZXh0KSB7XG4gICAgICAgICAgICB2YXIgcmVnID1cbiAgICAgICAgICAgICAgICAvXig/ISgoWzFdWzN8NXw3fDhdWzAtOV17OX0pfChbXFx3LV0rKFxcLltcXHctXSspKkBbXFx3LV0rKFxcLltcXHctXSspKykpKShbMC05YS16QS1aX1xcdTRFMDAtXFx1OUZCRl0rKS87XG5cbiAgICAgICAgICAgIGlmICghcmVnaXN0ZXJOYW1lIHx8ICFyZWdpc3Rlck5hbWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbmV4dChmYWxzZSwgJ0xPR0lOTkFNRV9OVUxMJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoISgnJyArIHJlZ2lzdGVyTmFtZSlcbiAgICAgICAgICAgICAgICAubWF0Y2gocmVnKSkge1xuICAgICAgICAgICAgICAgIG5leHQoZmFsc2UsICdMT0dJTk5BTUVfSU5WQUxJRCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlZ2lzdGVyTmFtZS5pbmRleE9mKCctJykgPj0gMCkge1xuICAgICAgICAgICAgICAgIG5leHQoZmFsc2UsICdMT0dJTk5BTUVfSU5WQUxJRCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlZ2lzdGVyTmFtZS5sZW5ndGggPCAyIHx8IHJlZ2lzdGVyTmFtZS5sZW5ndGggPlxuICAgICAgICAgICAgICAgIDMwKSB7XG4gICAgICAgICAgICAgICAgbmV4dChmYWxzZSwgJ0xPR0lOTkFNRV9TSVpFJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXh0KHRydWUsIG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNoZWNrUGFzc3dvcmQ6IGZ1bmN0aW9uIChwYXNzd29yZCwgbmV4dCkge1xuXG4gICAgICAgICAgICBpZiAoIXBhc3N3b3JkIHx8ICFwYXNzd29yZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBuZXh0KGZhbHNlLCAnUEFTU1dPUkRfTlVMTCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IDYpIHtcbiAgICAgICAgICAgICAgICBuZXh0KGZhbHNlLCAnUEFTU1dPUkRfTEVOR1RIJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXh0KHRydWUsIG51bGwpO1xuICAgICAgICB9LFxuICAgICAgICBjaGVja1JlUGFzc3dvcmQ6IGZ1bmN0aW9uIChwYXNzd29yZCwgcmVwYXNzd29yZCwgbmV4dCkge1xuXG4gICAgICAgICAgICBpZiAoIXJlcGFzc3dvcmQgfHwgIXJlcGFzc3dvcmQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbmV4dChmYWxzZSwgJ1JFUEFTU1dST0RfTlVMTCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlcGFzc3dvcmQgIT09IHBhc3N3b3JkKSB7XG4gICAgICAgICAgICAgICAgbmV4dChmYWxzZSwgJ1JFUEFTU1dPUkRfSU5WQUxJRCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbmV4dCh0cnVlLCBudWxsKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjaGVja0VtYWlsOiBmdW5jdGlvbiAoZW1haWwsIG5leHQpIHtcbiAgICAgICAgICAgIGlmICghZW1haWwgfHwgIWVtYWlsLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG5leHQoZmFsc2UsICdFTUFJTF9OVUxMJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEoJycgKyBlbWFpbCkubWF0Y2goL1tcXHctXSsoXFwuW1xcdy1dKykqQFtcXHctXSsoXFwuW1xcdy1dKykrLykpIHtcbiAgICAgICAgICAgICAgICBuZXh0KGZhbHNlLCAnRU1BSUxfSU5WQUxJRCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQodHJ1ZSwgbnVsbCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNoZWNrTW9iaWxlOiBmdW5jdGlvbiAobW9iaWxlLCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoIW1vYmlsZSB8fCAhbW9iaWxlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG5leHQoZmFsc2UsICdNT0JJTEVfTlVMTCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKCcnICsgbW9iaWxlKVxuICAgICAgICAgICAgICAgIC5tYXRjaCgvXlsxXVszfDV8N3w4XVswLTldezl9JC8pKSB7XG4gICAgICAgICAgICAgICAgbmV4dChmYWxzZSwgJ01PQklMRV9JTlZBTElEJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dCh0cnVlLCBudWxsKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hlY2tJZE51bWJlcjogZnVuY3Rpb24gKGlkTnVtYmVyLCBuZXh0KSB7XG4gICAgICAgICAgICBpZE51bWJlciA9ICgnJyArIGlkTnVtYmVyKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG4gICAgICAgICAgICB2YXIgcGNvZGUgPSBbXTsgLy/lj6rmnInov5nkupvmlbDlrZflvIDlpLTnmoTku6PnoIHmiY3mmK/lkIjms5XnmoRcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIxMVwiKTsgLy/ljJfkuqxcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIxMlwiKTsgLy/lpKnmtKVcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIxM1wiKTsgLy/msrPljJdcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIxNFwiKTsgLy/lsbHopb9cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIxNVwiKTsgLy/lhoXokpnlj6RcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIyMVwiKTsgLy/ovr3lroFcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIyMlwiKTsgLy/lkInmnpdcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIyM1wiKTsgLy/pu5HpvpnmsZ9cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIzMVwiKTsgLy/kuIrmtbdcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIzMlwiKTsgLy/msZ/oi49cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIzM1wiKTsgLy/mtZnmsZ9cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIzNFwiKTsgLy/lronlvr1cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIzNVwiKTsgLy/npo/lu7pcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIzNlwiKTsgLy/msZ/opb9cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCIzN1wiKTsgLy/lsbHkuJxcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI0MVwiKTsgLy/msrPljZdcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI0MlwiKTsgLy/muZbljJdcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI0M1wiKTsgLy/muZbljZdcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI0NFwiKTsgLy/lub/kuJxcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI0NVwiKTsgLy/lub/opb9cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI0NlwiKTsgLy/mtbfljZdcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI1MFwiKTsgLy/ph43luoZcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI1MVwiKTsgLy/lm5vlt51cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI1MlwiKTsgLy/otLXlt55cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI1M1wiKTsgLy/kupHljZdcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI1NFwiKTsgLy/opb/ol49cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI2MVwiKTsgLy/pmZXopb9cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI2MlwiKTsgLy/nlJjogoNcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI2M1wiKTsgLy/pnZLmtbdcbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI2NFwiKTsgLy/lroHlpI9cbiAgICAgICAgICAgIHBjb2RlLnB1c2goXCI2NVwiKTsgLy/mlrDnloZcbiAgICAgICAgICAgIGlmICghfnBjb2RlLmluZGV4T2YoaWROdW1iZXIuc3Vic3RyaW5nKDAsIDIpKSkge1xuICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQoZmFsc2UsICdJRE5VTUJFUl9JTlZBTElEJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAnSUROVU1CRVJfSU5WQUxJRCdcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBmYWN0b3IgPSBbNywgOSwgMTAsIDUsIDgsIDQsIDIsIDEsIDYsIDMsIDcsIDksXG4gICAgICAgICAgICAgICAgMTAsIDUsIDgsIDQsXG4gICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIHZhciB2YWxpZEVuZGluZyA9IFtcIjFcIiwgXCIwXCIsIFwiWFwiLCBcIjlcIiwgXCI4XCIsIFwiN1wiLFxuICAgICAgICAgICAgICAgIFwiNlwiLCBcIjVcIiwgXCI0XCIsXG4gICAgICAgICAgICAgICAgXCIzXCIsIFwiMlwiXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoaWROdW1iZXJbMTddICE9IHZhbGlkRW5kaW5nW18ucmVkdWNlKGZhY3RvcixcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAociwgbiwgaSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gciArIG4gKiB+fmlkTnVtYmVyW2ldO1xuICAgICAgICAgICAgICAgIH0sIDApICUgMTFdKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dChmYWxzZSwgJ0lETlVNQkVSX0lOVkFMSUQnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6ICdJRE5VTUJFUl9JTlZBTElEJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgbmV4dCh0cnVlLCBudWxsKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IG51bGxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjaGVja05hbWU6IGZ1bmN0aW9uIChuYW1lLCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoIW5hbWUgfHwgIW5hbWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbmV4dChmYWxzZSwgJ05BTUVfTlVMTCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghKCcnICsgbmFtZSlcbiAgICAgICAgICAgICAgICAubWF0Y2goL1tcXHU0RTAwLVxcdTlGQkZdezIsMTV9LykpIHtcbiAgICAgICAgICAgICAgICBuZXh0KGZhbHNlLCAnTkFNRV9JTlZBTElEJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dCh0cnVlLCBudWxsKTtcbiAgICAgICAgfSxcbiAgICAgICAgY2hlY2tTbXNDYXB0Y2hhOiBmdW5jdGlvbiAoc21zLCBuZXh0KSB7XG4gICAgICAgICAgICBpZiAoIXNtcyB8fCAhc21zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG5leHQoZmFsc2UsICdTTVNDQVBUQ0hBX05VTEwnKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzbXMubGVuZ3RoICE9PSA2KSB7XG4gICAgICAgICAgICAgICAgbmV4dChmYWxzZSwgJ1NNU0NBUFRDSEFfSU5WQUxJRCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQodHJ1ZSwgbnVsbCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIEVycm9yTXNnID0ge1xuICAgICAgICBQQVNTV09SRF9OVUxMOiAn6K+35aGr5YaZ5a+G56CBLOS4jeiDveS4uuepuuWtl+espicsXG4gICAgICAgIFBBU1NXT1JEX0xFTkdUSDogJ+WvhueggeeUsTYtMjDkvY3mlbDlrZflkozlrZfmr43nu4TmiJDvvIzljLrliIblpKflsI/lhpnvvIzkuI3og73ljIXlkKvnqbrlrZfnrKYnLFxuICAgICAgICBQQVNTV09SRF9BR0FJTl9OVUxMOiAn6K+35aGr5YaZ5a+G56CB56Gu6K6kJyxcbiAgICAgICAgUEFTU1dPUkRfQUdBSU5fSU5WQUxJRDogJ+S4pOasoei+k+WFpeeahOWvhueggeS4jeS4gOiHtCcsXG4gICAgICAgIFJFUEFTU1dPUkRfTlVMTDogJ+ivt+Whq+WGmeWvhueggeehruiupCcsXG4gICAgICAgIFJFUEFTU1dPUkRfSU5WQUxJRDogJ+S4pOasoei+k+WFpeeahOWvhueggeS4jeS4gOiHtCcsXG4gICAgICAgIE1PQklMRV9VU0VEOiAn5omL5py65Y+356CB5bey6KKr5L2/55SoJyxcbiAgICAgICAgTU9CSUxFX0NBUFRDSEFfTlVMTDogJ+ivt+Whq+WGmeaJi+acuuefreS/oemqjOivgeeggScsXG4gICAgICAgIE1PQklMRV9DQVBUQ0hBX0lOVkFMSUQ6ICfpqozor4HnoIHml6DmlYjmiJblt7Lov4fmnJ/vvIzor7flsJ3or5Xph43mlrDlj5HpgIEnLFxuICAgICAgICBNT0JJTEVfQ0FQVENIQV9FWFBJUkVEOiAn6aqM6K+B56CB6L+H5pyf77yM6K+35bCd6K+V6YeN5paw5Y+R6YCBJyxcbiAgICAgICAgQUdSRUVNRU5UX05VTEw6ICfms6jlhozpnIDlhYjlkIzmhI/mnI3liqHmnaHmrL4nLFxuICAgICAgICBDQVBUQ0hBX05VTEw6ICfor7floavlhpnpqozor4HnoIEnLFxuICAgICAgICBDQVBUQ0hBX0lOVkFMSUQ6ICfpqozor4HnoIHkuI3mraPnoa4nLFxuICAgICAgICBNT0JJTEVfTlVMTDogJ+ivt+Whq+WGmeaJi+acuuWPt+eggScsXG4gICAgICAgIE1PQklMRV9JTlZBTElEOiAn6K+36L6T5YWl5q2j56Gu55qE5omL5py65Y+3JyxcbiAgICAgICAgTE9HSU5OQU1FX0VYSVNUUzogJ+eUqOaIt+WQjeW3suWtmOWcqCcsXG4gICAgICAgIExPR0lOTkFNRV9TVFJJQ1Q6ICcy6IezMTXkvY3kuK3oi7HmloflrZfnrKbjgIHmlbDlrZfmiJbkuIvliJLnur8nLFxuICAgICAgICBMT0dJTk5BTUVfTlVMTDogJ+ivt+Whq+WGmeeUqOaIt+WQjScsXG4gICAgICAgIExPR0lOTkFNRV9JTlZBTElEOiAnMuiHszE15L2N5Lit6Iux5paH5a2X56ym44CB5pWw5a2X5oiW5LiL5YiS57q/JyxcbiAgICAgICAgTE9HSU5OQU1FX1NJWkU6ICcy6IezMTXkvY3kuK3oi7HmloflrZfnrKbjgIHmlbDlrZfmiJbkuIvliJLnur8nLFxuICAgICAgICBMT0dJTk5BTUVfTk9UX01PQklMRTogJ+eUqOaIt+WQjeS4jeiDveaYr+aJi+acuuWPt++8iOazqOWGjOWQjuWPr+S7peeUqOaJi+acuuWPt+eZu+W9le+8iScsXG4gICAgICAgIExPR0lOTkFNRV9OT1RfRU1BSUw6ICfnlKjmiLflkI3kuI3og73mmK/pgq7nrrEnLFxuICAgICAgICBOQU1FX05VTEw6ICfor7floavlhpnnnJ/lrp7lp5PlkI0nLFxuICAgICAgICBOQU1FX0lOVkFMSUQ6ICfnnJ/lrp7lp5PlkI3plJnor6/vvIzlupTkuLoyLTE15L2N5Lit5paH5rGJ5a2XJyxcbiAgICAgICAgRU1BSUxfTlVMTDogJ+ivt+Whq+WGmeeUteWtkOmCrueusScsXG4gICAgICAgIEVNQUlMX0lOVkFMSUQ6ICfor7fovpPlhaXmraPnoa7nmoTpgq7nrrEnLFxuICAgICAgICBJRE5VTUJFUl9JTlZBTElEOiAn6K+35q2j56Gu5aGr5YaZIDE4IOS9jei6q+S7veivgeWPt+eggScsXG4gICAgICAgIExPR0lOX0lOVkFMSUQ6ICfmiYvmnLrlj7fmiJblr4bnoIHplJnor68nLFxuICAgICAgICBJTlZBTElEX0NBUFRDSEE6ICfpqozor4HnoIHplJnor68nLFxuICAgICAgICBMT0dJTk5BTUVfTk9UX01BVENIOiAn5omL5py65Y+356CB5LiO55m75b2V5ZCN5LiN5Yy56YWNJyxcbiAgICAgICAgSU5WSVRBVElPTl9JTlZBTElEOiAnSOeggeaXoOaViCcsXG4gICAgICAgIElOVklUQVRJT05fTlVMTDogJ0jnoIHkuLrnqbonLFxuICAgICAgICBQQVlNRU5UX0FDQ09VTlRfQ1JFQVRFX0VSUk9SOiAn5Zu95pS/6YCa5a6e5ZCN6K6k6K+B5qCh6aqM5pyq6YCa6L+HJyxcbiAgICAgICAgU01TQ0FQVENIQV9JTlZBTElEOiAn6aqM6K+B56CB5Li6NuS9jScsXG4gICAgICAgIFNNU0NBUFRDSEFfTlVMTDogJ+mqjOivgeeggeS4jeiDveS4uuepuicsXG4gICAgICAgIElETlVNQkVSX05VTEw6ICfouqvku73or4Hlj7fkuI3og73kuLrnqbonXG4gICAgfTtcblxuICAgIHZhciBDb3VudERvd24gPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgIENvdW50RG93bi5wcm90b3R5cGUgPSB7XG4gICAgICAgIGdldENvdW50RG93blRpbWU6IGZ1bmN0aW9uICh0aW1lLCBzZXJ2ZXJEYXRlLCBuZXh0KSB7XG4gICAgICAgICAgICB0aW1lID0gcGFyc2VJbnQodGltZSwgMTApO1xuICAgICAgICAgICAgaWYgKCF0aW1lIHx8IHRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjaGVja1RpbWUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIGlmIChpIDwgMTApIHtcbiAgICAgICAgICAgICAgICAgICAgaSA9IFwiMFwiICsgaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGxlZnRUaW1lID0gKG5ldyBEYXRlKHRpbWUpKSAtIChuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICBzZXJ2ZXJEYXRlKSk7XG4gICAgICAgICAgICBpZiAobGVmdFRpbWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRkID0gTWF0aC5mbG9vcihsZWZ0VGltZSAvIDEwMDAgLyA2MCAvIDYwIC8gMjQpO1xuICAgICAgICAgICAgbGVmdFRpbWUgLT0gZGQgKiAxMDAwICogNjAgKiA2MCAqIDI0O1xuICAgICAgICAgICAgdmFyIGhoID0gTWF0aC5mbG9vcihsZWZ0VGltZSAvIDEwMDAgLyA2MCAvIDYwKTtcbiAgICAgICAgICAgIGxlZnRUaW1lIC09IGhoICogMTAwMCAqIDYwICogNjA7XG4gICAgICAgICAgICB2YXIgbW0gPSBNYXRoLmZsb29yKGxlZnRUaW1lIC8gMTAwMCAvIDYwKTtcbiAgICAgICAgICAgIGxlZnRUaW1lIC09IG1tICogMTAwMCAqIDYwO1xuICAgICAgICAgICAgdmFyIHNzID0gTWF0aC5mbG9vcihsZWZ0VGltZSAvIDEwMDApO1xuXG4gICAgICAgICAgICAvLyDlgJLorqHml7blrozmiJDlkI7liLfmlrDpobXpnaJcbiAgICAgICAgICAgIGlmIChoaCA9PT0gMCAmJiBtbSA9PT0gMCAmJiBzcyA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgIH0pLCAyMDAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxlZnRUaW1lIC09IHNzICogMTAwMDtcbiAgICAgICAgICAgIGRkID0gY2hlY2tUaW1lKGRkKTtcbiAgICAgICAgICAgIGhoID0gY2hlY2tUaW1lKGhoKTtcbiAgICAgICAgICAgIG1tID0gY2hlY2tUaW1lKG1tKTtcbiAgICAgICAgICAgIHNzID0gY2hlY2tUaW1lKHNzKTtcbiAgICAgICAgICAgIHZhciBvID0ge1xuICAgICAgICAgICAgICAgIGRheTogZGQsXG4gICAgICAgICAgICAgICAgaG91cjogcGFyc2VJbnQoaGgsIDEwKSArIChkZCA+IDAgPyBkZCAqIDI0IDpcbiAgICAgICAgICAgICAgICAgICAgMCksXG4gICAgICAgICAgICAgICAgbWluOiBtbSxcbiAgICAgICAgICAgICAgICBzZWM6IHNzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICBuZXh0KG8pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0Q291bnREb3duVGltZTI6IGZ1bmN0aW9uICh0aW1lLCBzZXJ2ZXJEYXRlLCBuZXh0KSB7XG4gICAgICAgICAgICB0aW1lID0gcGFyc2VJbnQodGltZSwgMTApO1xuICAgICAgICAgICAgaWYgKCF0aW1lIHx8IHRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjaGVja1RpbWUgPSBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIGlmIChpIDwgMTApIHtcbiAgICAgICAgICAgICAgICAgICAgaSA9IFwiMFwiICsgaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIGxlZnRUaW1lID0gKG5ldyBEYXRlKHRpbWUpKSAtIChuZXcgRGF0ZShcbiAgICAgICAgICAgICAgICBzZXJ2ZXJEYXRlKSk7XG4gICAgICAgICAgICBpZiAobGVmdFRpbWUgPCAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRkID0gTWF0aC5mbG9vcihsZWZ0VGltZSAvIDEwMDAgLyA2MCAvIDYwIC8gMjQpO1xuICAgICAgICAgICAgbGVmdFRpbWUgLT0gZGQgKiAxMDAwICogNjAgKiA2MCAqIDI0O1xuICAgICAgICAgICAgdmFyIGhoID0gTWF0aC5mbG9vcihsZWZ0VGltZSAvIDEwMDAgLyA2MCAvIDYwKTtcbiAgICAgICAgICAgIGxlZnRUaW1lIC09IGhoICogMTAwMCAqIDYwICogNjA7XG4gICAgICAgICAgICB2YXIgbW0gPSBNYXRoLmZsb29yKGxlZnRUaW1lIC8gMTAwMCAvIDYwKTtcbiAgICAgICAgICAgIGxlZnRUaW1lIC09IG1tICogMTAwMCAqIDYwO1xuICAgICAgICAgICAgdmFyIHNzID0gTWF0aC5mbG9vcihsZWZ0VGltZSAvIDEwMDApO1xuICAgICAgICAgICAgbGVmdFRpbWUgLT0gc3MgKiAxMDAwO1xuICAgICAgICAgICAgLy9kZCA9IGNoZWNrVGltZShkZCk7XG4gICAgICAgICAgICBoaCA9IGNoZWNrVGltZShoaCk7XG4gICAgICAgICAgICBtbSA9IGNoZWNrVGltZShtbSk7XG4gICAgICAgICAgICBzcyA9IGNoZWNrVGltZShzcyk7XG4gICAgICAgICAgICB2YXIgbyA9IHtcbiAgICAgICAgICAgICAgICBkYXk6IGRkLFxuICAgICAgICAgICAgICAgIGhvdXI6IGhoLFxuICAgICAgICAgICAgICAgIG1pbjogbW0sXG4gICAgICAgICAgICAgICAgc2VjOiBzc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgbmV4dChvKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8g5qC85byP5YyWZHVyYXRpb25cbiAgICB2YXIgZm9ybWF0ZUR1cmF0aW9uID0gZnVuY3Rpb24gKGR1cikge1xuICAgICAgICB2YXIgX21vbnRoID0gMDtcbiAgICAgICAgaWYgKGR1ci5kYXlzID4gMCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkdXIudG90YWxEYXlzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgX21vbnRoID0gZHVyLmRheXMgKyBcIuWkqVwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfbW9udGggPSBkdXIudG90YWxEYXlzICsgXCLlpKlcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkdXIueWVhcnMgPiAwKSB7XG4gICAgICAgICAgICAgICAgX21vbnRoICs9IGR1ci55ZWFycyAqIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGR1ci5tb250aHMgPiAwKSB7XG4gICAgICAgICAgICAgICAgX21vbnRoICs9IGR1ci5tb250aHM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfbW9udGggPSBfbW9udGggKyBcIuS4quaciFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfbW9udGg7XG4gICAgfTtcblxuICAgIC8vIOagvOW8j+WMlumTtuihjOWNoeWPt1xuICAgIHZhciBiYW5rQWNjb3VudCA9IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgc3RyID0gc3RyLnRvU3RyaW5nKCk7XG4gICAgICAgIHN0ciA9IHN0ci50cmltKCk7XG4gICAgICAgIHZhciByZXN1bHQgPSAnJztcbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPT09IDE2KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBzdHIuc3Vic3RyaW5nKDAsIDQpICsgJyAnICsgJyoqKiogKioqKicgKyAnICcgK1xuICAgICAgICAgICAgICAgIHN0ci5zdWJzdHJpbmcoXG4gICAgICAgICAgICAgICAgICAgIDEyKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdHIubGVuZ3RoID09PSAxOSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gc3RyLnN1YnN0cmluZygwLCA2KSArICcgJyArICcqKioqKioqJyArICcgJyArXG4gICAgICAgICAgICAgICAgc3RyLnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgMTMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQmFuayBhY2NvdW50IG51bWJlciAnICsgc3RyICtcbiAgICAgICAgICAgICAgICAnIGlzIGludmFsaWQnKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHN0cjtcbiAgICAgICAgfVxuICAgICAgICAvL3JldHVybiByZXN1bHQucmVwbGFjZSgvXFxzL2csICcmbmJzcDsnKVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBmb3JtYXQgYW1vdW50XG4gICAgdmFyIGZvcm1hdEFtb3VudCA9IGZ1bmN0aW9uIChzLCBuKSB7XG4gICAgICAgIG4gPSBuID4gMCAmJiBuIDw9IDIwID8gbiA6IDA7XG4gICAgICAgIGlmIChzIDwgMCkge1xuICAgICAgICAgICAgdmFyIF9zID0gMDtcbiAgICAgICAgICAgIHJldHVybiBfcy50b0ZpeGVkKG4pO1xuICAgICAgICB9XG4gICAgICAgIHMgPSBwYXJzZUZsb2F0KChzICsgXCJcIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC9bXlxcZFxcLi1dL2csIFwiXCIpKVxuICAgICAgICAgICAgLnRvRml4ZWQobikgKyBcIlwiO1xuICAgICAgICB2YXIgbCA9IHMuc3BsaXQoXCIuXCIpWzBdLnNwbGl0KFwiXCIpXG4gICAgICAgICAgICAucmV2ZXJzZSgpO1xuICAgICAgICB2YXIgciA9IHMuc3BsaXQoXCIuXCIpWzFdO1xuICAgICAgICB2YXIgdCA9IFwiXCIsXG4gICAgICAgICAgICBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdCArPSBsW2ldICsgKChpICsgMSkgJSAzID09PSAwICYmIChpICsgMSkgIT09IGwubGVuZ3RoID9cbiAgICAgICAgICAgICAgICBcIixcIiA6XG4gICAgICAgICAgICAgICAgXCJcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgIHJldHVybiB0LnNwbGl0KFwiXCIpXG4gICAgICAgICAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAgICAgICAgIC5qb2luKFwiXCIpICsgXCIuXCIgKyByOyAvLyA5OS45OVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHQuc3BsaXQoXCJcIilcbiAgICAgICAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICAgICAgICAgLmpvaW4oXCJcIik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZm9ybWF0IHBlcmNlbnRcbiAgICB2YXIgZm9ybWF0UGVyY2VudCA9IGZ1bmN0aW9uIChwZXJjZW50LCBvZmZzZXQpIHtcbiAgICAgICAgcGVyY2VudCA9IHBlcmNlbnQudG9TdHJpbmcoKTtcbiAgICAgICAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkIHx8IG9mZnNldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgb2Zmc2V0ID0gMjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGVyY2VudC5pbmRleE9mKCcuJykgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gcGVyY2VudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGVyY2VudC5zdWJzdHJpbmcoMCwgcGVyY2VudC5pbmRleE9mKFwiLlwiKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBwZXJjZW50LnN1YnN0cmluZygwLCBwZXJjZW50LmluZGV4T2YoXCIuXCIpICtcbiAgICAgICAgICAgICAgICAgICAgKG9mZnNldCArXG4gICAgICAgICAgICAgICAgICAgICAgICAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gZm9ybWF0IHRpbWVFbGFwc2VkIFxuXG4gICAgdmFyIHRpbWVFbGFwc2VkID0gZnVuY3Rpb24gKHRpbWVFbGFwc2VkLCBpc29iaikge1xuICAgICAgICBpZiAodGltZUVsYXBzZWQgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHMgPSB+fiAodGltZUVsYXBzZWQgLyAxMDAwKSxcbiAgICAgICAgICAgIG0gPSAwLFxuICAgICAgICAgICAgaCA9IDAsXG4gICAgICAgICAgICBkID0gMDtcbiAgICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gICAgICAgIGlmIChzID4gNTkpIHtcbiAgICAgICAgICAgIG0gPSB+fiAocyAvIDYwKTtcbiAgICAgICAgICAgIHMgPSBzICUgNjA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG0gPiA1OSkge1xuICAgICAgICAgICAgaCA9IH5+IChtIC8gNjApO1xuICAgICAgICAgICAgbSA9IG0gJSA2MDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaCA+IDI0KSB7XG4gICAgICAgICAgICBkID0gfn4gKGggLyAyNCk7XG4gICAgICAgICAgICBoID0gaCAlIDI0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHMgPCAwKSB7XG4gICAgICAgICAgICBzID0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSAnJyArIHMgKyAn56eSJztcbiAgICAgICAgaWYgKG0pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9ICcnICsgbSArICfliIYnICsgcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChoKSB7XG4gICAgICAgICAgICByZXN1bHQgPSAnJyArIGggKyAn5bCP5pe2JyArIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZCkge1xuICAgICAgICAgICAgcmVzdWx0ID0gJycgKyBkICsgJ+WkqScgKyByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFpc29iaiA/IHJlc3VsdCA6IHtcbiAgICAgICAgICAgIGRheTogZCxcbiAgICAgICAgICAgIGhvdXI6IGgsXG4gICAgICAgICAgICBtaW46IG0sXG4gICAgICAgICAgICBzZWM6IHBhcnNlSW50KHMpXG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIHZhciBpZUNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmVyc2lvbiA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBuYXZpZ2F0b3IuYXBwVmVyc2lvbiAmJlxuICAgICAgICAgICAgbmF2aWdhdG9yLmFwcFZlcnNpb24ubWF0Y2goL01TSUUgKFtcXGQuXSspLyk7XG5cbiAgICAgICAgcmV0dXJuIHZlcnNpb24gPyBOdW1iZXIodmVyc2lvblsxXSkgfHwgMCA6IDA7XG4gICAgfTtcbiAgICBcbiAgICB2YXIgbWF0Y2ggPSB7XG4gICAgICAgIG1vYmlsZTogZnVuY3Rpb24gKG1vYmlsZSkge1xuICAgICAgICAgICAgdmFyIHJlcSA9IC9eWzFdWzN8NXw3fDhdWzAtOV17OX0kLztcbiAgICAgICAgICAgIHJldHVybiAhIW1vYmlsZS50b1N0cmluZygpLm1hdGNoKHJlcSk7XG4gICAgICAgIH0sXG4gICAgICAgIGFtb3VudDogZnVuY3Rpb24gKGFtb3VudCkge1xuICAgICAgICAgICAgdmFyIGV4cCA9IC9eKFsxLTldW1xcZF17MCw3fXwwKShcXC5bXFxkXXsxLDJ9KT8kLztcbiAgICAgICAgICAgIHJldHVybiBleHAudGVzdChhbW91bnQpO1xuICAgICAgICB9LFxuICAgICAgICBlbWFpbDogZnVuY3Rpb24gKGVtYWlsKSB7XG4gICAgICAgICAgICB2YXIgZXhwID0gL15bXFx3LV0rKFxcLltcXHctXSspKkBbXFx3LV0rKFxcLltcXHctXSspKyQvO1xuICAgICAgICAgICAgcmV0dXJuIGV4cC50ZXN0KGVtYWlsKTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gNuWIsDIw5L2N5pWw5a2X5a2X5q+N5a+G56CBXG4gICAgICAgIHBhc3N3b3JkOiBmdW5jdGlvbiAocyl7XG4gICAgICAgICAgICByZXR1cm4gISFzLm1hdGNoKC9bMC05YS16QS1aXXs2LDIwfS8pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBcbiAgICBcbiAgICB2YXIgdG9vbCA9IHtcbiAgICAgICAganNvblRvUGFyYW1zOiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgc3RyID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXNba2V5XSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHBhcmFtc1trZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJyYnICsga2V5ICsgJz0nICsgcGFyYW1zW2tleV1baV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnJicgKyBrZXkgKyAnPScgKyBwYXJhbXNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH0sXG4gICAgICAgIHNldERhdGU6IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgICAgICAgIHZhciBfZGF0ZSwgeSwgbSwgZDtcbiAgICAgICAgICAgIF9kYXRlID0gZGF0ZS5zcGxpdChcIi1cIik7XG4gICAgICAgICAgICB5ID0gcGFyc2VJbnQoX2RhdGVbMF0pO1xuICAgICAgICAgICAgbSA9IHBhcnNlSW50KF9kYXRlWzFdKTtcbiAgICAgICAgICAgIGQgPSBwYXJzZUludChfZGF0ZVsyXSk7XG4gICAgICAgICAgICBpZiAobSA8IDEwKSB7XG4gICAgICAgICAgICAgICAgbSA9ICcwJyArIG07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZCA8IDEwKSB7XG4gICAgICAgICAgICAgICAgZCA9ICcwJyArIGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geSArICctJyArIG0gKyAnLScgKyBkO1xuICAgICAgICB9LFxuXG4gICAgICAgIGxvYWRTY3JpcHQ6IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBfc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIF9zY3JpcHQuc2V0QXR0cmlidXRlKCd0eXBlJywndGV4dC9qYXZhc2NyaXB0Jyk7XG4gICAgICAgICAgICBfc2NyaXB0LnNldEF0dHJpYnV0ZSgnc3JjJyx1cmwpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdLmFwcGVuZENoaWxkKF9zY3JpcHQpO1xuICAgICAgICAgICAgaWYgKF9zY3JpcHQucmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgICAgIC8vSUVcbiAgICAgICAgICAgICAgICBfc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9zY3JpcHQucmVhZHlTdGF0ZSA9PSBcImxvYWRlZFwiIHx8IF9zY3JpcHQucmVhZHlTdGF0ZSA9PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9zY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvL+mdnklFXG4gICAgICAgICAgICAgICAgX3NjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyDmmrTpnLLmjqXlj6NcbiAgICByZXR1cm4ge1xuICAgICAgICBmb3JtVmFsaWRhdG9yOiBuZXcgRm9ybVZhbGlkYXRvcigpLFxuICAgICAgICBlcnJvck1zZzogRXJyb3JNc2csXG4gICAgICAgIGNvdW50RG93bjogbmV3IENvdW50RG93bigpLFxuICAgICAgICBmb3JtYXQ6IHtcbiAgICAgICAgICAgIGFtb3VudDogZm9ybWF0QW1vdW50LFxuICAgICAgICAgICAgZHVyYXRpb246IGZvcm1hdGVEdXJhdGlvbixcbiAgICAgICAgICAgIHBlcmNlbnQ6IGZvcm1hdFBlcmNlbnQsXG4gICAgICAgICAgICB0aW1lRWxhcHNlZDogdGltZUVsYXBzZWRcbiAgICAgICAgfSxcbiAgICAgICAgYmFua0FjY291bnQ6IGJhbmtBY2NvdW50LFxuICAgICAgICBpMThuOiByZXF1aXJlKCdAZHMvaTE4bicpWyd6aC1jbiddLmVudW1zLFxuICAgICAgICBpZUNoZWNrOiBpZUNoZWNrLFxuICAgICAgICBtYXRjaDogbWF0Y2gsXG4gICAgICAgIHRvb2w6IHRvb2xcbiAgICB9O1xuXG59KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG5mdW5jdGlvbiBEaWFsb2coY29udGVudCwgb3B0aW9ucykge1xuICAgIERpYWxvZy5fX3ppbmRleCA9IDkwMDA7XG4gICAgRGlhbG9nLl9fY291bnQgPSAxO1xuICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgdGl0bGU6ICcnLFxuICAgICAgICBzaG93VGl0bGU6IHRydWUsXG4gICAgICAgIC8vIOaYr+WQpuaYvuekuuagh+mimOagj+OAglxuICAgICAgICB3aWR0aDogJzUwMHB4JyxcbiAgICAgICAgaGVpZ2h0OiAnMjAwcHgnLFxuICAgICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgICAvLyDmmK/lkKbnp7vliqggXG4gICAgICAgIG1vZGFsOiB0cnVlLFxuICAgICAgICAvLyDmmK/lkKbmmK/mqKHmgIHlr7nor53moYYgXG4gICAgICAgIGNlbnRlcjogdHJ1ZSxcbiAgICAgICAgLy8g5piv5ZCm5bGF5Lit44CCIFxuICAgICAgICBmaXhlZDogdHJ1ZSxcbiAgICAgICAgLy8g5piv5ZCm6Lef6ZqP6aG16Z2i5rua5Yqo44CCXG4gICAgICAgIHRpbWU6IDAsXG4gICAgICAgIC8vIOiHquWKqOWFs+mXreaXtumXtO+8jOS4ujDooajnpLrkuI3kvJroh6rliqjlhbPpl63jgIIgXG4gICAgICAgIHRvcDogbnVsbCxcbiAgICAgICAgY2xhOiAnJywgLy8gZGlhbG9nIHdyYXDnmoTmianlsZVjbGFzc1xuICAgICAgICBpZDogZmFsc2UgLy8g5a+56K+d5qGG55qEaWTvvIzoi6XkuLpmYWxzZe+8jOWImeeUseezu+e7n+iHquWKqOS6p+eUn+S4gOS4quWUr+S4gGlk44CCIFxuICAgIH07XG5cbiAgICBvcHRpb25zID0gJC5leHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIG9wdGlvbnMudGl0bGUgPSBvcHRpb25zLnRpdGxlIHx8ICcnO1xuICAgIG9wdGlvbnMudGltZSA9IG9wdGlvbnMudGltZSB8fCAwO1xuICAgIG9wdGlvbnMuaWQgPSBvcHRpb25zLmlkID8gb3B0aW9ucy5pZCA6ICdkaWFsb2ctJyArIERpYWxvZy5fX2NvdW50OyAvLyDllK/kuIBJRFxuICAgIHZhciBvdmVybGF5SWQgPSBvcHRpb25zLmlkICsgJy1vdmVybGF5JzsgLy8g6YGu572p5bGCSURcbiAgICB2YXIgdGltZUlkID0gbnVsbDsgLy8g6Ieq5Yqo5YWz6Zet6K6h5pe25ZmoIFxuICAgIHZhciBpc1Nob3cgPSBmYWxzZTtcblxuICAgIG9wdGlvbnMudG9wID0gY29udGVudC50b3AgfHwgJzIwJSc7XG4gICAgb3B0aW9ucy5jbGEgPSBjb250ZW50LmNsYSB8fCAnJztcblx0b3B0aW9ucy5vdmVybGF5ID0gY29udGVudC5vdmVybGF5IHx8IHRydWU7XG5cbiAgICAvL3ZhciBpc0llID0gJC5icm93c2VyLm1zaWU7XG4gICAgLy92YXIgaXNJZTYgPSAkLmJyb3dzZXIubXNpZSAmJiAoJzYuMCcgPT0gJC5icm93c2VyLnZlcnNpb24pO1xuXG4gICAgLy92YXIgaXNJZSA9IGRvY3VtZW50LmFsbCAmJiB3aW5kb3cuZXh0ZXJuYWw7XG4gICAgdmFyIGlzSWU2ID0gZmFsc2U7XG5cdHZhciBnZXRXcmFwID0gZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHdpZHRoOiAkKHdpbmRvdykud2lkdGgoKSArICQoZG9jdW1lbnQpLnNjcm9sbExlZnQoKSxcblx0XHRcdGhlaWdodDogJChkb2N1bWVudCkuaGVpZ2h0KClcblx0XHR9O1xuXHR9O1xuXHQvKlxuICAgIHZhciB3cmFwID0ge1xuICAgICAgICB3aWR0aDogJCh3aW5kb3cpLndpZHRoKCkgKyAkKGRvY3VtZW50KS5zY3JvbGxMZWZ0KCksXG4gICAgICAgIGhlaWdodDogJChkb2N1bWVudCkuaGVpZ2h0KClcbiAgICB9O1xuXHQqL1xuXHR2YXIgd3JhcCA9IGdldFdyYXAoKTtcblxuICAgIC8qIOWvueivneahhueahOW4g+WxgOWPiuagh+mimOWGheWuueOAgiovXG4gICAgb3B0aW9ucy50aXRsZSA9IGNvbnRlbnQudGl0bGUgfHwgXCJcIjtcbiAgICB2YXIgYmFySHRtbCA9ICFvcHRpb25zLnNob3dUaXRsZSA/ICcnIDpcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJiYXJcIj48c3BhbiBjbGFzcz1cInRpdGxlXCI+JyArICgob3B0aW9ucy50aXRsZSA9PT0gXCJcIiB8fFxuICAgICAgICAgICAgb3B0aW9ucy50aXRsZSA9PT0gZmFsc2UpID8gXCJcIiA6IG9wdGlvbnMudGl0bGUpICtcbiAgICAgICAgJzwvc3Bhbj48YSBjbGFzcz1cImNsb3NlXCI+PC9hPjwvZGl2Pic7XG4gICAgdmFyIHRoZURpYWxvZyA9ICQoJzxkaXYgaWQ9XCInICsgb3B0aW9ucy5pZCArICdcIiBjbGFzcz1cImRpYWxvZyBjY2MtYm94LXdyYXAgJyArIG9wdGlvbnMuY2xhICtcbiAgICAgICAgJ1wiPicgKyBiYXJIdG1sICsgJzxkaXYgY2xhc3M9XCJEY29udGVudFwiPjwvZGl2PjwvZGl2PicpXG4gICAgICAgIC5oaWRlKCk7XG4gICAgJCgnYm9keScpXG4gICAgICAgIC5hcHBlbmQodGhlRGlhbG9nKTtcblxuXG4gICAgLyoqXG4gICAgICog6YeN572u5a+56K+d5qGG55qE5L2N572u44CCXG4gICAgICpcbiAgICAgKiDkuLvopoHmmK/lnKjpnIDopoHlsYXkuK3nmoTml7blgJnvvIzmr4/mrKHliqDovb3lrozlhoXlrrnvvIzpg73opoHph43mlrDlrprkvY1cbiAgICAgKlxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIHRoaXMucmVzZXRQb3MgPSBmdW5jdGlvbiAoKSB7IC8qIOaYr+WQpumcgOimgeWxheS4reWumuS9je+8jOW/hemcgOWcqOW3sue7j+efpemBk+S6hmRpYWxvZ+WFg+e0oOWkp+Wwj+eahOaDheWGteS4i++8jOaJjeiDveato+ehruWxheS4re+8jOS5n+WwseaYr+imgeWFiOiuvue9rmRpYWxvZ+eahOWGheWuueOAgiAqL1xuICAgICAgICBpZiAob3B0aW9ucy5jZW50ZXIpIHtcbiAgICAgICAgICAgIHZhciB3aWR0aCA9ICQoXCIuRGNvbnRlbnRcIiwgdGhlRGlhbG9nKVxuICAgICAgICAgICAgICAgIC5vdXRlcldpZHRoKCk7XG5cbiAgICAgICAgICAgIHRoZURpYWxvZy5jc3MoXCJ3aWR0aFwiLCB3aWR0aCk7XG5cbiAgICAgICAgICAgIHZhciBsZWZ0ID0gKCQod2luZG93KVxuICAgICAgICAgICAgICAgIC53aWR0aCgpIC0gdGhlRGlhbG9nLndpZHRoKCkpIC8gMjtcbiAgICAgICAgICAgIHZhciB0b3AgPSAoJCh3aW5kb3cpXG4gICAgICAgICAgICAgICAgLmhlaWdodCgpIC0gdGhlRGlhbG9nLmhlaWdodCgpKSAvIDI7XG4gICAgICAgICAgICBpZiAodG9wIDwgMCkge1xuICAgICAgICAgICAgICAgIHRvcCA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghaXNJZTYgJiYgb3B0aW9ucy5maXhlZCkge1xuICAgICAgICAgICAgICAgIHRoZURpYWxvZy5jc3Moe1xuICAgICAgICAgICAgICAgICAgICB0b3A6IG9wdGlvbnMudG9wID8gb3B0aW9ucy50b3AgOiB0b3AsXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhlRGlhbG9nLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHRvcDogdG9wICsgJChkb2N1bWVudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zY3JvbGxUb3AoKSxcbiAgICAgICAgICAgICAgICAgICAgbGVmdDogbGVmdCArICQoZG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2Nyb2xsTGVmdCgpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICog5Yid5aeL5YyW5L2N572u5Y+K5LiA5Lqb5LqL5Lu25Ye95pWw44CCXG4gICAgICpcbiAgICAgKiDlhbbkuK3nmoR0aGlz6KGo56S6RGlhbG9n5a+56LGh6ICM5LiN5pivaW5pdOWHveaVsOOAglxuICAgICAqL1xuICAgIHZhciBpbml0ID0gZnVuY3Rpb24gKCkgeyAvKiDmmK/lkKbpnIDopoHliJ3lp4vljJbog4zmma/pga7nvanlsYIgKi9cblxuICAgICAgICBpZiAob3B0aW9ucy5tb2RhbCkge1xuICAgICAgICAgICAgJCgnYm9keScpXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgnPGRpdiBpZD1cIicgKyBvdmVybGF5SWQgK1xuICAgICAgICAgICAgICAgICAgICAnXCIgY2xhc3M9XCJkaWFsb2ctb3ZlcmxheSBjY2MtYm94LW92ZXJsYXlcIj48L2Rpdj4nKTtcbiAgICAgICAgICAgICQoJyMnICsgb3ZlcmxheUlkKVxuICAgICAgICAgICAgICAgIC5jc3MoJ3dpZHRoJywgd3JhcC53aWR0aClcbiAgICAgICAgICAgICAgICAuY3NzKCdoZWlnaHQnLCB3cmFwLmhlaWdodClcbiAgICAgICAgICAgICAgICAuY3NzKCd6LWluZGV4JywgKytEaWFsb2cuX196aW5kZXgpO1xuICAgICAgICAgICAgJCgnIycgKyBvdmVybGF5SWQpXG4gICAgICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgICdsZWZ0JzogMCxcbiAgICAgICAgICAgICAgICAgICAgJ3RvcCc6IDAsXG4gICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdhYnNvbHV0ZSdcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHRoZURpYWxvZy5jc3Moe1xuICAgICAgICAgICAgJ3otaW5kZXgnOiArK0RpYWxvZy5fX3ppbmRleCxcbiAgICAgICAgICAgICdwb3NpdGlvbic6IG9wdGlvbnMuZml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJ1xuICAgICAgICB9KTtcblxuICAgICAgICAvKiAgSUU2IOWFvOWuuWZpeGVk5Luj56CBICovXG4gICAgICAgIGlmIChpc0llNiAmJiBvcHRpb25zLmZpeGVkKSB7XG4gICAgICAgICAgICB0aGVEaWFsb2cuY3NzKCdwb3NpdGlvbicsICdhYnNvbHV0ZScpO1xuICAgICAgICAgICAgLy8gcmVzZXRQb3MoKTtcbiAgICAgICAgICAgICQod2luZG93KVxuICAgICAgICAgICAgICAgIC5zY3JvbGwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGlhID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9wOiAkKGRvY3VtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zY3JvbGxUb3AoKSArICQod2luZG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5oZWlnaHQoKSAvIDIgLSB0aGVEaWFsb2cuaGVpZ2h0KCkgLyAyICsgJ3B4JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6ICQoZG9jdW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNjcm9sbExlZnQoKSArICQod2luZG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC53aWR0aCgpIC8gMiAtIHRoZURpYWxvZy5vdXRlcldpZHRoKCkgLyAyICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHgnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHRoZURpYWxvZy5jc3Moe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcCc6IGRpYS50b3AsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbGVmdCc6IGRpYS5sZWZ0XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLyog5Lul5LiL5Luj56CB5aSE55CG5qGG5L2T5piv5ZCm5Y+v5Lul56e75YqoICovXG4gICAgICAgIHZhciBtb3VzZSA9IHtcbiAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICB5OiAwXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gbW92ZURpYWxvZyhldmVudCkge1xuICAgICAgICAgICAgdmFyIGUgPSB3aW5kb3cuZXZlbnQgfHwgZXZlbnQ7XG4gICAgICAgICAgICB2YXIgdG9wID0gcGFyc2VJbnQodGhlRGlhbG9nLmNzcygndG9wJykpICsgKGUuY2xpZW50WSAtIG1vdXNlLnkpO1xuICAgICAgICAgICAgdmFyIGxlZnQgPSBwYXJzZUludCh0aGVEaWFsb2cuY3NzKCdsZWZ0JykpICsgKGUuY2xpZW50WCAtIG1vdXNlLngpO1xuICAgICAgICAgICAgdGhlRGlhbG9nLmNzcyh7XG4gICAgICAgICAgICAgICAgdG9wOiB0b3AsXG4gICAgICAgICAgICAgICAgbGVmdDogbGVmdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtb3VzZS54ID0gZS5jbGllbnRYO1xuICAgICAgICAgICAgbW91c2UueSA9IGUuY2xpZW50WTtcbiAgICAgICAgfVxuICAgICAgICB0aGVEaWFsb2cuZmluZCgnLmJhcicpXG4gICAgICAgICAgICAubW91c2Vkb3duKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5kcmFnZ2FibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBlID0gd2luZG93LmV2ZW50IHx8IGV2ZW50O1xuICAgICAgICAgICAgICAgIG1vdXNlLnggPSBlLmNsaWVudFg7XG4gICAgICAgICAgICAgICAgbW91c2UueSA9IGUuY2xpZW50WTtcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KVxuICAgICAgICAgICAgICAgICAgICAuYmluZCgnbW91c2Vtb3ZlJywgbW92ZURpYWxvZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgJChkb2N1bWVudClcbiAgICAgICAgICAgIC5tb3VzZXVwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KVxuICAgICAgICAgICAgICAgICAgICAudW5iaW5kKCdtb3VzZW1vdmUnLCBtb3ZlRGlhbG9nKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8qIOe7keWumuS4gOS6m+ebuOWFs+S6i+S7tuOAgiAqL1xuICAgICAgICB0aGVEaWFsb2cuZmluZCgnLmNsb3NlJylcbiAgICAgICAgICAgIC5iaW5kKCdjbGljaycsIHRoaXMuY2xvc2UpO1xuICAgICAgICB0aGVEaWFsb2cuYmluZCgnbW91c2Vkb3duJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhlRGlhbG9nLmNzcygnei1pbmRleCcsICsrRGlhbG9nLl9femluZGV4KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8g6Ieq5Yqo5YWz6ZetIFxuICAgICAgICBpZiAoMCAhPT0gb3B0aW9ucy50aW1lKSB7XG4gICAgICAgICAgICB0aW1lSWQgPSBzZXRUaW1lb3V0KHRoaXMuY2xvc2UsIG9wdGlvbnMudGltZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvKipcbiAgICAgKiDorr7nva7lr7nor53moYbnmoTlhoXlrrnjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHJpbmcgYyDlj6/ku6XmmK9IVE1M5paH5pys44CCXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgdGhpcy5zZXRDb250ZW50ID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgaWYgKGMudGltZSkge1xuICAgICAgICAgICAgb3B0aW9ucy50aW1lID0gYy50aW1lO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkaXYgPSB0aGVEaWFsb2cuZmluZCgnLkRjb250ZW50Jyk7XG4gICAgICAgIHZhciB3aWR0aCA9IGMud2lkdGggPyBjLndpZHRoIDogZGVmYXVsdHMud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQgPSBjLmhlaWdodCA/IGMuaGVpZ2h0IDogZGVmYXVsdHMuaGVpZ2h0O1xuXG4gICAgICAgIGlmIChjLmFsZXJ0KSB7XG4gICAgICAgICAgICBjLnZhbHVlID0gJzxkaXYgY2xhc3M9XCJib3gtYWxlcnQtd3JhcFwiIHN0eWxlPVwicGFkZGluZy10b3A6ODBweDtcIj4nICtcbiAgICAgICAgICAgICAgICBjLnZhbHVlICsgJzwvZGl2Pic7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGMuY29uZmlybSkge1xuICAgICAgICAgICAgYy52YWx1ZSA9ICc8ZGl2IGNsYXNzPVwiYm94LWFsZXJ0LXdyYXBcIj48cD4nICsgYy52YWx1ZSArICc8L3A+JyArXG4gICAgICAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJidG4gYnRuLXllcyBidG4tbG9uZyBidG4tY2xvc2VcIj7noa7lrpo8L2J1dHRvbj48c3Bhbj48L3NwYW4+JyArXG4gICAgICAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJidG4gYnRuLWNhbmNlbCBidG4tbG9uZyBidG4tZ3JheSBidG4tY2xvc2VcIj7lj5bmtog8L2J1dHRvbj48L2Rpdj4nO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgaWYgKCdvYmplY3QnID09PSB0eXBlb2YgKGMpKSB7XG4gICAgICAgICAgICBjLnR5cGUgPSBjLnR5cGUgfHwgXCJcIjtcbiAgICAgICAgICAgIHN3aXRjaCAoYy50eXBlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIGNhc2UgJ2lkJzpcbiAgICAgICAgICAgICAgICAvLyDlsIZJROeahOWGheWuueWkjeWItui/h+adpe+8jOWOn+adpeeahOi/mOWcqOOAglxuICAgICAgICAgICAgICAgIGRpdi5hcHBlbmQoJCgnIycgKyBjLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgJCgnIycgKyBjLnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAuY3NzKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaW1nJzpcbiAgICAgICAgICAgICAgICBkaXYuaHRtbCgn5Yqg6L295LitLi4uJyk7XG4gICAgICAgICAgICAgICAgJCgnPGltZyBhbHQ9XCJcIiAvPicpXG4gICAgICAgICAgICAgICAgICAgIC5sb2FkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5lbXB0eSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZCgkKHRoaXMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQucmVzZXRQb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3NyYycsIGMudmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICAgICAgICBkaXYuaHRtbCgn5Yqg6L295LitLi4uJyk7XG4gICAgICAgICAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBjLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoaHRtbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGl2Lmh0bWwoaHRtbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnJlc2V0UG9zKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXYuaHRtbCgn5Ye66ZSZ5ZWmJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgICAgICAgICAgICAgZGl2LmFwcGVuZCgkKCc8aWZyYW1lIHNyYz1cIicgKyBjLnZhbHVlICsgJ1wiIHdpZHRoPScgKyB3aWR0aCArXG4gICAgICAgICAgICAgICAgICAgICcgaGVpZ2h0PScgKyBoZWlnaHQgKyAnIC8+JykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndGV4dCc6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICEhIHdpZHRoICYmIGRpdi53aWR0aCh3aWR0aCk7ICEhIGhlaWdodCAmJiBkaXYuaGVpZ2h0KGhlaWdodCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkaXYuaHRtbChjLnZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRpdi5odG1sKGMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8g5Li75Yqo5pi+56S65by556qXXG4gICAgICAgIGlmIChjLnNob3dlZCkge1xuICAgICAgICAgICAgdGhpcy5zaG93KGMuc2hvd2VkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjLmFsZXJ0IHx8IGMuY29uZmlybSkge1xuICAgICAgICAgICAgdGhlRGlhbG9nLmZpbmQoJy5idG4tY2xvc2UnKVxuICAgICAgICAgICAgICAgIC5iaW5kKCdjbGljaycsIHRoaXMuY2xvc2UpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIOaYvuekuuWvueivneahhlxuICAgICAqL1xuICAgIHRoaXMuc2hvdyA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAodW5kZWZpbmVkICE9PSBvcHRpb25zLmJlZm9yZVNob3cgJiYgIW9wdGlvbnMuYmVmb3JlU2hvdygpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICog6I635b6X5p+Q5LiA5YWD57Sg55qE6YCP5piO5bqm44CCSUXku47mu6TlooPkuK3ojrflvpfjgIJcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiBmbG9hdFxuICAgICAgICAgKi9cblxuICAgICAgICAvKiDmmK/lkKbmmL7npLrog4zmma/pga7nvanlsYIgKi9cbiAgICAgICAgaWYgKG9wdGlvbnMubW9kYWwpIHtcbiAgICAgICAgICAgICQoJyMnICsgb3ZlcmxheUlkKVxuICAgICAgICAgICAgICAgIC5jc3MoXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhlRGlhbG9nLmNzcyhcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gb3B0aW9ucy5hZnRlclNob3cpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYWZ0ZXJTaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgaXNTaG93ID0gdHJ1ZTtcbiAgICAgICAgLy8g6Ieq5Yqo5YWz6ZetIFxuICAgICAgICBpZiAoMCAhPT0gb3B0aW9ucy50aW1lKSB7XG4gICAgICAgICAgICB0aW1lSWQgPSBzZXRUaW1lb3V0KHRoaXMuY2xvc2UsIG9wdGlvbnMudGltZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZXNldFBvcygpO1xuXHRcdFxuXHRcdC8vIOiuvue9rm92ZXJsYXnog4zmma9cblx0XHRpZiAob3B0aW9ucy5vdmVybGF5KSB7XG5cdFx0XHQkKFwiLmRpYWxvZy1vdmVybGF5XCIpLmNzcyhcImJhY2tncm91bmRcIiwgXCIjRDNEM0QzXCIpO1xuXHRcdH1cblxuICAgICAgICAvL+Wbnuiwg1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBkID0gdGhlRGlhbG9nLmZpbmQoXCIuRGNvbnRlbnRcIik7XG4gICAgICAgICAgICBjYWxsYmFjayhkWzBdLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAkKHdpbmRvdylcbiAgICAgICAgICAgIC5rZXlkb3duKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhZyA9IGUudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWUudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmICh0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAndGV4dGFyZWEnKSB7fSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgfTtcbiAgICAvKlxuICAgICAqIOmakOiXj+WvueivneahhuOAguS9huW5tuS4jeWPlua2iOeql+WPo+WGheWuueOAglxuICAgICAqL1xuICAgIHRoaXMuaGlkZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICBpZiAoIWlzU2hvdykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gb3B0aW9ucy5iZWZvcmVIaWRlICYmICFvcHRpb25zLmJlZm9yZUhpZGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhlRGlhbG9nLmNzcygnZGlzcGxheScsIFwibm9uZVwiKTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gb3B0aW9ucy5hZnRlckhpZGUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYWZ0ZXJIaWRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5tb2RhbCkge1xuICAgICAgICAgICAgJCgnIycgKyBvdmVybGF5SWQpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsIFwibm9uZVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzU2hvdyA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIOWFs+mXreWvueivneahhlxuICAgICAqXG4gICAgICogQHJldHVybiB2b2lkXG4gICAgICovXG4gICAgdGhpcy5jbG9zZSA9IGZ1bmN0aW9uIChlLCByZWFsKSB7XG4gICAgICAgICQoXCJib2R5XCIpXG4gICAgICAgICAgICAuZmluZChcIi5kaWFsb2dcIilcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gb3B0aW9ucy5iZWZvcmVDbG9zZSAmJiAhb3B0aW9ucy5iZWZvcmVDbG9zZSgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZWFsKSB7XG4gICAgICAgICAgICB0aGVEaWFsb2cuZmluZChcIi5EY29udGVudDplcSgwKVwiKVxuICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhcImJvZHlcIilcbiAgICAgICAgICAgICAgICAuY3NzKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhlRGlhbG9nLnJlbW92ZSgpO1xuICAgICAgICBpc1Nob3cgPSBmYWxzZTtcbiAgICAgICAgaWYgKHVuZGVmaW5lZCAhPT0gb3B0aW9ucy5hZnRlckNsb3NlKSB7XG4gICAgICAgICAgICBvcHRpb25zLmFmdGVyQ2xvc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLm1vZGFsKSB7XG4gICAgICAgICAgICAkKCcjJyArIG92ZXJsYXlJZClcbiAgICAgICAgICAgICAgICAuY3NzKCdkaXNwbGF5JywgXCJub25lXCIpXG4gICAgICAgICAgICAgICAgLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lSWQpO1xuICAgICAgICAkKFwiYm9keVwiKVxuICAgICAgICAgICAgLmZpbmQoXCIuRGNvbnRlbnRcIilcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5yZXNldE92ZXJsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJyMnICsgb3ZlcmxheUlkKVxuICAgICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAgICAgJ3dpZHRoJzogJCh3aW5kb3cpXG4gICAgICAgICAgICAgICAgICAgIC53aWR0aCgpICsgJChkb2N1bWVudClcbiAgICAgICAgICAgICAgICAgICAgLnNjcm9sbExlZnQoKSxcbiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJChkb2N1bWVudClcbiAgICAgICAgICAgICAgICAgICAgLmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICdsZWZ0JzogMCxcbiAgICAgICAgICAgICAgICAndG9wJzogMFxuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGluaXQuY2FsbCh0aGlzKTtcbiAgICB0aGlzLnNldENvbnRlbnQoY29udGVudCk7XG5cbiAgICBEaWFsb2cuX19jb3VudCsrO1xuICAgIERpYWxvZy5fX3ppbmRleCsrO1xufVxubW9kdWxlLmV4cG9ydHMgPSBEaWFsb2c7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIOaUtuebiuiuoeeul+WZqCAoY2NjQ2FsY3VsYXRvcilcbiAqXG4gKiA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgaHJlZj1cIi9hc3NldHMvY3NzL21vZHVsZXMvY2NjQ2FsY3VsYXRvci5jc3NcIj5cbiAqIHZhciBDYWwgPSByZXF1aXJlKCdhc3NldHMvanMvbW9kdWxlcy9jY2NDYWxjdWxhdG9yJyk7XG4gKiBDYWwuY3JlYXRlKCk7XG4gKi9cbnZhciB1dGlscyA9IHJlcXVpcmUoJ2NjYy9nbG9iYWwvanMvbGliL3V0aWxzJyk7XG52YXIgdHBsID0ge1xuXHR3cmFwOiByZXF1aXJlKCdjY2MvZ2xvYmFsL3BhcnRpYWxzL21vZHVsZXMvY2NjQ2FsY3VsYXRvci5odG1sJyksXG5cdGxpc3Q6ICd7eyNlYWNoIGxpc3R9fVxcXG5cdFx0XHQ8ZGl2IGNsYXNzPVwiY2xlYXJmaXggYmFja2dyLWYgdGRDb250ZW50XCI+XFxcblx0XHRcdFx0PGRpdiBjbGFzcz1cImNjYy1mIHRkQ2VsbCBiYWNrZ3ItZlwiPnt7ZHVlRGF0ZX19PC9kaXY+XFxcblx0XHRcdFx0PGRpdiBjbGFzcz1cInRkQ2VsbCBiYWNrZ3ItZlwiPnt7YW1vdW50fX08L2Rpdj5cXFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwidGRDZWxsIGJhY2tnci1mXCI+e3thbW91bnRQcmluY2lwYWx9fTwvZGl2PlxcXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJ0ZENlbGwgYmFja2dyLWZcIj57e2Ftb3VudEludGVyZXN0fX08L2Rpdj5cXFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwiY2NjLWwgdGRDZWxsIGJhY2tnci1mXCI+e3thbW91bnRPdXRzdGFuZGluZ319PC9kaXY+XFxcblx0XHRcdDwvZGl2PlxcXG5cdFx0e3svZWFjaH19J1xufTtcblxudmFyIERpYWxvZyA9IHJlcXVpcmUoXCJjY2MvZ2xvYmFsL2pzL21vZHVsZXMvY2NjQm94XCIpO1xuXG4vLyDnvJPlrZjpg6jliIbmlbDmja5cbndpbmRvdy5DQ19DQUNIRSA9IHt9O1xuXG52YXIgcmVnID0gL14oWzEtOV1bXFxkXXswLDd9fDApJC87XG52YXIgcmVnMSA9IC9eKFsxLTldW1xcZF17MCwxfXwwKShcXC5bXFxkXXsxLDh9KT8kLztcblxubW9kdWxlLmV4cG9ydHMuY3JlYXRlID0gZnVuY3Rpb24gKHApIHtcbiAgICBwID0gcCB8fCB7fTtcbiAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgIHRpdGxlOiBwLnRpdGxlIHx8ICfmlLbnm4rorqHnrpflmagnLFxuICAgICAgICB0cGw6IHAudHBsIHx8IHRwbC53cmFwLFxuICAgICAgICB3aWR0aDogODUwLFxuICAgICAgICBoZWlnaHQ6IDQwMCxcbiAgICAgICAgdG9wOiAnMjAlJyxcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHt9XG4gICAgfTtcblxuICAgICQuZXh0ZW5kKGRlZmF1bHRzLCBwKTtcbiAgICB2YXIgbyA9IGRlZmF1bHRzO1xuXG4gICAgLy8gZ2V0IGRhdGFcbiAgICB2YXIgcmVuZGVyUHVycG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy92YXIgUCA9IFQoJ3poLWNuJykuZW51bXMuUmVwYXltZW50TWV0aG9kO1xuICAgICAgICB2YXIgX29wdGlvbiA9ICcnO1xuXHRcdFxuXHRcdCQuZWFjaCh1dGlscy5pMThuLlJlcGF5bWVudE1ldGhvZCwgZnVuY3Rpb24oaywgdikge1xuXHRcdFx0X29wdGlvbiArPSAnPG9wdGlvbiB2YWx1ZT1cIicgKyBrICsgJ1wiPicgKyB2WzBdICsgJzwvb3B0aW9uPic7XG5cdFx0fSk7XG5cdFx0XG4gICAgICAgIC8v6L+H5ruk6L+Y5qy+5pa55byPXG4gICAgICAgIHJldHVybiAnPG9wdGlvbiB2YWx1ZT1cIkVxdWFsSW5zdGFsbG1lbnRcIj7mjInmnIjnrYnpop3mnKzmga88L29wdGlvbj5cXFxuXHRcdFx0XHQ8b3B0aW9uIHZhbHVlPVwiRXF1YWxQcmluY2lwYWxcIj7mjInmnIjnrYnpop3mnKzph5E8L29wdGlvbj5cXFxuXHRcdFx0XHQ8b3B0aW9uIHZhbHVlPVwiTW9udGhseUludGVyZXN0XCI+5oyJ5pyI5LuY5oGv5Yiw5pyf6L+Y5pysPC9vcHRpb24+XFxcblx0XHRcdFx0PG9wdGlvbiB2YWx1ZT1cIkJ1bGxldFJlcGF5bWVudFwiPuS4gOasoeaAp+i/mOacrOS7mOaBrzwvb3B0aW9uPic7XG4gICAgfTtcblxuICAgIGlmICghQ0NfQ0FDSEUub3B0aW9ucykge1xuICAgICAgICBDQ19DQUNIRS5vcHRpb25zID0gcmVuZGVyUHVycG9zZSgpO1xuICAgIH1cblxuICAgIG5ldyBEaWFsb2coe1xuICAgICAgICB0aXRsZTogby50aXRsZSxcbiAgICAgICAgdmFsdWU6IG8udHBsLFxuICAgICAgICB3aWR0aDogby53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiBvLmhlaWdodCxcbiAgICAgICAgdG9wOiBvLnRvcCxcbiAgICAgICAgc2hvd2VkOiBmdW5jdGlvbiAoZWxlLCBib3gpIHtcblx0XHRcdC8vIHNldCBsaXN0IHRwbFxuXHRcdFx0Ly90cGwubGlzdCA9ICQoZWxlKS5maW5kKCcuY2NjLWNhbGN1bGF0b3ItdHBsLWxpc3QnKS5odG1sKCk7XG5cdFx0XHRcbiAgICAgICAgICAgIHZhciBkYXRlX2NhbCA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICB2YXIgZGF0ZV9jYWwxID0gbmV3IERhdGUoZGF0ZV9jYWwpO1xuICAgICAgICAgICAgZGF0ZV9jYWwxLnNldERhdGUoZGF0ZV9jYWwuZ2V0RGF0ZSgpICsgMyk7XG4gICAgICAgICAgICB2YXIgbGFzdF9kYXRlID0gZGF0ZV9jYWwxLmdldEZ1bGxZZWFyKCkgKyAnLScgKyAoZGF0ZV9jYWwxLmdldE1vbnRoKCkgKyAxKSArICctJyArIGRhdGVfY2FsMS5nZXREYXRlKCk7XG5cdFx0XHRcbiAgICAgICAgICAgIC8vIHJlbmRlciBvcHRpb25zXG4gICAgICAgICAgICAkKGVsZSlcbiAgICAgICAgICAgICAgICAuZmluZCgnc2VsZWN0W25hbWU9cGF5bWVudE1ldGhvZF0nKVxuICAgICAgICAgICAgICAgIC5odG1sKENDX0NBQ0hFLm9wdGlvbnMpO1xuICAgICAgICAgICAgJChlbGUpXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2Zvcm1bbmFtZT1jY0NhbGN1bGF0b3JGb3JtXScpXG4gICAgICAgICAgICAgICAgLnN1Ym1pdChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YXMgPSAkdGhpcy5zZXJpYWxpemVBcnJheSgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmMgPSBmdW5jdGlvbiAobXNnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKGVsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnI2NjLWNhbC1saXN0LXdwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaHRtbCgnPHA+JyArIG1zZyArICc8L3A+Jyk7XG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFzW2ldLm5hbWUgPT09ICdwYXltZW50TWV0aG9kJykge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWxWYWx1ZSA9IGRhdGFzW2ldLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzTGVnYWwgPSByZWcudGVzdChjYWxWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4ID0gJChlbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ1tuYW1lPScgKyBkYXRhc1tpXS5uYW1lICsgJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbFZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnW25hbWU9JyArIGRhdGFzW2ldLm5hbWUgKyAnXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnbmMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZm9jdXMoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYygn6K+36L6T5YWlJyArIHRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghaXNMZWdhbCAmJiBkYXRhc1tpXS5uYW1lICE9PSAnYW5udWFsUmF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGVsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ1tuYW1lPScgKyBkYXRhc1tpXS5uYW1lICsgJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ25jJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFzW2ldLm5hbWUgPT09ICdhbW91bnRWYWx1ZScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsVmFsdWUgPiA5OTk5OTk5OSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYyh0ZXggKyAn5LiN6IO96LaF6L+HOOS9jeaVsOWtlycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5jKHRleCArICflv4XpobvkuLrmlbTmlbAnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhc1tpXS5uYW1lID09PSAnYW5udWFsUmF0ZScgJiYgIVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZzEudGVzdChjYWxWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGVsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ1tuYW1lPScgKyBkYXRhc1tpXS5uYW1lICsgJ10nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ25jJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmModGV4ICsgJ+W/hemhu+S4uuWwj+S6jjEwMOeahOaVsOWtlycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdbbmFtZT0nICsgZGF0YXNbaV0ubmFtZSArICddJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCduYycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyICRwb3N0QnRuID0gJChlbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLmJ0bi1jYWwnKTtcbiAgICAgICAgICAgICAgICAgICAgJHBvc3RCdG4uYWRkQ2xhc3MoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KCforqHnrpfkuK3igKYnKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9hcGkvdjIvbG9hbi9yZXF1ZXN0L2FuYWx5c2UnO1xuICAgICAgICAgICAgICAgICAgICAkLnBvc3QodXJsLCBkYXRhcywgZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHBvc3RCdG4ucmVtb3ZlQ2xhc3MoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoJ+iuoeeul+aUtuebiicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoZWxlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnLlRhbW91bnQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dChyZXMuZGF0YS5pbnRlcmVzdCArIHJlcy5kYXRhLnByaW5jaXBhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCcuRmFtb3VudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5odG1sKCfvv6UnICsgdXRpbHMuZm9ybWF0LmFtb3VudCgocmVzLmRhdGEuaW50ZXJlc3QgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5kYXRhLnByaW5jaXBhbCksIDIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBzdHlsZT1cInBhZGRpbmctbGVmdDoyMHB4O1wiPuWBh+iuvui1t+aBr+aXpeS4uicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdF9kYXRlICsgJzwvc3Bhbj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGVsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5UYW1vdW50UHJpbmNpcGFsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQocmVzLmRhdGEucHJpbmNpcGFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGVsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJy5UYW1vdW50SW50ZXJlc3QnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dChyZXMuZGF0YS5pbnRlcmVzdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJChlbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCcuY2MtdGFsYmUtdG90YWwnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyQoZWxlKS5maW5kKCcuRnJhdGUnKS50ZXh0KGRhdGFzWzJdLnZhbHVlKyclJyk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRuZXcgUmFjdGl2ZSh7XG5cdFx0XHRcdFx0XHRcdFx0ZWw6ICQoZWxlKS5maW5kKCcjY2MtY2FsLWxpc3Qtd3AnKSxcblx0XHRcdFx0XHRcdFx0XHR0ZW1wbGF0ZTogdHBsLmxpc3QsXG5cdFx0XHRcdFx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdDogcmVzLmRhdGEucmVwYXltZW50c1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5jKCfor7fmsYLlh7rplJl+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRwb3N0QnRuLnJlbW92ZUNsYXNzKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KCforqHnrpfmlLbnm4onKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYygn6K+35rGC5Ye66ZSZficpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBvLmNhbGxiYWNrKGVsZSwgYm94KTtcbiAgICAgICAgfVxuICAgIH0pO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gJzxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiL2NjYy9nbG9iYWwvY3NzL21vZHVsZXMvY2NjQ2FsY3VsYXRvci5jc3NcIj5cXG48ZGl2IGNsYXNzPVwiY2MtY2FsY3VsYXRvci13cFwiPlxcbiAgICA8ZGl2IGNsYXNzPVwiY2FsY3VsYXRvci10aXRsZVwiPlxcbiAgICAgICAgPHAgY2xhc3M9XCJjYWxjdWxhdG9yLXRpdGxlLWxlZnRcIj7mlLbnm4rorqHnrpflmag8L3A+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FsY3VsYXRvci1saW5lXCI+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtNFwiIHN0eWxlPVwid2lkdGg6MzMlO2Zsb2F0OmxlZnQ7XCI+XFxuICAgICAgICAgICAgPGZvcm0gbmFtZT1cImNjQ2FsY3VsYXRvckZvcm1cIiBjbGFzcz1cImZvcm0taG9yaXpvbnRhbFwiIHJvbGU9XCJmb3JtXCI+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiY2MtY2FsLWYyXCIgY2xhc3M9XCJjb2wtc20tNCBjb250cm9sLWxhYmVsXCI+5oqV6LWE6YeR6aKdPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLXRvcDotMzBweDtcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGlkPVwiY2MtY2FsLWYyXCIgbmFtZT1cImFtb3VudFZhbHVlXCIgdmFsdWU9XCJcIiBwbGFjZWhvbGRlcj1cIuaCqOeahOaKlei1hOmHkeminVwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPuWFgzwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJjYy1jYWwtZjNcIiBjbGFzcz1cImNvbC1zbS00IGNvbnRyb2wtbGFiZWxcIiBwbGFjZWhvbGRlcj1cIlwiPuaKlei1hOacn+mZkDwvbGFiZWw+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLThcIiBzdHlsZT1cImZsb2F0OnJpZ2h0O21hcmdpbi10b3A6LTMwcHg7XCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBpZD1cImNjLWNhbC1mM1wiIG5hbWU9XCJkdWVNb250aFwiIHZhbHVlPVwiXCIgcGxhY2Vob2xkZXI9XCLmnJ/mnJvml7bpl7Tplb/luqZcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj7mnIg8L3NwYW4+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwiY2MtY2FsLWY0XCIgY2xhc3M9XCJjb2wtc20tNCBjb250cm9sLWxhYmVsXCI+5bm05YyW5Yip546HPC9sYWJlbD5cXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tOFwiIHN0eWxlPVwiZmxvYXQ6cmlnaHQ7bWFyZ2luLXRvcDotMzBweDtcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cImZvcm0tY29udHJvbFwiIGlkPVwiY2MtY2FsLWY0XCIgbmFtZT1cImFubnVhbFJhdGVcIiB2YWx1ZT1cIlwiIHBsYWNlaG9sZGVyPVwi5bm05YyW5Yip546HXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JTwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZvcm0tZ3JvdXBcIj5cXG4gICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJjYy1jYWwtZjVcIiBjbGFzcz1cImNvbC1zbS00IGNvbnRyb2wtbGFiZWxcIj7ov5jmrL7mlrnlvI88L2xhYmVsPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1zbS04XCIgc3R5bGU9XCJmbG9hdDpyaWdodDttYXJnaW4tdG9wOi0zMHB4O1wiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIiBuYW1lPVwicGF5bWVudE1ldGhvZFwiIGlkPVwiY2MtY2FsLWY1XCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj5sb2FkaW5nLi4uPC9vcHRpb24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmb3JtLWdyb3VwXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLXNtLW9mZnNldC00IGNvbC1zbS04XCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJidG4gYnRuLW9yYW5nZSBidG4tY2FsXCI+6K6h566X5pS255uKPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwicmVzZXRcIiBjbGFzcz1cInJlc2V0XCI+6YeN572uPC9idXR0b24+XFxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgPC9mb3JtPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLThcIiBzdHlsZT1cIndpZHRoOjY0JTtmbG9hdDpsZWZ0O1wiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYy1jYWwtcmVzdWx0cy1ib3hcIj5cXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNjLXJlcyB0YWJsZSB0YWJsZS1ib3JkZXJlZDEgdGRDb250ZW50XCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2NjLWYgdGRDZWxsXCI+5pS25qy+5pel5pyfPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGRDZWxsXCI+5pS25qy+6YeR6aKdPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGRDZWxsXCI+5pS25Zue5pys6YeRPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGRDZWxsXCI+5pS25Zue5Yip5oGvPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2NjLWwgdGRDZWxsXCI+5Ymp5L2Z5pys6YeRPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2MtcmVzIGNjLXRhYmxlLWNvbnRhaW5lclwiPlxcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlX3dyYXBcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFibGUgdGFibGUtYm9yZGVyZWQgdGFibGUtaG92ZXJcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImNjLWNhbC1saXN0LXdwXCI+XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XFxuICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2MtcmVzIHRhYmxlLWJvcmRlcmVkMSBjYy10YWxiZS10b3RhbCBoaWRlXCI+XFxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiY2MtY2FsLXRvdGFsIHRhYmxlLWJvcmRlcmVkMSB0ZENvbnRlbnRcIj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2MtdG90YWwtdHIgY2xlYXJmaXggY2MtdG90YWwtdHItYlwiPlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2NjLWYgdGRDZWxsXCI+5oC76K6hPC9kaXY+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJUYW1vdW50IHRkQ2VsbFwiPjwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiVGFtb3VudFByaW5jaXBhbCB0ZENlbGxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlRhbW91bnRJbnRlcmVzdCB0ZENlbGxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNjYy1sIFRhbW91bnRPdXRzdGFuZGluZyB0ZENlbGxcIj48L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2MtdG90YWxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4+5pys5oGv5ZCI6K6h77yaPGVtIGNsYXNzPVwiRmFtb3VudFwiPjwvZW0+PC9zcGFuPlxcbiAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcbjwvZGl2Pic7IiwibW9kdWxlLmV4cG9ydHMgPSAnPCEtLXt7SlNPTi5zdHJpbmdpZnkobGlzdCl9fS0tPlxcbnt7I2xpc3R9fVxcblxcbjxkaXYgY2xhc3M9XCJsb2FuSXRlbVdyYXBwZXJcIiB7eyNpZiBzdGF0dXMgPT09IFxcJ1NDSEVEVUxFRFxcJyB9fXt7L2lmfX0+XFxuICAgIDxkaXYgY2xhc3M9XCJsb2FuUGFydE9uZVwiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cImxvYW50aXRsZVwiPlxcblx0XHRcdHt7I2lmIHRpdGxlTGVuZ3RoPjIwfX1cXG5cdFx0XHQ8cD57e3RpdGxlfX08L3A+XFxuXHRcdFx0e3svaWZ9fVxcblxcbjwhLS1cXG5cdFx0XHQ8YSBocmVmPVwiL2xvYW4ve3sgaWQgfX1cIiBjbGFzcz1cImludmVzdC10aXRsZVwiIHN0eWxlPVwiY29sb3I6IzRhNGE0YTtcIj5cXG5cdFx0XHRcdHt7I2lmIHRpdGxlLmxlbmd0aD4xMX19XFxuXHRcdFx0XHR7e3RpdGxlLnN1YnN0cigwLDEwKX19Li4uXFxuXHRcdFx0PC9hPlxcbi0tPlxcblxcbiAgICAgICAgICAgIDxhIGhyZWY9XCIvbG9hbi97eyBpZCB9fVwiIGNsYXNzPVwiaW52ZXN0LXRpdGxlXCIge3sjaWYgbG9hblJlcXVlc3QucHJvZHVjdEtleT09PVwiTFRCXCJ9fXN0eWxlPVwiY29sb3I6IzRhNGE0YVwie3tlbHNlaWYgbG9hblJlcXVlc3QucHJvZHVjdEtleT09PVwiTFhZXCJ9fXN0eWxlPVwiY29sb3I6IzRhNGE0YVwie3tlbHNlfX1zdHlsZT1cImNvbG9yOiM0YTRhNGFcInt7L2lmfX0+XFxuXHRcdFx0XHR7eyNpZiB0aXRsZUxlbmd0aD4yMH19XFxuICAgICAgICAgICAgICAgIHt7dGl0bGUuc3Vic3RyKDAsMTIpfX0uLi5cXG5cdFx0XHRcdHt7ZWxzZX19XFxuXHRcdFx0XHR7e3RpdGxlfX1cXG5cdFx0XHRcdHt7L2lmfX1cXG4gICAgICAgICAgICA8L2E+XFxuICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwhLS1cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsb2FuUHVycG9zZVwiPnt7IHB1cnBvc2UgfX08L2Rpdj5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsb2FuUmVwYXlNZXRob2RcIj57eyBSZXBheW1lbnRNZXRob2RbbWV0aG9kXVswXSB9fTwvZGl2Plxcbi0tPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cImFtb3VudFwiPnt7IGFtb3VudCB9fTxzcGFuPnt7IGFtb3VudFVuaXQgfX08L3NwYW4+XFxuICAgIDwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVwibG9hblJhdGVcIj57eyByYXRlIH19PGk+JTwvaT5cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XCJkdXJhdGlvblwiPnt7IGZkdXJhdGlvbiB9fTxzcGFuPnt7IGZkdXJ1bml0IH19PC9zcGFuPlxcbiAgICA8L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cImJhY2ttb25leVwiPnt7IG1ldGhvZEZtdCB9fTwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVwicHJvY2Vzc1wiPlxcbiAgICAgICAgPGRpdiBjbGFzcz1cInJhdGUtY2hhcnRcIj5cXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZWFzeS1waWUtY2hhcnQgcGllXCIgZGF0YS1wZXJjZW50PVwie3sgaW52ZXN0UGVyY2VudCB9fVwiIHN0eWxlPVwidG9wOjlweFwiPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBlcmNlbnRhZ2VOdW1cIj57eyBpbnZlc3RQZXJjZW50IH19IDwvc3Bhbj5cXG4gICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgIDwvZGl2PlxcbiAgICA8L2Rpdj5cXG4gICAgXFxuICAgIDxkaXYgY2xhc3M9XCJpbnZlc3RCdG5cIj5cXG4gICAgICAgIHt7I2lmIHN0YXR1cyA9PT0gXFwnT1BFTkVEXFwnfX1cXG4gICAgICAgIDxhIGhyZWY9XCIvbG9hbi97e2lkfX1cIiBzdHlsZT1cInRleHQtZGVjb3JhdGlvbjpub25lXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImludmVzdGJ0blwiPueri+WNs+aKlei1hDwvZGl2PlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAge3svaWZ9fSBcXG4gICAgICAgIHt7I2lmIHN0YXR1cyA9PT0gXFwnU0NIRURVTEVEXFwnfX1cXG4gICAgICAgIDxhIGhyZWY9XCIvbG9hbi97e2lkfX1cIiBzdHlsZT1cInRleHQtZGVjb3JhdGlvbjpub25lXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImludmVzdGJ0bi1ob3ZlclwiID7ljbPlsIblvIDlp4s8L2Rpdj5cXG4gICAgICAgIDwvYT5cXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbnZlc3RidG4tdGltZVwiIGRhdGEtaWQ9XCJ7eyBpZCB9fVwiIGRhdGEtc3RhdHVzPVwie3sgc3RhdHVzIH19XCIgZGF0YS1vcGVuPVwie3sgdGltZU9wZW4gfX1cIlxcbiAgICAgICAgZGF0YS1zZXJ2PVwie3sgc2VydmVyRGF0ZSB9fVwiIHN0eWxlPVwibWFyZ2luLXRvcDo1cHg7Y29sb3I6IGJsYWNrO3dpZHRoOiAxODBweDt0ZXh0LWFsaWduOiBjZW50ZXI7bWFyZ2luLWxlZnQ6LTQwcHhcIj48L2Rpdj5cXG4gICAgICAgIHt7L2lmfX0gXFxuICAgICAgICB7eyNpZiBzdGF0dXMgPT09IFxcJ0ZJTklTSEVEXFwnfX1cXG4gICAgICAgIDxhIGhyZWY9XCIvbG9hbi97e2lkfX1cIiBzdHlsZT1cInRleHQtZGVjb3JhdGlvbjpub25lXCI+XFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImludmVzdGJ0blwiIHN0eWxlPVwiYmFja2dyb3VuZDpsaWdodGdyZXk7IGNvbG9yOiAjZmZmXCI+5bey5ruh5qCHPC9kaXY+XFxuICAgICAgICA8L2E+XFxuICAgICAgICB7ey9pZn19XFxuICAgICAgICB7eyNpZiBzdGF0dXMgPT09IFxcJ0ZBSUxFRFxcJ319XFxuICAgICAgICA8YSBocmVmPVwiL2xvYW4ve3tpZH19XCIgc3R5bGU9XCJ0ZXh0LWRlY29yYXRpb246bm9uZVwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnZlc3RidG5cIiBzdHlsZT1cImJhY2tncm91bmQ6bGlnaHRncmV5OyBjb2xvcjogI2ZmZlwiPua1geaghzwvZGl2PlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAge3svaWZ9fSBcXG4gICAgICAgIHt7I2lmIHN0YXR1cyA9PT0gXFwnU0VUVExFRFxcJ319XFxuICAgICAgICA8YSBocmVmPVwiL2xvYW4ve3tpZH19XCIgc3R5bGU9XCJ0ZXh0LWRlY29yYXRpb246bm9uZVwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnZlc3RidG5cIiBzdHlsZT1cImJhY2tncm91bmQ6bGlnaHRncmV5OyBjb2xvcjogI2ZmZmZmZlwiPui/mOasvuS4rTwvZGl2PlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAge3svaWZ9fSBcXG4gICAgICAgIHt7I2lmIHN0YXR1cyA9PT0gXFwnQ0xFQVJFRFxcJ319XFxuICAgICAgICA8YSBocmVmPVwiL2xvYW4ve3tpZH19XCIgc3R5bGU9XCJ0ZXh0LWRlY29yYXRpb246bm9uZVwiPlxcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpbnZlc3RidG5cIiBzdHlsZT1cImJhY2tncm91bmQ6bGlnaHRncmV5OyBjb2xvcjogI2ZmZlwiPui/mOasvue7k+adnzwvZGl2PlxcbiAgICAgICAgPC9hPlxcbiAgICAgICAge3svaWZ9fVxcbiAgICA8L2Rpdj5cXG48L2Rpdj5cXG48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cXG5cdCQoXFwnLmxvYW50aXRsZSBhXFwnKS5tb3VzZWVudGVyKGZ1bmN0aW9uKCl7XFxuXHRcdCQodGhpcykuc2libGluZ3MoKS5mYWRlSW4oMjAwKTtcXG5cdH0pLm1vdXNlbGVhdmUoZnVuY3Rpb24oKXtcXG5cdFx0JCh0aGlzKS5zaWJsaW5ncygpLmZhZGVPdXQoMTAwKTtcXG5cdH0pXFxuXHRcXG48L3NjcmlwdD5cXG57ey9saXN0fX1cXG4nOyIsIi8qanNoaW50IG11bHRpc3RyOiB0cnVlICovXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgaTE4biA9IHJlcXVpcmUoJ0Bkcy9pMThuJylbJ3poLWNuJ107XG5cbnZhciBJbnZlc3RMaXN0U2VydmljZSA9IHJlcXVpcmUoJ2NjYy9pbnZlc3QvanMvbWFpbi9zZXJ2aWNlL2xpc3QnKVxuICAgIC5JbnZlc3RMaXN0U2VydmljZTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJ2NjYy9nbG9iYWwvanMvbGliL3V0aWxzJyk7XG5yZXF1aXJlKCdjY2MvZ2xvYmFsL2pzL2xpYi9qcXVlcnkuZWFzeS1waWUtY2hhcnQuanMnKVxuXG4vLyDmlLbnm4rorqHnrpflmahcbnZhciBDYWwgPSByZXF1aXJlKCdjY2MvZ2xvYmFsL2pzL21vZHVsZXMvY2NjQ2FsY3VsYXRvcicpO1xuJCgnLmJlbmVmaXQtY2FsY3VsYXRvcicpXG4gICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgQ2FsLmNyZWF0ZSgpO1xuICAgIH0pO1xuXG52YXIgcGFyYW1zID0ge1xuICAgIHBhZ2VTaXplOiAxMCxcbiAgICBzdGF0dXM6ICdTQ0hFRFVMRUQnLFxuICAgIG1pbkR1cmF0aW9uOiAwLFxuICAgIG1heER1cmF0aW9uOiAxMDAsXG4gICAgbWluUmF0ZTogMCxcbiAgICBtYXhSYXRlOiAxMDAsXG4gICAgY3VycmVudFBhZ2U6IDFcbn07XG5cblxuZnVuY3Rpb24ganNvblRvUGFyYW1zKHBhcmFtcykge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgIGlmIChwYXJhbXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgc3RyICs9ICcmJyArIGtleSArICc9JyArIHBhcmFtc1trZXldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdGVMZWZ0VGltZShsZWZ0VGltZSl7XG4gICAgdmFyIGRpZmZtaW4gPSBsZWZ0VGltZSAvIDEwMDAgLyA2MDtcbiAgICB2YXIgc3RyID0gXCJcIjtcbiAgICBpZiAoZGlmZm1pbiA+IDApIHtcbiAgICAgICAgdmFyIF9kYXkgPSBNYXRoLmNlaWwoZGlmZm1pbiAvIDYwIC8gMjQpO1xuICAgICAgICBpZiggX2RheSA+IDEpe1xuICAgICAgICAgICAgc3RyID0gX2RheStcIuWkqVwiO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgIHZhciBfaG91ciA9IE1hdGguY2VpbChkaWZmbWluIC8gNjApO1xuICAgICAgICAgICAgaWYoX2hvdXIgPiAxKXtcbiAgICAgICAgICAgICAgICBzdHIgPSBfaG91citcIuWwj+aXtlwiO1xuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgc3RyID0gTWF0aC5jZWlsKGRpZmZtaW4pK1wi5YiGXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9ZWxzZSB7XG4gICAgICAgIHZhciBzZWMgPSBNYXRoLmNlaWwobGVmdFRpbWUgLyAxMDAwKTtcbiAgICAgICAgc3RyID0gc2VjK1wi56eSXCI7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEl0ZW0oaXRlbSkge1xuICAgIHZhciBwdXJwb3NlTWFwID0ge1xuICAgICAgICBcIlNIT1JUVEVSTVwiIDogXCLnn63mnJ/lkajovaxcIixcbiAgICAgICAgXCJQRVJTT05BTFwiIDogXCLkuKrkurrkv6HotLdcIixcbiAgICAgICAgXCJJTlZFU1RNRU5UXCIgOiBcIuaKlei1hOWIm+S4mlwiLFxuICAgICAgICBcIkNBUlwiIDogXCLovabovobono3otYRcIixcbiAgICAgICAgXCJIT1VTRVwiIDogXCLmiL/kuqfono3otYRcIixcbiAgICAgICAgXCJDT1JQT1JBVElPTlwiIDogXCLkvIHkuJrono3otYRcIixcbiAgICAgICAgXCJPVEhFUlwiIDogXCLlhbblroPlgJ/mrL5cIlxuICAgIH07XG4gICAgICAgIFxuICAgIGl0ZW0ucmF0ZSA9IGl0ZW0ucmF0ZSAvIDEwMDtcbiAgICBpdGVtLnB1cnBvc2UgPSBwdXJwb3NlTWFwW2l0ZW0ucHVycG9zZV07XG4gICAgaXRlbS5pbnZlc3RQZXJjZW50ID0gcGFyc2VJbnQoaXRlbS5pbnZlc3RQZXJjZW50ICogMTAwLCAxMCk7XG4gICAgaWYgKGl0ZW0uZHVyYXRpb24uZGF5cyA+IDApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtLmR1cmF0aW9uLnRvdGFsRGF5cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgaXRlbS5mZHVyYXRpb24gPSBpdGVtLmR1cmF0aW9uLmRheXM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5mZHVyYXRpb24gPSBpdGVtLmR1cmF0aW9uLnRvdGFsRGF5czsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgaXRlbS5mZHVydW5pdCA9IFwi5aSpXCI7XG4gICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgaXRlbS5mZHVyYXRpb24gPSBpdGVtLmR1cmF0aW9uLnRvdGFsTW9udGhzO1xuICAgICAgICBpdGVtLmZkdXJ1bml0ID0gXCLkuKrmnIhcIjtcbiAgICB9XG4gICAgXG4gICAgaWYgKGl0ZW0uYW1vdW50ID49IDEwMDAwKSB7XG4gICAgICAgIGl0ZW0uYW1vdW50VW5pdCA9ICfkuIcnO1xuICAgICAgICBpdGVtLmFtb3VudCA9IChpdGVtLmFtb3VudCAvIDEwMDAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtLmFtb3VudFVuaXQgPSAn5YWDJztcbiAgICB9XG4gICAgXG4gICAgaWYgKGl0ZW0uc3RhdHVzID09IFwiT1BFTkVEXCIpIHtcbiAgICAgICAgaXRlbS5sZWZ0VGltZSA9IGZvcm1hdGVMZWZ0VGltZShpdGVtLnRpbWVMZWZ0KTtcbiAgICAgICAgaXRlbS5vcGVuID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGl0ZW0uc3RhdHVzID09IFwiU0NIRURVTEVEXCIpe1xuICAgICAgICBpdGVtLnNjaGVkdWxlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbS5maW5pc2hlZCA9IHRydWU7XG4gICAgfVxuICAgIC8v5qC85byP5YyW5bqP5YiX5Y+3XG4gICAgaWYoIGl0ZW0ucHJvdmlkZXJQcm9qZWN0Q29kZSApe1xuICAgICAgICBpZiggaXRlbS5wcm92aWRlclByb2plY3RDb2RlLmluZGV4T2YoJyMnKSA+IDAgKXtcbiAgICAgICAgICAgIHZhciBoaF9wcm9qZWN0X2NvZGUgPSBpdGVtLnByb3ZpZGVyUHJvamVjdENvZGUuc3BsaXQoJyMnKTtcbiAgICAgICAgICAgIGl0ZW0uZlByb2plY3RUeXBlID0gaGhfcHJvamVjdF9jb2RlWzBdO1xuICAgICAgICAgICAgaXRlbS5mUHJvamVjdENvZGUgPSBoaF9wcm9qZWN0X2NvZGVbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpdGVtLmZQcm9qZWN0VHlwZSA9ICcnO1xuICAgICAgICAgICAgaXRlbS5mUHJvamVjdENvZGUgPSBpdGVtLnByb3ZpZGVyUHJvamVjdENvZGU7XG4gICAgICAgIH0gICAgICAgXG4gICAgfVxuICAgIHJldHVybiBpdGVtO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxvYW5MaXN0KGxpc3QpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdFtpXSA9IGZvcm1hdEl0ZW0obGlzdFtpXSk7XG4gICAgICAgIHZhciBtZXRob2QgPSBsaXN0W2ldLm1ldGhvZDtcbiAgICAgICAgdmFyIG1ldGhvZEZtdCA9IGkxOG4uZW51bXMuUmVwYXltZW50TWV0aG9kW21ldGhvZF1bMF07XG4gICAgICAgIGxpc3RbaV0ubWV0aG9kRm10ID0gbWV0aG9kRm10O1xuXHRcdGxpc3RbaV0udGl0bGVMZW5ndGggPSByZXBsYWNlU3RyKGxpc3RbaV0udGl0bGUpO1xuICAgIH1cbiAgICByZXR1cm4gbGlzdDtcbn1cblx0XG5mdW5jdGlvbiByZXBsYWNlU3RyKHN0cil7XG5cdHJldHVybiBzdHIucmVwbGFjZSgvW15cXHgwMC14ZmZdL2csJ3h4JykubGVuZ3RoO1xufVxuXHRcbkludmVzdExpc3RTZXJ2aWNlLmdldExvYW5MaXN0V2l0aENvbmRpdGlvbihqc29uVG9QYXJhbXMocGFyYW1zKSwgZnVuY3Rpb24gKHJlcykge1xuICAgIHZhciBpbnZlc3RSYWN0aXZlID0gbmV3IFJhY3RpdmUoe1xuICAgICAgICBlbDogXCIuaW52ZXN0LWxpc3Qtd3JhcHBlclwiLFxuICAgICAgICB0ZW1wbGF0ZTogcmVxdWlyZSgnY2NjL2dsb2JhbC9wYXJ0aWFscy9zaW5nbGVJbnZlc3RMaXN0Lmh0bWwnKSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbGlzdDogcGFyc2VMb2FuTGlzdChyZXMucmVzdWx0cyksXG4gICAgICAgICAgICBSZXBheW1lbnRNZXRob2Q6IGkxOG4uZW51bXMuUmVwYXltZW50TWV0aG9kLCAvLyDov5jmrL7mlrnlvI9cbiAgICAgICAgICAgIHVzZXI6Q0MudXNlclxuICAgICAgICB9XG4gICAgfSk7XG4gICAgaW5pdGFpbEVhc3lQaWVDaGFydCgpO1xuICAgIGluaW5jb251dCgpO1xuICAgIHJlbmRlclBhZ2VyKHJlcyk7XG4gICAgaW52ZXN0UmFjdGl2ZS5vbihcIm1vdXNlb3ZlciBtb3VzZWxlYXZlXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciBob3ZlcmluZyA9IGUubmFtZSA9PT0gXCJtb3VzZW92ZXJcIjtcbiAgICAgICAgdGhpcy5zZXQoZS5rZXlwYXRoICsgXCIuaG92ZXJpbmdcIiwgaG92ZXJpbmcpO1xuICAgIH0pO1xuXHRcbiAgICAkKCcubm8td2FycnktdWwgLm5vLXdhcnJ5JykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKFwic2VsZWN0ZWQgYWN0aXZlXCIpKSB7XG4gICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKFwic2VsZWN0ZWQgYWN0aXZlXCIpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJzZWxlY3RlZCBhY3RpdmVcIik7XG4gICAgICAgICAgICAgdmFyIHByb2R1Y3QgPSAkKHRoaXMpLmRhdGEoJ3Byb2R1Y3QnKTtcbiAgICAgICAgICAgIHBhcmFtcy5jdXJyZW50UGFnZSA9IDE7XG4gICAgICAgICAgICBwYXJhbXMucHJvZHVjdD1wcm9kdWN0O1xuICAgICAgICAgICAgcmVuZGVyKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9KTsgICAgXG4gICAgXG5cbiAgICAkKCcuc0R1cmF0aW9uIGxpJykuY2xpY2soZnVuY3Rpb24oKXtcbiAgICAgICAgaWYgKCEkKHRoaXMpLmhhc0NsYXNzKFwic2VsZWN0VGl0bGVcIikpIHtcbiAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoXCJzX19pcy1zZWxlY3RlZFwiKS5zaWJsaW5ncygpLnJlbW92ZUNsYXNzKFwic19faXMtc2VsZWN0ZWRcIik7XG4gICAgICAgICAgICB2YXIgbWluRHVyYXRpb24gPSAkKHRoaXMpXG4gICAgICAgICAgICAgICAgLmRhdGEoJ21pbi1kdXJhdGlvbicpO1xuICAgICAgICAgICAgdmFyIG1heER1cmF0aW9uID0gJCh0aGlzKVxuICAgICAgICAgICAgICAgIC5kYXRhKCdtYXgtZHVyYXRpb24nKTtcblxuICAgICAgICAgICAgcGFyYW1zLmN1cnJlbnRQYWdlID0gMTtcbiAgICAgICAgICAgIHBhcmFtcy5taW5EdXJhdGlvbiA9IG1pbkR1cmF0aW9uO1xuICAgICAgICAgICAgcGFyYW1zLm1heER1cmF0aW9uID0gbWF4RHVyYXRpb247XG4gICAgICAgICAgICByZW5kZXIocGFyYW1zKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgJCgnLnNTdGF0dXMgbGknKS5jbGljayhmdW5jdGlvbigpe1xuICAgICAgICBpZiAoISQodGhpcykuaGFzQ2xhc3MoXCJzZWxlY3RUaXRsZVwiKSkge1xuICAgICAgICAgICAgJCh0aGlzKS5hZGRDbGFzcyhcInNfX2lzLXNlbGVjdGVkXCIpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoXCJzX19pcy1zZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIHZhciBzdGF0dXMgPSAkKHRoaXMpLmRhdGEoXCJzdGF0dXNcIik7XG4gICAgICAgICAgICBwYXJhbXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICAgICAgcGFyYW1zLmN1cnJlbnRQYWdlID0gMTtcbiAgICAgICAgICAgIHJlbmRlcihwYXJhbXMpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiByZW5kZXIocGFyYW1zKSB7XG4gICAgICAgIEludmVzdExpc3RTZXJ2aWNlLmdldExvYW5MaXN0V2l0aENvbmRpdGlvbihqc29uVG9QYXJhbXMocGFyYW1zKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChcbiAgICAgICAgICAgICAgICByZXMpIHtcbiAgICAgICAgICAgICAgICBpbnZlc3RSYWN0aXZlLnNldCgnbGlzdCcsIFtdKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaW52ZXN0UmFjdGl2ZS5zZXQoJ2xpc3QnLCBwYXJzZUxvYW5MaXN0KHJlcy5yZXN1bHRzKSk7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coaW52ZXN0UmFjdGl2ZS5nZXQoJ2xpc3QnKSk7XG4gICAgICAgICAgICAgICAgICAgIGluaXRhaWxFYXN5UGllQ2hhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaW5pbmNvbnV0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlclBhZ2VyKHJlcywgcGFyYW1zLmN1cnJlbnRQYWdlKTtcbiAgICAgICAgICAgICAgICB9LCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlclBhZ2VyKHJlcywgY3VycmVudCkge1xuICAgICAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgICAgICAgIGN1cnJlbnQgPSAxO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYWdlclJhY3RpdmUgPSBuZXcgUmFjdGl2ZSh7XG4gICAgICAgICAgICBlbDogJyNpbnZlc3QtcGFnZXInLFxuICAgICAgICAgICAgdGVtcGxhdGU6IHJlcXVpcmUoJ2NjYy9pbnZlc3QvcGFydGlhbHMvcGFnZXIuaHRtbCcpLFxuICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgIHRvdGFsUGFnZTogY3JlYXRlTGlzdChyZXMudG90YWxTaXplLCBjdXJyZW50KSxcbiAgICAgICAgICAgICAgICBjdXJyZW50OiBjdXJyZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHBhZ2VyUmFjdGl2ZS5vbigncHJldmlvdXMnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5vcmlnaW5hbC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldCgnY3VycmVudCcpO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnQgPiAxKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCAtPSAxO1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0KCdjdXJyZW50JywgY3VycmVudCk7XG4gICAgICAgICAgICAgICAgcGFyYW1zLmN1cnJlbnRQYWdlID0gY3VycmVudDtcbiAgICAgICAgICAgICAgICByZW5kZXIocGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcGFnZXJSYWN0aXZlLm9uKCdwYWdlJywgZnVuY3Rpb24gKGUsIHBhZ2UpIHtcbiAgICAgICAgICAgIGUub3JpZ2luYWwucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmIChwYWdlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudCA9IHBhZ2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBlLmNvbnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldCgnY3VycmVudCcsIGN1cnJlbnQpO1xuICAgICAgICAgICAgcGFyYW1zLmN1cnJlbnRQYWdlID0gY3VycmVudDtcbiAgICAgICAgICAgIHJlbmRlcihwYXJhbXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgcGFnZXJSYWN0aXZlLm9uKCduZXh0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUub3JpZ2luYWwucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5nZXQoJ2N1cnJlbnQnKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50IDwgdGhpcy5nZXQoJ3RvdGFsUGFnZScpW3RoaXMuZ2V0KCd0b3RhbFBhZ2UnKVxuICAgICAgICAgICAgICAgIC5sZW5ndGggLSAxXSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgKz0gMTtcbiAgICAgICAgICAgICAgICB0aGlzLnNldCgnY3VycmVudCcsIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5jdXJyZW50UGFnZSA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgcmVuZGVyKHBhcmFtcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0KGxlbiwgY3VycmVudCkge1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICB2YXIgaT1wYXJzZUludChsZW4vcGFyYW1zLnBhZ2VTaXplKTtcbiAgICBpZihsZW4lcGFyYW1zLnBhZ2VTaXplPjApe2krKzt9XG4gICAgZm9yKHZhciBtPTA7bTxpO20rKyl7XG4gICAgICAgICBhcnJbbV0gPSAgbSArIDE7XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG59O1xuXG5mdW5jdGlvbiBpbmluY29udXQgKCkge1xuICAgICQoXCIuaW52ZXN0QnRuID4gLmludmVzdGJ0bi10aW1lXCIpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdCA9ICQodGhpcyk7XG4gICAgICAgIGlmKHQuZGF0YShcInN0YXR1c1wiKSA9PT0gJ1NDSEVEVUxFRCcpe1xuICAgICAgICAgICAgdmFyIGlkID0gdC5kYXRhKFwiaWRcIik7ICBcbiAgICAgICAgICAgIHZhciBvcGVuVGltZSA9IHQuZGF0YShcIm9wZW5cIik7ICBcbiAgICAgICAgICAgIHZhciBzZXJ2ZXJEYXRlID0gdC5kYXRhKFwic2VydlwiKTtcbiAgICAgICAgICAgIHZhciBsZWZ0VGltZSA9IHV0aWxzLmNvdW50RG93bi5nZXRDb3VudERvd25UaW1lMihvcGVuVGltZSwgc2VydmVyRGF0ZSk7XG4gICAgICAgICAgICB2YXIgdGV4dERheSA9IGxlZnRUaW1lLmRheSA/IGxlZnRUaW1lLmRheSArJ+WkqScgOiAnJztcbiAgICAgICAgICAgIHZhciBpbnRlcnZhbCA9IHNldEludGVydmFsKChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc2VydmVyRGF0ZSArPSAxMDAwO1xuICAgICAgICAgICAgICAgIHZhciBsZWZ0VGltZSA9IHV0aWxzLmNvdW50RG93bi5nZXRDb3VudERvd25UaW1lMihvcGVuVGltZSwgc2VydmVyRGF0ZSk7XG4gICAgICAgICAgICAgICAgdmFyIHRleHREYXkgPSBsZWZ0VGltZS5kYXkgPyBsZWZ0VGltZS5kYXkgKyflpKknIDogJyc7XG4gICAgICAgICAgICAgICAgaWYoISsobGVmdFRpbWUuZGF5KSAmJiAhKyhsZWZ0VGltZS5ob3VyKSAmJiAhKyhsZWZ0VGltZS5taW4pICYmICErKGxlZnRUaW1lLnNlYykpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG5cdFx0XHRcdFx0dC5wcmV2KCkuaGlkZSgpO1xuICAgICAgICAgICAgICAgICAgICB0LnJlcGxhY2VXaXRoKCc8YSBocmVmPVwiL2xvYW4vJytpZCsnXCIgc3R5bGU9XCJ0ZXh0LWRlY29yYXRpb246bm9uZVwiPjxkaXYgY2xhc3M9XCJpbnZlc3RidG5cIj7nq4vljbPmipXotYQ8L2Rpdj48L2E+Jyk7XG4gICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0Lmh0bWwoJzxzcGFuIGNsYXNzPVwidGV4dFwiIHN0eWxlPVwiY29sb3I6I2M2YzZjNlwiPuWAkuiuoeaXtjxzcGFuIHN0eWxlPVwiY29sb3I6I2ZmNzIwMFwiPicrIHRleHREYXkgKyBsZWZ0VGltZS5ob3VyICsnPC9zcGFuPuaXtjxzcGFuIHN0eWxlPVwiY29sb3I6I2ZmNzIwMFwiPicrIGxlZnRUaW1lLm1pbiArJzwvc3Bhbj7liIY8c3BhbiBzdHlsZT1cImNvbG9yOiNmZjcyMDBcIj4nKyBsZWZ0VGltZS5zZWMgKyc8L3NwYW4+56eSPC9zcGFuPicpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIDEwMDApO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5cblxuXG5cblxuXG5cbmZ1bmN0aW9uIGluaXRhaWxFYXN5UGllQ2hhcnQoKSB7XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyDliJ3lp4vljJbppbznirblm75cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2xkaWUgPSAvbXNpZVxccyooOHw3fDYpLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgICQoXCIuZWFzeS1waWUtY2hhcnRcIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcGVyY2VudGFnZSA9ICQodGhpcykuZGF0YShcInBlcmNlbnRcIik7XG4gICAgICAgICAgICAvLyAxMDAl6L+b5bqm5p2h6aKc6Imy5pi+56S65Li66IOM5pmv6ImyXG4gICAgICAgICAgICB2YXIgY29sb3IgPSBwZXJjZW50YWdlID09PSAxMDAgPyBcIiNmNTgyMjBcIiA6ICcjMDA5YWRhJztcbiAgICAgICAgICAgICQodGhpcykuZWFzeVBpZUNoYXJ0KHtcbiAgICAgICAgICAgICAgICBiYXJDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgdHJhY2tDb2xvcjogJyNkZGQnLFxuICAgICAgICAgICAgICAgIHNjYWxlQ29sb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxpbmVDYXA6ICdidXR0JyxcbiAgICAgICAgICAgICAgICBsaW5lV2lkdGg6IDQsXG4gICAgICAgICAgICAgICAgYW5pbWF0ZTogb2xkaWUgPyBmYWxzZSA6IDEwMDAsXG4gICAgICAgICAgICAgICAgc2l6ZTogNDUsXG4gICAgICAgICAgICAgICAgb25TdGVwOiBmdW5jdGlvbiAoZnJvbSwgdG8sIHBlcmNlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzLmVsKS5maW5kKCcucGVyY2VudCcpLnRleHQoTWF0aC5yb3VuZChwZXJjZW50KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAkKHRoaXMpLmZpbmQoXCJzcGFuLnBlcmNlbnRhZ2VOdW1cIikuaHRtbChwZXJjZW50YWdlK1wiJVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcbn07XG5cbi8vIGJhbmVucuWKqOaViFxuLy8kKFwiLm5vLXdhcnJ5XCIpLm1vdXNlZW50ZXIoZnVuY3Rpb24oKXtcbi8vICAgICQodGhpcykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG4vL30pLm1vdXNlbGVhdmUoZnVuY3Rpb24oKXtcbi8vICAgICQodGhpcykucmVtb3ZlQ2xhc3MoXCJhY3RpdmVcIik7XG4vL30pXG5cbiIsIi8qKlxuICogQGZpbGUg6aaW6aG15pWw5o2u5Lqk5LqS6YC76L6RXG4gKiBAYXV0aG9yIGh1aXAoaHVpLnBlbmdAY3JlZGl0Y2xvdWQuY29tKVxuICovXG5cbid1c2Ugc3RyaWN0JztcbnZhciByZXF1ZXN0ID0gcmVxdWlyZSgnY2Mtc3VwZXJhZ2VudC1wcm9taXNlJyk7XG5cbmV4cG9ydHMuSW52ZXN0TGlzdFNlcnZpY2UgPSB7XG4gICAgZ2V0U3VtbWFyeURhdGE6IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgIHJlcXVlc3RcbiAgICAgICAgICAgIC5nZXQoJy9hcGkvdjIvbG9hbnMvc3VtbWFyeScpXG4gICAgICAgICAgICAuZW5kKClcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICBuZXh0KHJlcy5ib2R5KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0TG9hbkxpc3RXaXRoQ29uZGl0aW9uOiBmdW5jdGlvbiAocGFyYW1zLCBuZXh0KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdFxuICAgICAgICAgICAgICAgIC5nZXQoJy9hcGkvdjIvbG9hbnMvZ2V0TG9hbldpdGhQYWdlPycgKyBwYXJhbXMpXG4gICAgICAgICAgICAgICAgLmVuZCgpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgICAgICBuZXh0KHJlcy5ib2R5KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgbmV4dCh7XG4gICAgICAgICAgICAgICAgdG90YWxTaXplOiAwLFxuICAgICAgICAgICAgICAgIHJlc3VsdHM6IFtdXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0UHJvZHVjdEtleTpmdW5jdGlvbihuZXh0LHBhcmFtcyl7XG4gICAgICAgICByZXF1ZXN0XG4gICAgICAgICAgICAuZ2V0KCcvYXBpL3YyL2xvYW4vZ2V0TG9hblByb2R1Y3QvcHJvZHVjdEtleS8nK3BhcmFtcylcbiAgICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgICAgICAgICAgIG5leHQocmVzLmJvZHkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIFxufTtcblxuZnVuY3Rpb24gcGFyc2VMb2FuTGlzdChsb2Fucykge1xuICAgIHZhciBNYXhPcGVuZWQgPSAzO1xuICAgIHZhciBNYXhTY2hlZHVsZWQgPSAyO1xuICAgIHZhciBNYXhGaW5pc2hlZCA9IDE7XG4gICAgdmFyIGxvYW5MaXN0ID0gW107XG4gICAgaWYgKGxvYW5zLnNjaGVkdWxlZC5sZW5ndGggPD0gTWF4U2NoZWR1bGVkKSB7XG4gICAgICAgIGFkZEl0ZW0obG9hbnMuc2NoZWR1bGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhZGRJdGVtKGxvYW5zLnNjaGVkdWxlZC5zbGljZSgwLCBNYXhTY2hlZHVsZWQpKTtcbiAgICB9XG4gICAgaWYgKGxvYW5zLm9wZW4ubGVuZ3RoIDw9IE1heE9wZW5lZCkge1xuICAgICAgICBhZGRJdGVtKGxvYW5zLm9wZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFkZEl0ZW0obG9hbnMub3Blbi5zbGljZSgwLCBNYXhPcGVuZWQpKTtcbiAgICB9XG4gICAgaWYgKGxvYW5zLmZpbmlzaGVkLmxlbmd0aCA8PSBNYXhGaW5pc2hlZCkge1xuICAgICAgICBhZGRJdGVtKGxvYW5zLmZpbmlzaGVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhZGRJdGVtKGxvYW5zLmZpbmlzaGVkLnNsaWNlKDAsIE1heEZpbmlzaGVkKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkSXRlbShpdGVtcykge1xuICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBsb2FuTGlzdC5wdXNoKGZvcm1hdEl0ZW0oaXRlbXNbaV0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdEl0ZW0oaXRlbSkge1xuICAgICAgICBpdGVtLnJhdGUgPSBpdGVtLnJhdGUgLyAxMDA7XG4gICAgICAgIGlmIChpdGVtLmFtb3VudCA+IDEwMDAwKSB7XG4gICAgICAgICAgICBpdGVtLmFtb3VudFVuaXQgPSAn5LiHJztcbiAgICAgICAgICAgIGl0ZW0uYW1vdW50ID0gKGl0ZW0uYW1vdW50IC8gMTAwMDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS5hbW91bnRVbml0ID0gJ+WFgyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICAgIHJldHVybiBsb2FuTGlzdDtcbn0iLCJtb2R1bGUuZXhwb3J0cyA9ICd7eyNpZiB0b3RhbFBhZ2UubGVuZ3RoIH19XFxuPHVsIGNsYXNzPVwiaW52ZXN0LXBhZ2VyXCI+XFxuICAgIDxsaSBjbGFzcz1cImluZGV4LXBhZ2VcIiBvbi1jbGljaz1cInBhZ2U6MVwiPlxcbiAgICAgICAgPGEgaHJlZj1cIlwiID7pppbpobU8L2E+XFxuICAgIDwvbGk+XFxuICAgIDxsaSBjbGFzcz1cInBhZ2UtbGFzdFwiIG9uLWNsaWNrPVwicHJldmlvdXNcIj48YSBocmVmPVwiI1wiID7kuIrkuIDpobU8L2E+XFxuICAgIDwvbGk+XFxuICAgIHt7I3RvdGFsUGFnZX19XFxuICAgIDxsaSBjbGFzcz1cImN1cnJlbnQtcGFnZS1ub3cge3sjaWYgY3VycmVudCA9PSB0b3RhbFBhZ2VbQGtleV19fSBjdXJyZW50LXBhZ2Uge3svaWZ9fVwiIG9uLWNsaWNrPVwicGFnZTp7e3RoaXN9fVwiPjxhIGhyZWY9XCIjXCIgPnt7dG90YWxQYWdlW0BrZXldfX08L2E+XFxuICAgIDwvbGk+XFxuICAgIHt7L3RvdGFsUGFnZX19XFxuICAgIDxsaSBjbGFzcz1cInBhZ2UtbmV4dFwiICBvbi1jbGljaz1cIm5leHRcIj48YSBocmVmPVwiI1wiPuS4i+S4gOmhtTwvYT5cXG4gICAgPC9saT5cXG48L3VsPlxcbnt7L2lmfX1cXG4nOyIsIm1vZHVsZS5leHBvcnRzID0ge1xuICAnemgtY24nOiByZXF1aXJlKCcuL3poLWNuJylcbn1cbiIsIm1vZHVsZS5leHBvcnRzPXtcbiAgXCJlbnVtc1wiOiB7XG4gICAgXCJGdW5kUmVjb3JkVHlwZVwiOiB7XG4gICAgICBcIklOVkVTVFwiOiBcIuaKleagh1wiLFxuICAgICAgXCJXSVRIRFJBV1wiOiBcIuWPlueOsFwiLFxuICAgICAgXCJERVBPU0lUXCI6IFwi5YWF5YC8XCIsXG4gICAgICBcIkxPQU5cIjogXCLmlL7mrL5cIixcbiAgICAgIFwiTE9BTl9SRVBBWVwiOiBcIui0t+asvui/mOasvlwiLFxuICAgICAgXCJESVNCVVJTRVwiOiBcIuWeq+S7mOi/mOasvlwiLFxuICAgICAgXCJJTlZFU1RfUkVQQVlcIjogXCLmipXotYTov5jmrL5cIixcbiAgICAgIFwiQ1JFRElUX0FTU0lHTlwiOiBcIuWAuuadg+i9rOiuqVwiLFxuICAgICAgXCJUUkFOU0ZFUlwiOiBcIui9rOi0puaJo+asvlwiLFxuICAgICAgXCJSRVdBUkRfUkVHSVNURVJcIjogXCLms6jlhozlpZblirFcIixcbiAgICAgIFwiUkVXQVJEX0lOVkVTVFwiOiBcIuaKleagh+WlluWKsVwiLFxuICAgICAgXCJSRVdBUkRfREVQT1NJVFwiOiBcIuWFheWAvOWlluWKsVwiLFxuICAgICAgXCJGRUVfV0lUSERSQVdcIjogXCLmj5DnjrDmiYvnu63otLlcIixcbiAgICAgIFwiRkVFX0FVVEhFTlRJQ0FURVwiOiBcIui6q+S7vemqjOivgeaJi+e7rei0uVwiLFxuICAgICAgXCJGRUVfSU5WRVNUX0lOVEVSRVNUXCI6IFwi5Zue5qy+5Yip5oGv566h55CG6LS5XCIsXG4gICAgICBcIkZFRV9MT0FOX1NFUlZJQ0VcIjogXCLlgJ/mrL7mnI3liqHotLlcIixcbiAgICAgIFwiRkVFX0xPQU5fTUFOQUdFXCI6IFwi5YCf5qy+566h55CG6LS5XCIsXG4gICAgICBcIkZFRV9MT0FOX0lOVEVSRVNUXCI6IFwi6L+Y5qy+5Yip5oGv566h55CG6LS5XCIsXG4gICAgICBcIkZFRV9MT0FOX1ZJU0lUXCI6IFwi5a6e5Zyw6ICD5a+f6LS5XCIsXG4gICAgICBcIkZFRV9MT0FOX0dVQVJBTlRFRVwiOiBcIuaLheS/nei0uVwiLFxuICAgICAgXCJGRUVfTE9BTl9SSVNLXCI6IFwi6aOO6Zmp566h55CG6LS5XCIsXG4gICAgICBcIkZFRV9MT0FOX09WRVJEVUVcIjogXCLpgL7mnJ/nrqHnkIbotLlcIixcbiAgICAgIFwiRkVFX0xPQU5fUEVOQUxUWVwiOiBcIumAvuacn+e9muaBryjnu5nllYbmiLcpXCIsXG4gICAgICBcIkZFRV9MT0FOX1BFTkFMVFlfSU5WRVNUXCI6IFwi6YC+5pyf572a5oGvKOe7meaKlei1hOS6uilcIixcbiAgICAgIFwiRkVFX0RFUE9TSVRcIjogXCLlhYXlgLzmiYvnu63otLlcIixcbiAgICAgIFwiRkVFX0FEVkFOQ0VfUkVQQVlcIjogXCLmj5DliY3ov5jmrL7ov53nuqbph5Eo57uZ5ZWG5oi3KVwiLFxuICAgICAgXCJGRUVfQURWQU5DRV9SRVBBWV9JTlZFU1RcIjogXCLmj5DliY3ov5jmrL7ov53nuqbph5Eo57uZ5oqV6LWE5Lq6KVwiLFxuICAgICAgXCJGU1NcIjogXCLnlJ/liKnlrp1cIlxuICAgIH0sXG4gICAgXCJGdW5kUmVjb3JkT3BlcmF0aW9uXCI6IHtcbiAgICAgIFwiRlJFRVpFXCI6IFwi5Ya757uTXCIsXG4gICAgICBcIlJFTEVBU0VcIjogXCLop6PlhrtcIixcbiAgICAgIFwiSU5cIjogXCLotYTph5HovazlhaVcIixcbiAgICAgIFwiT1VUXCI6IFwi6LWE6YeR6L2s5Ye6XCJcbiAgICB9LFxuICAgIFwiRnVuZFJlY29yZFN0YXR1c1wiOiB7XG4gICAgICBcIklOSVRJQUxJWkVEXCI6IFwi5Yid5aeLXCIsXG4gICAgICBcIlBST0NFU1NJTkdcIjogXCLlpITnkIbkuK1cIixcbiAgICAgIFwiQVVESVRJTkdcIjogXCLlrqHmoLjkuK1cIixcbiAgICAgIFwiU1VDQ0VTU0ZVTFwiOiBcIuaIkOWKn1wiLFxuICAgICAgXCJGQUlMRURcIjogXCLlpLHotKVcIixcbiAgICAgIFwiUkVKRUNURURcIjogXCLmi5Lnu51cIixcbiAgICAgIFwiQ0FOQ0VMRURcIjogXCLlj5bmtohcIlxuICAgIH0sXG4gICAgXCJNYXJpdGFsU3RhdHVzXCI6IHtcbiAgICAgIFwiTUFSUklFRFwiOiBcIuW3suWpmlwiLFxuICAgICAgXCJTSU5HTEVcIjogXCLmnKrlqZpcIixcbiAgICAgIFwiRElWT1JDRURcIjogXCLnprvlvIJcIixcbiAgICAgIFwiV0lET1dFRFwiOiBcIuS4p+WBtlwiXG4gICAgfSxcbiAgICBcIkVkdWNhdGlvbkxldmVsXCI6IHtcbiAgICAgIFwiSElHSFNDSE9PTFwiOiBcIumrmOS4reWPiuS7peS4i1wiLFxuICAgICAgXCJURUNITklDQUxTQ0hPT0xcIjogXCLkuK3kuJNcIixcbiAgICAgIFwiSlVOSU9SQ09MTEVHRVwiOiBcIuWkp+S4k1wiLFxuICAgICAgXCJVTkRFUkdSQURVQVRFXCI6IFwi5pys56eRXCIsXG4gICAgICBcIk1BU1RFUlwiOiBcIuehleWjq1wiLFxuICAgICAgXCJET0NUT1JcIjogXCLljZrlo6tcIlxuICAgIH0sXG4gICAgXCJDYXJlZXJTdGF0dXNcIjoge1xuICAgICAgXCJFTVBMT1lFRVwiOiBcIuaZrumAmuWRmOW3pVwiLFxuICAgICAgXCJNQU5BR0VSXCI6IFwi566h55CG5Lq65ZGYXCIsXG4gICAgICBcIlNIQVJFSE9MREVSXCI6IFwi6IKh5LicXCIsXG4gICAgICBcIlBSSVZBVEVfRU5UUkVQUkVORVVSXCI6IFwi56eB6JCl5LyB5Lia5Li7XCIsXG4gICAgICBcIk9USEVSXCI6IFwi5YW25LuWXCJcbiAgICB9LFxuICAgIFwiQ29tcGFueVR5cGVcIjoge1xuICAgICAgXCJHT1ZFUk5NRU5UX09GRklDRVNcIjogXCLlm73lrrblj4rlnLDmlrnmlL/lupzooYzmlL/mnLrmnoRcIixcbiAgICAgIFwiUFVCTElDX0lOU1RJVFVUSU9OXCI6IFwi5LqL5Lia5Y2V5L2NXCIsXG4gICAgICBcIkVEVUNBVElPTl9SRVNFQVJDSF9JTlNUSVRVVElPTlwiOiBcIuWtpuagoeWPiuenkeeglOacuuaehFwiLFxuICAgICAgXCJTVEFURU9XTkVEX0tFWV9FTlRFUlBSSVNFU1wiOiBcIuWkruS8gSjljIXmi6zkuIvnuqfljZXkvY0pXCIsXG4gICAgICBcIlNUQVRFT1dORURfRU5URVJQUklTRVNcIjogXCLkuIDoiKzlm73kvIEo5YyF5ous5LiL57qn5Y2V5L2NKVwiLFxuICAgICAgXCJPVkVSU0VBU19GVU5ERURfRU5URVJQUklTRVNcIjogXCLlpJbotYTkvIHkuJpcIixcbiAgICAgIFwiVEFJV0FOX0hPTkdLT05HX01BQ0FVXCI6IFwi5Y+w5riv5r6z5LyB5LiaXCIsXG4gICAgICBcIkpPSU5UX1ZFTlRVUkVcIjogXCLlkIjotYTkvIHkuJpcIixcbiAgICAgIFwiUFJJVkFURV9FTlRFUlBSSVNFU1wiOiBcIuawkeiQpeS8geS4mlwiLFxuICAgICAgXCJTRUxGX0VNUExPWUVEXCI6IFwi5Liq5L2T57uP6JClXCIsXG4gICAgICBcIk9USEVSXCI6IFwi5YW25LuWXCJcbiAgICB9LFxuICAgIFwiQ29tcGFueUluZHVzdHJ5XCI6IHtcbiAgICAgIFwiRVhDQVZBVEVcIjogXCLph4fmjpjkuJpcIixcbiAgICAgIFwiR0VPX1NVUlZFWVwiOiBcIuWcsOi0qOWLmOafpeS4mlwiLFxuICAgICAgXCJSRVNFQVJDSFwiOiBcIuenkeWtpueglOepti/mioDmnK/mnI3liqFcIixcbiAgICAgIFwiSVJSSUdBVElPTl9FTlZJUk9OTUVOVFwiOiBcIuawtOWIqS/njq/looMv5YWs5YWx6K6+5pa9566h55CGXCIsXG4gICAgICBcIlJFTlRBTFwiOiBcIuenn+i1gS/llYbliqHmnI3liqFcIixcbiAgICAgIFwiTUlMSVRBUllcIjogXCLlhpvpmJ8v5q2m6K2mXCIsXG4gICAgICBcIklOVEVSTkFUSU9OQUxcIjogXCLlm73pmYXnu4Tnu4dcIixcbiAgICAgIFwiTUFOVUZBQ1RVUkVcIjogXCLliLbpgKDkuJpcIixcbiAgICAgIFwiSVRcIjogXCLnlLXkv6Ev6YCa5L+hL+iuoeeul+acui/ova/ku7Yv5LqS6IGU572RXCIsXG4gICAgICBcIkdPVkVSTk1FTlRcIjogXCLlm73lrrbmnLrlhbMv5pS/5YWa5py65YWzL+ekvuS8muWbouS9k1wiLFxuICAgICAgXCJNRURJQV9BRFZFUlRJU0VNRU5UXCI6IFwi5aqS5L2TL+W5v+WRii/lub/mkq0v55S15b2xL+eUteinhlwiLFxuICAgICAgXCJSRVRBSUxfV0hPTEVTQUxFXCI6IFwi6Zu25ZSuL+aJueWPkVwiLFxuICAgICAgXCJFRFVDQVRJT05fVFJBSU5JTkdcIjogXCLmlZnogrIv5Z+56K6tIFwiLFxuICAgICAgXCJQVUJMSUNfU0VSVklDRVNcIjogXCLnpL7kvJrmnI3liqHkuJpcIixcbiAgICAgIFwiRklOQU5DRV9MQVdcIjogXCLph5Hono0v5L+d6ZmpL+azleW+i1wiLFxuICAgICAgXCJUUkFOU1BPUlRBVElPTlwiOiBcIuS6pOmAmui/kOi+ky/ku5Plgqgv6YKu5pS/XCIsXG4gICAgICBcIlJFQUxfRVNUQVRFXCI6IFwi5oi/5Zyw5Lqn5LiaXCIsXG4gICAgICBcIkVORVJHWVwiOiBcIuawtC/nlLUv54WkL+awlC/og73mupDnlJ/kuqfkvpvlupRcIixcbiAgICAgIFwiQ0FURVJJTkdfSE9URUxcIjogXCLkvY/lrr8v6aSQ6aWuXCIsXG4gICAgICBcIk1FRElDQUxfSEVBTFRIX0NBUkVcIjogXCLljLvnlpcv5Y2r55SfL+S/neWBpVwiLFxuICAgICAgXCJDT05TVFJVQ1RJT05fRU5HSU5FUlJJTkdcIjogXCLlu7rnrZEv5bel56iLXCIsXG4gICAgICBcIkFHUklDVUxUVVJFXCI6IFwi5YacL+aely/niacv5riUXCIsXG4gICAgICBcIkVOVEVSVEFJTUVOVFwiOiBcIuaWh+WMli/lqLHkuZDmnI3liqHkuJpcIixcbiAgICAgIFwiU1BPUlRfQVJUXCI6IFwi5L2T6IKyL+iJuuacr1wiLFxuICAgICAgXCJVVElMSVRZXCI6IFwi56S+5Lya56aP5YipL+WFrOebiuS6i+S4mlwiLFxuICAgICAgXCJPVEhFUlwiOiBcIuWFtuS7llwiXG4gICAgfSxcbiAgICBcIkNvbXBhbnlTaXplXCI6IHtcbiAgICAgIFwiU0laRV9CRUxPV18xMFwiOiBcIjEw5Lq65Lul5LiLXCIsXG4gICAgICBcIlNJWkVfMTFfMTAwXCI6IFwiMTHvuaMxMDDkurpcIixcbiAgICAgIFwiU0laRV8xMDFfNTAwXCI6IFwiMTAx77mjNTAw5Lq6XCIsXG4gICAgICBcIlNJWkVfNTAxXzIwMDBcIjogXCI1MDEtMjAwMOS6ulwiLFxuICAgICAgXCJTSVpFXzIwMDFfMTAwMDBcIjogXCIyMDAxLTEwMDAw5Lq6XCIsXG4gICAgICBcIlNJWkVfMTAwMDFfMTAwMDAwXCI6IFwiMTAwMDDkurrku6XkuIpcIlxuICAgIH0sXG4gICAgXCJNb250aGx5U2FsYXJ5XCI6IHtcbiAgICAgIFwiU0FMQVJZX0JFTE9XXzIwMDBcIjogXCIyMDAw5Lul5LiLXCIsXG4gICAgICBcIlNBTEFSWV8yMDAxXzUwMDAwXCI6IFwiMjAwMe+5ozUwMDBcIixcbiAgICAgIFwiU0FMQVJZXzUwMDFfMTAwMDBcIjogXCI1MDAx77mjMTAwMDBcIixcbiAgICAgIFwiU0FMQVJZXzEwMDAxXzIwMDAwXCI6IFwiMTAwMDHvuaMyMDAwMFwiLFxuICAgICAgXCJTQUxBUllfMjAwMDFfNTAwMDBcIjogXCIyMDAwMe+5ozUwMDAwXCIsXG4gICAgICBcIlNBTEFSWV9BQk9WRV81MDAwMVwiOiBcIjUwMDAx5Lul5LiKXCJcbiAgICB9LFxuICAgIFwiWWVhck9mU2VydmljZVwiOiB7XG4gICAgICBcIllFQVJfQkVMT1dfMVwiOiBcIjHlubTku6XkuItcIixcbiAgICAgIFwiWUVBUl8xXzNcIjogXCIxLTPlubQo5ZCrKVwiLFxuICAgICAgXCJZRUFSXzNfNVwiOiBcIjMtNeW5tCjlkKspXCIsXG4gICAgICBcIllFQVJfNV8xMFwiOiBcIjUtMTDlubQo5ZCrKVwiLFxuICAgICAgXCJZRUFSXzEwXzIwXCI6IFwiMTAtMjDlubQo5ZCrKVwiLFxuICAgICAgXCJZRUFSX0FCT1ZFXzIwXCI6IFwiMjDlubTku6XkuIpcIlxuICAgIH0sXG4gICAgXCJFdGhuaWNHcm91cFwiOiB7XG4gICAgICBcIkhhblwiOiBcIuaxieaXj1wiLFxuICAgICAgXCJaaHVhbmdcIjogXCLlo67ml49cIixcbiAgICAgIFwiTWFuY2h1XCI6IFwi5ruh5pePXCIsXG4gICAgICBcIkh1aVwiOiBcIuWbnuaXj1wiLFxuICAgICAgXCJNaWFvXCI6IFwi6IuX5pePXCIsXG4gICAgICBcIlVpZ2h1clwiOiBcIue7tOWQvuWwlOaXj1wiLFxuICAgICAgXCJZaVwiOiBcIuW9neaXj1wiLFxuICAgICAgXCJUdWppYVwiOiBcIuWcn+WutuaXj1wiLFxuICAgICAgXCJNb25nb2xcIjogXCLokpnlj6Tml49cIixcbiAgICAgIFwiVGliZXRhblwiOiBcIuiXj+aXj1wiLFxuICAgICAgXCJCdXlpXCI6IFwi5biD5L6d5pePXCIsXG4gICAgICBcIkRvbmdcIjogXCLkvpfml49cIixcbiAgICAgIFwiWWFvXCI6IFwi55G25pePXCIsXG4gICAgICBcIktvcmVhblwiOiBcIuacnemynOaXj1wiLFxuICAgICAgXCJCYWlcIjogXCLnmb3ml49cIixcbiAgICAgIFwiSGFuaVwiOiBcIuWTiOWwvOaXj1wiLFxuICAgICAgXCJMaVwiOiBcIum7juaXj1wiLFxuICAgICAgXCJLYXpha2hcIjogXCLlk4jokKjlhYvml49cIixcbiAgICAgIFwiRGFpXCI6IFwi5YKj5pePXCIsXG4gICAgICBcIlNoZVwiOiBcIueVsuaXj1wiLFxuICAgICAgXCJMaXN1XCI6IFwi5YOz5YOz5pePXCIsXG4gICAgICBcIkdlbGFvXCI6IFwi5Luh5L2s5pePXCIsXG4gICAgICBcIkxhaHVcIjogXCLmi4nnpZzml49cIixcbiAgICAgIFwiRG9uZ3hpYW5nXCI6IFwi5Lic5Lmh5pePXCIsXG4gICAgICBcIldhXCI6IFwi5L2k5pePXCIsXG4gICAgICBcIlNodWlcIjogXCLmsLTml49cIixcbiAgICAgIFwiTmF4aVwiOiBcIue6s+ilv+aXj1wiLFxuICAgICAgXCJRaWFuZ1wiOiBcIue+jOaXj1wiLFxuICAgICAgXCJEdVwiOiBcIuWcn+aXj1wiLFxuICAgICAgXCJYaWJlXCI6IFwi6ZSh5Lyv5pePXCIsXG4gICAgICBcIk11bGFtXCI6IFwi5Lur5L2s5pePXCIsXG4gICAgICBcIktpcmdoaXpcIjogXCLmn6/lsJTlhYvlrZzml49cIixcbiAgICAgIFwiRGF1clwiOiBcIui+vuaWoeWwlOaXj1wiLFxuICAgICAgXCJKaW5ncG9cIjogXCLmma/poofml49cIixcbiAgICAgIFwiU2FsYXJcIjogXCLmkpLmi4nml49cIixcbiAgICAgIFwiQmxhbmdcIjogXCLluIPmnJfml49cIixcbiAgICAgIFwiTWFvbmFuXCI6IFwi5q+b5Y2X5pePXCIsXG4gICAgICBcIlRhamlrXCI6IFwi5aGU5ZCJ5YWL5pePXCIsXG4gICAgICBcIlB1bWlcIjogXCLmma7nsbPml49cIixcbiAgICAgIFwiQWNoYW5nXCI6IFwi6Zi/5piM5pePXCIsXG4gICAgICBcIk51XCI6IFwi5oCS5pePXCIsXG4gICAgICBcIkV2ZW5raVwiOiBcIumEgua4qeWFi+aXj1wiLFxuICAgICAgXCJHaW5cIjogXCLkuqzml49cIixcbiAgICAgIFwiSmlub1wiOiBcIuWfuuivuuaXj1wiLFxuICAgICAgXCJEZWFuZ1wiOiBcIuW+t+aYguaXj1wiLFxuICAgICAgXCJVemJla1wiOiBcIuS5jOWtnOWIq+WFi+aXj1wiLFxuICAgICAgXCJSdXNzaWFuXCI6IFwi5L+E572X5pav5pePXCIsXG4gICAgICBcIll1Z3VyXCI6IFwi6KOV5Zu65pePXCIsXG4gICAgICBcIkJvbmFuXCI6IFwi5L+d5a6J5pePXCIsXG4gICAgICBcIk1lbmJhXCI6IFwi6Zeo5be05pePXCIsXG4gICAgICBcIk9yb3FpblwiOiBcIumEguS8puaYpeaXj1wiLFxuICAgICAgXCJEcnVuZ1wiOiBcIueLrOm+meaXj1wiLFxuICAgICAgXCJUYXRhclwiOiBcIuWhlOWhlOWwlOaXj1wiLFxuICAgICAgXCJIZXpoZW5cIjogXCLotavlk7Lml49cIixcbiAgICAgIFwiTGhvYmFcIjogXCLnj57lt7Tml49cIixcbiAgICAgIFwiR2Fvc2hhblwiOiBcIumrmOWxseaXj1wiXG4gICAgfSxcbiAgICBcIk1hcml0YWxTdGF0dXNcIjoge1xuICAgICAgXCJNQVJSSUVEXCI6IFwi5bey5amaXCIsXG4gICAgICBcIlNJTkdMRVwiOiBcIuacquWpmlwiLFxuICAgICAgXCJESVZPUkNFRFwiOiBcIuemu+W8glwiLFxuICAgICAgXCJXSURPV0VEXCI6IFwi5Lin5YG2XCJcbiAgICB9LFxuICAgIFwiQ2VydGlmaWNhdGVUeXBlXCI6IHtcbiAgICAgIFwiSURcIjogXCLouqvku73orqTor4FcIixcbiAgICAgIFwiQ1JFRElUUkVQT1JUXCI6IFwi5L+h55So5oql5ZGKXCIsXG4gICAgICBcIkZBTUlMWVwiOiBcIuWutuW6reaDheWGteiupOivgVwiLFxuICAgICAgXCJFRFVDQVRJT05cIjogXCLlrabljoborqTor4FcIixcbiAgICAgIFwiSU5DT01FXCI6IFwi5pS25YWl6K6k6K+BXCIsXG4gICAgICBcIkNBUkVFUlwiOiBcIuW3peS9nOiupOivgVwiLFxuICAgICAgXCJSRUFMRVNUQVRFXCI6IFwi5oi/5Lqn6K6k6K+BXCIsXG4gICAgICBcIkxPQ0FUSU9OXCI6IFwi5bGF5L2P5Zyw6K6k6K+BXCIsXG4gICAgICBcIlZFSElDTEVcIjogXCLotK3ovaborqTor4FcIixcbiAgICAgIFwiTE9BTlBVUlBPU0VcIjogXCLlgJ/mrL7nlKjpgJTorqTor4FcIixcbiAgICAgIFwiR1VBUkFOVEVFXCI6IFwi5ouF5L+d6K6k6K+BXCIsXG4gICAgICBcIk9USEVSU1wiOiBcIuWFtuS7luiupOivgVwiXG4gICAgfSxcbiAgICBcIkNlcnRpZmljYXRlU3RhdHVzXCI6IHtcbiAgICAgIFwiVU5DSEVDS0VEXCI6IFwi5pyq5a6h5qC4XCIsXG4gICAgICBcIkNIRUNLRURcIjogXCLlrqHmoLjpgJrov4dcIixcbiAgICAgIFwiREVOSUVEXCI6IFwi5a6h5qC45pyq6YCa6L+HXCIsXG4gICAgICBcIkFSQ0hJVkVEXCI6IFwi5bey5a2Y5qGjXCIsXG4gICAgICBcIkRFTEVURURcIjogXCLlt7LliKrpmaRcIlxuICAgIH0sXG4gICAgXCJQcm9vZlR5cGVcIjoge1xuICAgICAgXCJJRF9DQVJEXCI6IFtcIui6q+S7veivgVwiLCBcIklEXCJdLFxuICAgICAgXCJJRF9IVUtPVVwiOiBbXCLmiLflj6PmnKxcIiwgXCJJRFwiXSxcbiAgICAgIFwiSURfU09DSUFMX1NFQ1VSSVRZXCI6IFtcIuekvuS/nVwiLCBcIklEXCJdLFxuICAgICAgXCJJRF9EUklWRV9MSUNFTkNFXCI6IFtcIumpvueFp1wiLCBcIklEXCJdLFxuICAgICAgXCJJRF9NQVJJVEFMXCI6IFtcIue7k+WpmuivgVwiLCBcIklEXCJdLFxuICAgICAgXCJJRF9ESVZPUlNFXCI6IFtcIuemu+WpmuivgVwiLCBcIklEXCJdLFxuICAgICAgXCJJRF9WSURFT1wiOiBbXCLmnKzkurrop4bpopFcIiwgXCJJRFwiXSxcbiAgICAgIFwiSURfT1RIRVJcIjogW1wi5YW25LuW5Liq5Lq66Lqr5Lu96K+B5piOXCIsIFwiSURcIl0sXG4gICAgICBcIkNBUkVFUl9MQUJPVVJfQ09OVFJBQ1RcIjogW1wi5Yqz5Yqo5ZCI5ZCMXCIsIFwiQ0FSRUVSXCJdLFxuICAgICAgXCJDQVJFRVJfTEFCT1VSX0NFUlRJRklDQVRFXCI6IFtcIuaKgOacr+iBjOensOWPiuaKgOiDveiupOivgVwiLCBcIkNBUkVFUlwiXSxcbiAgICAgIFwiQ0FSRUVSX0JVU0lORVNTX0xJQ0VOQ0VcIjogW1wi6JCl5Lia5omn54WnXCIsIFwiQ0FSRUVSXCJdLFxuICAgICAgXCJDQVJFRVJfVEFYX1JFR0lTVFJBVElPTlwiOiBbXCLnqI7liqHnmbvorrDor4FcIiwgXCJDQVJFRVJcIl0sXG4gICAgICBcIkNBUkVFUl9PUkdBTklaQVRJT05fUkVHSVNUUkFUSU9OXCI6IFtcIue7hOe7h+acuuaehOS7o+eggeivgVwiLCBcIkNBUkVFUlwiXSxcbiAgICAgIFwiQ0FSRUVSX1NBTklUQVJZX0xJQ0VOQ0VcIjogW1wi5Y2r55Sf6K645Y+v6K+BXCIsIFwiQ0FSRUVSXCJdLFxuICAgICAgXCJDQVJFRVJfQlVTSU5FU1NfQ09OVFJBQ1RcIjogW1wi57uP6JCl55u45YWz5ZCI5ZCM5Y+K5ZCI5L2c5Y2P6K6uXCIsIFwiQ0FSRUVSXCJdLFxuICAgICAgXCJDQVJFRVJfQlVTSU5FU1NfQ0VSVElGSUNBVEVcIjogW1wi57uP6JCl55u45YWz6K645Y+v6K+BXCIsIFwiQ0FSRUVSXCJdLFxuICAgICAgXCJDQVJFRVJfQlVTSU5FU1NfUExBQ0VcIjogW1wi57uP6JCl5oiW5pa95bel5Zy65omAXCIsIFwiQ0FSRUVSXCJdLFxuICAgICAgXCJDQVJFRVJfQ09SUF9DT1ZFUlwiOiBbXCLkvIHkuJrlpKflm75cIiwgXCJDQVJFRVJcIl0sXG4gICAgICBcIkNBUkVFUl9DT1JQX0xPR09cIjogW1wi5LyB5LiaTG9nb1wiLCBcIkNBUkVFUlwiXSxcbiAgICAgIFwiQ0FSRUVSX0NPUlBfSUNPTlwiOiBbXCLkvIHkuJpJY29uXCIsIFwiQ0FSRUVSXCJdLFxuICAgICAgXCJDQVJFRVJfQ09SUF9DT01NSVRNRU5UX0xFVFRFUlwiOiBbXCLkvIHkuJrmib/or7rlh71cIiwgXCJDQVJFRVJcIl0sXG4gICAgICBcIkNBUkVFUl9PVEhFUlwiOiBbXCLlhbbku5blt6XkvZznm7jlhbPor4HmmI5cIiwgXCJDQVJFRVJcIl0sXG4gICAgICBcIklOQ09NRV9CQU5LQUNDT1VOVFwiOiBbXCLpk7booYzmtYHmsLRcIiwgXCJJTkNPTUVcIl0sXG4gICAgICBcIklOQ09NRV9TQUxBUllcIjogW1wi5bel6LWE6K+B5piOXCIsIFwiSU5DT01FXCJdLFxuICAgICAgXCJJTkNPTUVfT1RIRVJcIjogW1wi5YW25LuW5pS25YWl6K+B5piOXCIsIFwiSU5DT01FXCJdLFxuICAgICAgXCJSRV9IT1VTRV9QUk9QRVJUWVwiOiBbXCLkvY/miL/mnYPor4HmiJblkIjlkIxcIiwgXCJSRUFMRVNUQVRFXCJdLFxuICAgICAgXCJSRV9IT1VTRV9QSUNUVVJFXCI6IFtcIuS9j+aIv+eFp+eJh1wiLCBcIlJFQUxFU1RBVEVcIl0sXG4gICAgICBcIlJFX0xBTkRfUFJPUEVSVFlcIjogW1wi5Zyf5Zyw5p2D6K+B5oiW5ZCI5ZCMXCIsIFwiUkVBTEVTVEFURVwiXSxcbiAgICAgIFwiUkVfTEFORF9QSUNUVVJFXCI6IFtcIuWcn+WcsOeFp+eJh1wiLCBcIlJFQUxFU1RBVEVcIl0sXG4gICAgICBcIlJFX0ZBQ1RPUllfUFJPUEVSVFlcIjogW1wi5Y6C5oi/5LuT5bqT5p2D6K+B5oiW5ZCI5ZCMXCIsIFwiUkVBTEVTVEFURVwiXSxcbiAgICAgIFwiUkVfRkFDVE9SWV9QSUNUVVJFXCI6IFtcIuWOguaIv+S7k+W6k+eFp+eJh1wiLCBcIlJFQUxFU1RBVEVcIl0sXG4gICAgICBcIlJGX09USEVSXCI6IFtcIuWFtuS7luaIv+S6p+ebuOWFs+ivgeaYjlwiLCBcIlJFQUxFU1RBVEVcIl0sXG4gICAgICBcIlZFSElDTEVfTElDRU5DRVwiOiBbXCLooYzpqbbor4FcIiwgXCJWRUhJQ0xFXCJdLFxuICAgICAgXCJWRUhJQ0xFX1BST1BFUlRZXCI6IFtcIui9pui+huadg+ivgeaIluWQiOWQjOWPkeelqFwiLCBcIlZFSElDTEVcIl0sXG4gICAgICBcIlZFSElDTEVfUExBVEVcIjogW1wi6L2m54mM5Y+3XCIsIFwiVkVISUNMRVwiXSxcbiAgICAgIFwiVkVISUNMRV9QSUNUVVJFXCI6IFtcIui9pui+hueFp+eJh1wiLCBcIlZFSElDTEVcIl0sXG4gICAgICBcIlZFSElDTEVfT1RIRVJcIjogW1wi5YW25LuW6L2m6L6G55u45YWz6K+B5piOXCIsIFwiVkVISUNMRVwiXSxcbiAgICAgIFwiR1VBUkFOVEVFX0lEXCI6IFtcIuWAn+asvuaLheS/neS6uui6q+S7vVwiLCBcIkdVQVJBTlRFRVwiXSxcbiAgICAgIFwiR1VBUkFOVEVFX1JFQUxFU1RBVEVcIjogW1wi5YCf5qy+5ouF5L+d5Lq65oi/5LqnXCIsIFwiR1VBUkFOVEVFXCJdLFxuICAgICAgXCJHVUFSQU5URUVfQ09OVFJBQ1RcIjogW1wi5YCf5qy+5ouF5L+d5ZCI5ZCM5oiW5paH5Lu2XCIsIFwiR1VBUkFOVEVFXCJdLFxuICAgICAgXCJHVUFSQU5URUVfT1RIRVJcIjogW1wi5YW25LuW5YCf5qy+5ouF5L+d55u45YWz6K+B5piOXCIsIFwiR1VBUkFOVEVFXCJdLFxuICAgICAgXCJGQUNUT1JJTkdfSElTVE9SWVwiOiBbXCLljoblj7LkuqTmmJNcIiwgXCJGQUNUT1JJTkdcIl0sXG4gICAgICBcIkZBQ1RPUklOR19QUk9KRUNUXCI6IFtcIuS/neeQhumhueebrlwiLCBcIkZBQ1RPUklOR1wiXSxcbiAgICAgIFwiRkFDVE9SSU5HX0FOVElcIjogW1wi5Y+N5L+d55CG5o6q5pa9XCIsIFwiRkFDVE9SSU5HXCJdLFxuICAgICAgXCJGQUNUT1JJTkdfRklOQU5DRV9DT1JQXCI6IFtcIuiejei1hOS8geS4mlwiLCBcIkZBQ1RPUklOR1wiXSxcbiAgICAgIFwiQ1JFRElUUkVQT1JUXCI6IFtcIuS/oeeUqOaKpeWRilwiLCBcIkNSRURJVFJFUE9SVFwiXSxcbiAgICAgIFwiTE9BTlBVUlBPU0VcIjogW1wi6LS35qy+55So6YCUXCIsIFwiTE9BTlBVUlBPU0VcIl0sXG4gICAgICBcIkZBTUlMWVwiOiBbXCLlrrbluq3mg4XlhrVcIiwgXCJGQU1JTFlcIl0sXG4gICAgICBcIkVEVUNBVElPTlwiOiBbXCLlrabljoZcIiwgXCJFRFVDQVRJT05cIl0sXG4gICAgICBcIkxPQ0FUSU9OXCI6IFtcIuWxheS9j+WcsFwiLCBcIkxPQ0FUSU9OXCJdLFxuICAgICAgXCJPVEhFUl9TSU5BX1dFSUJPXCI6IFtcIuaWsOa1quW+ruWNmlwiLCBcIk9USEVSU1wiXSxcbiAgICAgIFwiT1RIRVJfVEVDRU5UX1dFSUJPXCI6IFtcIuiFvuiur+W+ruWNmlwiLCBcIk9USEVSU1wiXSxcbiAgICAgIFwiT1RIRVJfUVFcIjogW1wi6IW+6K6vUVFcIiwgXCJPVEhFUlNcIl0sXG4gICAgICBcIkZVTkRJTkdQUk9KRUNUX0JBTk5FUlwiOiBbXCLpppblsY/lm77niYdcIiwgXCJDUk9XREZVTkRJTkdcIl0sXG4gICAgICBcIkZVTkRJTkdQUk9KRUNUX1BSRVwiOiBbXCLpooTng63lm77niYdcIiwgXCJDUk9XREZVTkRJTkdcIl0sXG4gICAgICBcIkZVTkRJTkdQUk9KRUNUX1BST0pFQ1RcIjogW1wi6aG555uu5Zu+54mHXCIsIFwiQ1JPV0RGVU5ESU5HXCJdLFxuICAgICAgXCJGVU5ESU5HUFJPSkVDVF9NT0JJTEVcIjogW1wi56e75Yqo56uv5Zu+54mHXCIsIFwiQ1JPV0RGVU5ESU5HXCJdLFxuICAgICAgXCJJTlZFU1RNRU5UX0ZVTkRfT1ZFUlZJRVdcIjogW1wi5Z+66YeR5qaC5Ya1XCIsIFwiSU5WRVNUTUVOVEZVTkRcIl0sXG4gICAgICBcIklOVkVTVE1FTlRfRlVORF9DSEFSVFwiOiBbXCLln7rph5Hlm77ooahcIiwgXCJJTlZFU1RNRU5URlVORFwiXSxcbiAgICAgIFwiSU5WRVNUTUVOVF9GVU5EX0FTU0VUX01BTkFHRVwiOiBbXCLotYTkuqfnrqHnkIZcIiwgXCJJTlZFU1RNRU5URlVORFwiXSxcbiAgICAgIFwiSU5WRVNUTUVOVF9GVU5EX0ZFRVNfTEVWRUxcIjogW1wi6LS5546H5rC05bmzXCIsIFwiSU5WRVNUTUVOVEZVTkRcIl0sXG4gICAgICBcIklOU1VSQU5DRV9PVkVSVklFV1wiOiBbXCLkv53pmanmpoLlhrVcIiwgXCJJTlNVUkFOQ0VcIl0sXG4gICAgICBcIklOU1VSQU5DRV9DSEFSVFwiOiBbXCLmipXotYTmlrnlkJHlj4rotYTkuqfphY3nva5cIiwgXCJJTlNVUkFOQ0VcIl0sXG4gICAgICBcIklOU1VSQU5DRV9DQVNFX0RFTU9cIjogW1wi5qGI5L6L5ryU56S6XCIsIFwiSU5TVVJBTkNFXCJdLFxuICAgICAgXCJPUkRFUl9JRF9DQVJEX0ZST05UXCI6IFtcIui6q+S7veivgeato+mdolwiLCBcIk9SREVSX0RBVEFcIl0sXG4gICAgICBcIk9SREVSX0lEX0NBUkRfQkFDS1wiOiBbXCLouqvku73or4Hlj43pnaJcIiwgXCJPUkRFUl9EQVRBXCJdLFxuICAgICAgXCJPUkRFUl9CQU5LX0FDQ09VTlRfRlJPTlRcIjogW1wi6ZO26KGM5Y2h5q2j6Z2iXCIsIFwiT1JERVJfREFUQVwiXSxcbiAgICAgIFwiT1JERVJfUEFJRF9EQVRBXCI6IFtcIuaJk+asvuWHreivgVwiLCBcIk9SREVSX0RBVEFcIl0sXG4gICAgICBcIk9SREVSX0NPTlRSQUNUXCI6IFtcIuiuouWNleWQiOWQjFwiLCBcIk9SREVSX0RBVEFcIl0sXG4gICAgICBcIldFQUxUSFBST0RVQ1RfT1ZFUlZJRVdcIjogW1wi55CG6LSi5Lqn5ZOB5qaC5Ya1XCIsIFwiV0VBTFRIUFJPRFVDVFwiXSxcbiAgICAgIFwiV0VBTFRIUFJPRFVDVF9SRVBPUlRcIjogW1wi55CG6LSi5Lqn5ZOB566h55CG5oql5ZGKXCIsIFwiV0VBTFRIUFJPRFVDVFwiXVxuICAgIH0sXG4gICAgXCJCYW5rXCI6IHtcbiAgICAgIFwiSUNCQ1wiOiBcIuS4reWbveW3peWVhumTtuihjFwiLFxuICAgICAgXCJBQkNcIjogXCLkuK3lm73lhpzkuJrpk7booYxcIixcbiAgICAgIFwiQ01CXCI6IFwi5oub5ZWG6ZO26KGMXCIsXG4gICAgICBcIkNDQlwiOiBcIuW7uuiuvumTtuihjFwiLFxuICAgICAgXCJCQ0NCXCI6IFwi5YyX5Lqs6ZO26KGMXCIsXG4gICAgICBcIkJKUkNCXCI6IFwi5YyX5Lqs5Yac5p2R5ZWG5Lia6ZO26KGMXCIsXG4gICAgICBcIkJPQ1wiOiBcIuS4reWbvemTtuihjFwiLFxuICAgICAgXCJCT0NPTVwiOiBcIuS6pOmAmumTtuihjFwiLFxuICAgICAgXCJDTUJDXCI6IFwi5rCR55Sf6ZO26KGMXCIsXG4gICAgICBcIkJPU1wiOiBcIuS4iua1t+mTtuihjFwiLFxuICAgICAgXCJDQkhCXCI6IFwi5rik5rW36ZO26KGMXCIsXG4gICAgICBcIkNFQlwiOiBcIuWFieWkp+mTtuihjFwiLFxuICAgICAgXCJDSUJcIjogXCLlhbTkuJrpk7booYxcIixcbiAgICAgIFwiQ0lUSUNcIjogXCLkuK3kv6Hpk7booYxcIixcbiAgICAgIFwiQ1pCXCI6IFwi5rWZ5ZWG6ZO26KGMXCIsXG4gICAgICBcIkdEQlwiOiBcIuW5v+WPkemTtuihjFwiLFxuICAgICAgXCJIS0JFQVwiOiBcIuS4nOS6mumTtuihjFwiLFxuICAgICAgXCJIWEJcIjogXCLljY7lpI/pk7booYxcIixcbiAgICAgIFwiSFpDQlwiOiBcIuadreW3numTtuihjFwiLFxuICAgICAgXCJOSkNCXCI6IFwi5Y2X5Lqs6ZO26KGMXCIsXG4gICAgICBcIlBJTkdBTlwiOiBcIuW5s+WuiemTtuihjFwiLFxuICAgICAgXCJQU0JDXCI6IFwi6YKu5pS/5YKo6JOE6ZO26KGMXCIsXG4gICAgICBcIlNEQlwiOiBcIua3seWPkemTtuihjFwiLFxuICAgICAgXCJTUERCXCI6IFwi5rWm5Y+R6ZO26KGMXCIsXG4gICAgICBcIlNSQ0JcIjogXCLkuIrmtbflhpzmnZHllYbkuJrpk7booYxcIlxuICAgIH0sXG4gICAgXCJDcmVkaXRSYW5rXCI6IHtcbiAgICAgIFwiSFJcIjogXCI5OS0wXCIsXG4gICAgICBcIkVcIjogXCIxMDktMTAwXCIsXG4gICAgICBcIkRcIjogXCIxMTktMTEwXCIsXG4gICAgICBcIkNcIjogXCIxMjktMTIwXCIsXG4gICAgICBcIkJcIjogXCIxNDQtMTMwXCIsXG4gICAgICBcIkFcIjogXCIxNTktMTQ1XCIsXG4gICAgICBcIkFBXCI6IFwiMTYw5Y+K5Lul5LiKXCJcbiAgICB9LFxuICAgIFwiTG9hblB1cnBvc2VcIjoge1xuICAgICAgXCJTSE9SVFRFUk1cIjogXCLnn63mnJ/lkajovaxcIixcbiAgICAgIFwiUEVSU09OQUxcIjogXCLkuKrkurrmtojotLlcIixcbiAgICAgIFwiSU5WRVNUTUVOVFwiOiBcIuaKlei1hOWIm+S4mlwiLFxuICAgICAgXCJDQVJcIjogXCLovabovobono3otYRcIixcbiAgICAgIFwiSE9VU0VcIjogXCLmiL/kuqfono3otYRcIixcbiAgICAgIFwiQ09SUE9SQVRJT05cIjogXCLkvIHkuJrono3otYRcIixcbiAgICAgIFwiT1RIRVJcIjogXCLlhbblroPlgJ/mrL5cIlxuICAgIH0sXG4gICAgXCJSZXBheW1lbnRNZXRob2RcIjoge1xuICAgICAgXCJNb250aGx5SW50ZXJlc3RcIjogW1wi5oyJ5pyI5LuY5oGv5Yiw5pyf6L+Y5pysXCIsIFwi6L+Y5qy+5Y6L5Yqb5bCPXCJdLFxuICAgICAgXCJFcXVhbEluc3RhbGxtZW50XCI6IFtcIuaMieaciOetiemineacrOaBr1wiLCBcIui/mOasvuS+v+aNt1wiXSxcbiAgICAgIFwiRXF1YWxQcmluY2lwYWxcIjogW1wi5oyJ5pyI562J6aKd5pys6YeRXCIsIFwi5oC75Yip5oGv5pyA5L2OXCJdLFxuICAgICAgXCJCdWxsZXRSZXBheW1lbnRcIjogW1wi5LiA5qyh5oCn6L+Y5pys5LuY5oGvXCIsIFwi55+t5pyf6aaW6YCJXCJdLFxuICAgICAgXCJFcXVhbEludGVyZXN0XCI6IFtcIuaciOW5s+aBr1wiLCBcIuWunumZheWIqeeOh+acgOmrmFwiXSxcbiAgICAgIFwiWWVhcmx5SW50ZXJlc3RcIjogW1wi5oyJ5bm05LuY5oGv5Yiw5pyf6L+Y5pysXCIsIFwi6L+Y5qy+5Y6L5Yqb5bCPXCJdXG4gICAgfSxcblx0XCJSZXBheW1lbnRTdGF0dXNcIjoge1xuICAgICAgXCJVTkRVRVwiOiBcIuacquWIsOacn1wiLFxuICAgICAgXCJPVkVSRFVFXCI6IFwi6YC+5pyfXCIsXG4gICAgICBcIkJSRUFDSFwiOiBcIui/nee6plwiLFxuICAgICAgXCJSRVBBWUVEXCI6IFwi5bey6L+Y5riFXCJcbiAgICB9LFxuICAgIFwiTG9hblN0YXR1c1wiOiB7XG4gICAgICBcIlVOQVNTSUdORURcIjogXCLmnKrlpITnkIZcIixcbiAgICAgIFwiSU5JVElBVEVEXCI6IFwi5Yid5aeLXCIsXG4gICAgICBcIlNDSEVEVUxFRFwiOiBcIuW3suWuieaOklwiLFxuICAgICAgXCJPUEVORURcIjogXCLlvIDmlL7mipXmoIdcIixcbiAgICAgIFwiRkFJTEVEXCI6IFwi5rWB5qCHXCIsXG4gICAgICBcIkZJTklTSEVEXCI6IFwi5bey5ruh5qCHXCIsXG4gICAgICBcIkNBTkNFTEVEXCI6IFwi5bey5Y+W5raIXCIsXG4gICAgICBcIlNFVFRMRURcIjogXCLlt7Lnu5PnrpdcIixcbiAgICAgIFwiQ0xFQVJFRFwiOiBcIuW3sui/mOa4hVwiLFxuICAgICAgXCJPVkVSRFVFXCI6IFwi6YC+5pyfXCIsXG4gICAgICBcIkJSRUFDSFwiOiBcIui/nee6plwiLFxuICAgICAgXCJBUkNISVZFRFwiOiBcIuW3suWtmOaho1wiXG4gICAgfSxcbiAgICBcIkJpZE1ldGhvZFwiOiB7XG4gICAgICBcIkFVVE9cIjogXCLoh6rliqjmipXmoIdcIixcbiAgICAgIFwiTUFOVUFMXCI6IFwi5omL5Yqo5oqV5qCHXCIsXG4gICAgICBcIldFQUxUSFBST0RVQ1RcIjogXCLnkIbotKLkuqflk4FcIlxuICAgIH0sXG4gICAgXCJNb3J0Z2FnZVR5cGVcIjoge1xuICAgICAgXCJSRV9IT1VTRVwiOiBcIuaIv+S6p1wiLFxuICAgICAgXCJSRV9MQU5EXCI6IFwi5Zyf5ZywKOWMheaLrOWxseael+a4lOeJpylcIixcbiAgICAgIFwiUkVfRkFDVE9SWVwiOiBcIuWOguaIv+W6k+aIv1wiLFxuICAgICAgXCJDT01NT05ESVRZXCI6IFwi5ZWG5ZOB5bqT5a2YXCIsXG4gICAgICBcIlZFSElDTEVcIjogXCLovabovoZcIixcbiAgICAgIFwiRVFVSVBNRU5UXCI6IFwi6K6+5aSH5Zmo5p2QXCIsXG4gICAgICBcIlNFQ1VSSVRJRVNcIjogXCLor4HliLhcIixcbiAgICAgIFwiQk9ORFwiOiBcIuWAuuWIuFwiLFxuICAgICAgXCJTVE9DS1wiOiBcIuiCoeelqFwiLFxuICAgICAgXCJERVBPU0lUX1JFQ0VJUFRcIjogXCLpk7booYzlrZjljZVcIixcbiAgICAgIFwiT1RIRVJcIjogXCLlhbbku5ZcIlxuICAgIH0sXG4gICAgXCJMb2FuUmVxdWVzdFN0YXR1c1wiOiB7XG4gICAgICBcIlVOQVNTSUdORURcIjogXCLmnKrlpITnkIZcIixcbiAgICAgIFwiQVNTSUdORURcIjogXCLlpITnkIbkuK1cIixcbiAgICAgIFwiQ0FOQ0VMRURcIjogXCLlt7Llj5bmtohcIixcbiAgICAgIFwiUEVORElOR19WSVNJVFwiOiBcIuWunuWcsOW+geS/oVwiLFxuICAgICAgXCJQRU5ESU5HX1JJU0tcIjogXCLpo47mjqflrqHmoLhcIixcbiAgICAgIFwiUEVORElOR19BUFBPUlZFXCI6IFwi5b6F5om55YeGXCIsXG4gICAgICBcIkFQUFJPVkVEXCI6IFwi5bey5om55YeGXCIsXG4gICAgICBcIlJFSkVDVEVEXCI6IFwi5bey6amz5ZueXCIsXG4gICAgICBcIlBVQkxJU0hFRFwiOiBcIuW3suWPkeaUvlwiLFxuICAgICAgXCJBUkNISVZFRFwiOiBcIuW3suWtmOaho1wiLFxuICAgICAgXCJERUxFVEVEXCI6IFwi5bey5Yiq6ZmkXCJcbiAgICB9LFxuICAgIFwiSHVrb3VUeXBlXCI6IHtcbiAgICAgIFwiQUdSSUNVTFRVUkVcIjogXCLlhpzkuJrmiLflj6NcIixcbiAgICAgIFwiVVJCQU5cIjogXCLln47plYfmiLflj6NcIlxuICAgIH0sXG4gICAgXCJIb3VzZVN0YXR1c1wiOiB7XG4gICAgICBcIkNPTU1FUkNJQUxfTE9BTlwiOiBcIuWVhuS4mui0t+asvlwiLFxuICAgICAgXCJIQUZfTE9BTlwiOiBcIuWFrOenr+mHkei0t+asvlwiLFxuICAgICAgXCJDT01QT1NJVEVfTE9BTlwiOiBcIue7hOWQiOi0t+asvlwiLFxuICAgICAgXCJTRUxGX09XTkVEXCI6IFwi6Ieq5pyJ5L2P5oi/XCIsXG4gICAgICBcIlJFTlRcIjogXCLnp5/miL9cIixcbiAgICAgIFwiT1RIRVJcIjogXCLlhbbku5ZcIlxuICAgIH0sXG4gICAgXCJJbnZlc3RTdGF0dXNcIjoge1xuICAgICAgXCJQUk9QT1NFRFwiOiBcIueUs+ivt+aKleagh1wiLFxuICAgICAgXCJGUk9aRU5cIjogXCLotKbmiLfotYTph5Hlhrvnu5NcIixcbiAgICAgIFwiRlJPWkVOX0ZBSUxFRFwiOiBcIui1hOmHkeWGu+e7k+Wksei0pVwiLFxuICAgICAgXCJGQUlMRURcIjogXCLmtYHmoIdcIixcbiAgICAgIFwiRklOSVNIRURcIjogXCLmipXmoIfmiJDlip9cIixcbiAgICAgIFwiQ0FOQ0VMRURcIjogXCLlt7Llj5bmtohcIixcbiAgICAgIFwiU0VUVExFRFwiOiBcIuW3sue7k+eul1wiLFxuICAgICAgXCJDTEVBUkVEXCI6IFwi6L+Y5qy+5a6M5oiQXCIsXG4gICAgICBcIk9WRVJEVUVcIjogXCLpgL7mnJ9cIixcbiAgICAgIFwiQlJFQUNIXCI6IFwi6L+d57qmXCJcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogUHJvbWlzZSB3cmFwcGVyIGZvciBzdXBlcmFnZW50XG4gKi9cblxuLy8gaW4gdGhlIGJyb3dzZXIgUHJvbWlzZSBpcyBleHBlY3RlZCB0byBiZSBkZWZpbmVkLlxudmFyIFByb21pc2UgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuXG5mdW5jdGlvbiB3cmFwKHN1cGVyYWdlbnQpIHtcbiAgLyoqXG4gICAqIFJlcXVlc3Qgb2JqZWN0IHNpbWlsYXIgdG8gc3VwZXJhZ2VudC5SZXF1ZXN0LCBidXQgd2l0aCBlbmQoKSByZXR1cm5pbmdcbiAgICogYSBwcm9taXNlLlxuICAgKi9cbiAgZnVuY3Rpb24gUHJvbWlzZVJlcXVlc3QoKSB7XG4gICAgc3VwZXJhZ2VudC5SZXF1ZXN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICAvLyBJbmhlcml0IGZvcm0gc3VwZXJhZ2VudC5SZXF1ZXN0XG4gIFByb21pc2VSZXF1ZXN0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJhZ2VudC5SZXF1ZXN0LnByb3RvdHlwZSk7XG5cbiAgLyoqIFNlbmQgcmVxdWVzdCBhbmQgZ2V0IGEgcHJvbWlzZSB0aGF0IGBlbmRgIHdhcyBlbWl0dGVkICovXG4gIFByb21pc2VSZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihjYikge1xuICAgIHZhciBfc3VwZXIgPSBzdXBlcmFnZW50LlJlcXVlc3QucHJvdG90eXBlLmVuZDtcbiAgICB2YXIgY29udGV4dCA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oYWNjZXB0LCByZWplY3QpIHtcbiAgICAgIF9zdXBlci5jYWxsKGNvbnRleHQsIGZ1bmN0aW9uKGVyciwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGNiKSB7XG4gICAgICAgICAgY2IoZXJyLCB2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGFjY2VwdCh2YWx1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogUmVxdWVzdCBidWlsZGVyIHdpdGggc2FtZSBpbnRlcmZhY2UgYXMgc3VwZXJhZ2VudC5cbiAgICogSXQgaXMgY29udmVuaWVudCB0byBpbXBvcnQgdGhpcyBhcyBgcmVxdWVzdGAgaW4gcGxhY2Ugb2Ygc3VwZXJhZ2VudC5cbiAgICovXG4gIHZhciByZXF1ZXN0ID0gZnVuY3Rpb24obWV0aG9kLCB1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2VSZXF1ZXN0KG1ldGhvZCwgdXJsKTtcbiAgfTtcblxuICByZXF1ZXN0LndyYXAgPSB3cmFwO1xuXG4gIC8qKiBIZWxwZXIgZm9yIG1ha2luZyBhIGdldCByZXF1ZXN0ICovXG4gIHJlcXVlc3QuZ2V0ID0gZnVuY3Rpb24odXJsLCBkYXRhKSB7XG4gICAgdmFyIHJlcSA9IHJlcXVlc3QoJ0dFVCcsIHVybCk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHJlcS5xdWVyeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcTtcbiAgfTtcblxuICAvKiogSGVscGVyIGZvciBtYWtpbmcgYSBoZWFkIHJlcXVlc3QgKi9cbiAgcmVxdWVzdC5oZWFkID0gZnVuY3Rpb24odXJsLCBkYXRhKSB7XG4gICAgdmFyIHJlcSA9IHJlcXVlc3QoJ0hFQUQnLCB1cmwpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICByZXEuc2VuZChkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcTtcbiAgfTtcblxuICAvKiogSGVscGVyIGZvciBtYWtpbmcgYSBkZWxldGUgcmVxdWVzdCAqL1xuICByZXF1ZXN0LmRlbCA9IGZ1bmN0aW9uKHVybCkge1xuICAgIHJldHVybiByZXF1ZXN0KCdERUxFVEUnLCB1cmwpO1xuICB9O1xuXG4gIC8qKiBIZWxwZXIgZm9yIG1ha2luZyBhIHBhdGNoIHJlcXVlc3QgKi9cbiAgcmVxdWVzdC5wYXRjaCA9IGZ1bmN0aW9uKHVybCwgZGF0YSkge1xuICAgIHZhciByZXEgPSByZXF1ZXN0KCdQQVRDSCcsIHVybCk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHJlcS5zZW5kKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxO1xuICB9O1xuXG4gIC8qKiBIZWxwZXIgZm9yIG1ha2luZyBhIHBvc3QgcmVxdWVzdCAqL1xuICByZXF1ZXN0LnBvc3QgPSBmdW5jdGlvbih1cmwsIGRhdGEpIHtcbiAgICB2YXIgcmVxID0gcmVxdWVzdCgnUE9TVCcsIHVybCk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHJlcS5zZW5kKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxO1xuICB9O1xuXG4gIC8qKiBIZWxwZXIgZm9yIG1ha2luZyBhIHB1dCByZXF1ZXN0ICovXG4gIHJlcXVlc3QucHV0ID0gZnVuY3Rpb24odXJsLCBkYXRhKSB7XG4gICAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BVVCcsIHVybCk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHJlcS5zZW5kKGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgcmVxdWVzdCBidWlsZGVyXG4gIHJldHVybiByZXF1ZXN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdyYXAocmVxdWlyZSgnc3VwZXJhZ2VudCcpKTtcbiIsIlxuLyoqXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XG4gIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopO1xufTtcblxuLyoqXG4gKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIG1peGluKG9iaikge1xuICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHtcbiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLm9uID1cbkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gICh0aGlzLl9jYWxsYmFja3NbZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzW2V2ZW50XSB8fCBbXSlcbiAgICAucHVzaChmbik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGVcbiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7RW1pdHRlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xuXG4gIGZ1bmN0aW9uIG9uKCkge1xuICAgIHNlbGYub2ZmKGV2ZW50LCBvbik7XG4gICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIG9uLmZuID0gZm47XG4gIHRoaXMub24oZXZlbnQsIG9uKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsXG4gKiByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5vZmYgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG5cbiAgLy8gYWxsXG4gIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIHNwZWNpZmljIGV2ZW50XG4gIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdO1xuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XG5cbiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tldmVudF07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlclxuICB2YXIgY2I7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2IgPSBjYWxsYmFja3NbaV07XG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtNaXhlZH0gLi4uXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxuICovXG5cbkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7XG4gIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTtcbiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSlcbiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1tldmVudF07XG5cbiAgaWYgKGNhbGxiYWNrcykge1xuICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbZXZlbnRdIHx8IFtdO1xufTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gKiBAcmV0dXJuIHtCb29sZWFufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5FbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xufTtcbiIsIlxuLyoqXG4gKiBSZWR1Y2UgYGFycmAgd2l0aCBgZm5gLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7TWl4ZWR9IGluaXRpYWxcbiAqXG4gKiBUT0RPOiBjb21iYXRpYmxlIGVycm9yIGhhbmRsaW5nP1xuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXJyLCBmbiwgaW5pdGlhbCl7ICBcbiAgdmFyIGlkeCA9IDA7XG4gIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICB2YXIgY3VyciA9IGFyZ3VtZW50cy5sZW5ndGggPT0gM1xuICAgID8gaW5pdGlhbFxuICAgIDogYXJyW2lkeCsrXTtcblxuICB3aGlsZSAoaWR4IDwgbGVuKSB7XG4gICAgY3VyciA9IGZuLmNhbGwobnVsbCwgY3VyciwgYXJyW2lkeF0sICsraWR4LCBhcnIpO1xuICB9XG4gIFxuICByZXR1cm4gY3Vycjtcbn07IiwiLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnZhciBFbWl0dGVyID0gcmVxdWlyZSgnZW1pdHRlcicpO1xudmFyIHJlZHVjZSA9IHJlcXVpcmUoJ3JlZHVjZScpO1xuXG4vKipcbiAqIFJvb3QgcmVmZXJlbmNlIGZvciBpZnJhbWVzLlxuICovXG5cbnZhciByb290ID0gJ3VuZGVmaW5lZCcgPT0gdHlwZW9mIHdpbmRvd1xuICA/IHRoaXNcbiAgOiB3aW5kb3c7XG5cbi8qKlxuICogTm9vcC5cbiAqL1xuXG5mdW5jdGlvbiBub29wKCl7fTtcblxuLyoqXG4gKiBDaGVjayBpZiBgb2JqYCBpcyBhIGhvc3Qgb2JqZWN0LFxuICogd2UgZG9uJ3Qgd2FudCB0byBzZXJpYWxpemUgdGhlc2UgOilcbiAqXG4gKiBUT0RPOiBmdXR1cmUgcHJvb2YsIG1vdmUgdG8gY29tcG9lbnQgbGFuZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc0hvc3Qob2JqKSB7XG4gIHZhciBzdHIgPSB7fS50b1N0cmluZy5jYWxsKG9iaik7XG5cbiAgc3dpdGNoIChzdHIpIHtcbiAgICBjYXNlICdbb2JqZWN0IEZpbGVdJzpcbiAgICBjYXNlICdbb2JqZWN0IEJsb2JdJzpcbiAgICBjYXNlICdbb2JqZWN0IEZvcm1EYXRhXSc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIFhIUi5cbiAqL1xuXG5mdW5jdGlvbiBnZXRYSFIoKSB7XG4gIGlmIChyb290LlhNTEh0dHBSZXF1ZXN0XG4gICAgJiYgKCdmaWxlOicgIT0gcm9vdC5sb2NhdGlvbi5wcm90b2NvbCB8fCAhcm9vdC5BY3RpdmVYT2JqZWN0KSkge1xuICAgIHJldHVybiBuZXcgWE1MSHR0cFJlcXVlc3Q7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpOyB9IGNhdGNoKGUpIHt9XG4gICAgdHJ5IHsgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KCdNc3htbDIuWE1MSFRUUC42LjAnKTsgfSBjYXRjaChlKSB7fVxuICAgIHRyeSB7IHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTXN4bWwyLlhNTEhUVFAuMy4wJyk7IH0gY2F0Y2goZSkge31cbiAgICB0cnkgeyByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQJyk7IH0gY2F0Y2goZSkge31cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBhZGRlZCB0byBzdXBwb3J0IElFLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG52YXIgdHJpbSA9ICcnLnRyaW1cbiAgPyBmdW5jdGlvbihzKSB7IHJldHVybiBzLnRyaW0oKTsgfVxuICA6IGZ1bmN0aW9uKHMpIHsgcmV0dXJuIHMucmVwbGFjZSgvKF5cXHMqfFxccyokKS9nLCAnJyk7IH07XG5cbi8qKlxuICogQ2hlY2sgaWYgYG9iamAgaXMgYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIG9iaiA9PT0gT2JqZWN0KG9iaik7XG59XG5cbi8qKlxuICogU2VyaWFsaXplIHRoZSBnaXZlbiBgb2JqYC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemUob2JqKSB7XG4gIGlmICghaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgdmFyIHBhaXJzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAobnVsbCAhPSBvYmpba2V5XSkge1xuICAgICAgcGFpcnMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KVxuICAgICAgICArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudChvYmpba2V5XSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFpcnMuam9pbignJicpO1xufVxuXG4vKipcbiAqIEV4cG9zZSBzZXJpYWxpemF0aW9uIG1ldGhvZC5cbiAqL1xuXG4gcmVxdWVzdC5zZXJpYWxpemVPYmplY3QgPSBzZXJpYWxpemU7XG5cbiAvKipcbiAgKiBQYXJzZSB0aGUgZ2l2ZW4geC13d3ctZm9ybS11cmxlbmNvZGVkIGBzdHJgLlxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICAqIEByZXR1cm4ge09iamVjdH1cbiAgKiBAYXBpIHByaXZhdGVcbiAgKi9cblxuZnVuY3Rpb24gcGFyc2VTdHJpbmcoc3RyKSB7XG4gIHZhciBvYmogPSB7fTtcbiAgdmFyIHBhaXJzID0gc3RyLnNwbGl0KCcmJyk7XG4gIHZhciBwYXJ0cztcbiAgdmFyIHBhaXI7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHBhaXJzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgcGFpciA9IHBhaXJzW2ldO1xuICAgIHBhcnRzID0gcGFpci5zcGxpdCgnPScpO1xuICAgIG9ialtkZWNvZGVVUklDb21wb25lbnQocGFydHNbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0c1sxXSk7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG4vKipcbiAqIEV4cG9zZSBwYXJzZXIuXG4gKi9cblxucmVxdWVzdC5wYXJzZVN0cmluZyA9IHBhcnNlU3RyaW5nO1xuXG4vKipcbiAqIERlZmF1bHQgTUlNRSB0eXBlIG1hcC5cbiAqXG4gKiAgICAgc3VwZXJhZ2VudC50eXBlcy54bWwgPSAnYXBwbGljYXRpb24veG1sJztcbiAqXG4gKi9cblxucmVxdWVzdC50eXBlcyA9IHtcbiAgaHRtbDogJ3RleHQvaHRtbCcsXG4gIGpzb246ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgeG1sOiAnYXBwbGljYXRpb24veG1sJyxcbiAgdXJsZW5jb2RlZDogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICdmb3JtJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICdmb3JtLWRhdGEnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuLyoqXG4gKiBEZWZhdWx0IHNlcmlhbGl6YXRpb24gbWFwLlxuICpcbiAqICAgICBzdXBlcmFnZW50LnNlcmlhbGl6ZVsnYXBwbGljYXRpb24veG1sJ10gPSBmdW5jdGlvbihvYmope1xuICogICAgICAgcmV0dXJuICdnZW5lcmF0ZWQgeG1sIGhlcmUnO1xuICogICAgIH07XG4gKlxuICovXG5cbiByZXF1ZXN0LnNlcmlhbGl6ZSA9IHtcbiAgICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOiBzZXJpYWxpemUsXG4gICAnYXBwbGljYXRpb24vanNvbic6IEpTT04uc3RyaW5naWZ5XG4gfTtcblxuIC8qKlxuICAqIERlZmF1bHQgcGFyc2Vycy5cbiAgKlxuICAqICAgICBzdXBlcmFnZW50LnBhcnNlWydhcHBsaWNhdGlvbi94bWwnXSA9IGZ1bmN0aW9uKHN0cil7XG4gICogICAgICAgcmV0dXJuIHsgb2JqZWN0IHBhcnNlZCBmcm9tIHN0ciB9O1xuICAqICAgICB9O1xuICAqXG4gICovXG5cbnJlcXVlc3QucGFyc2UgPSB7XG4gICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnOiBwYXJzZVN0cmluZyxcbiAgJ2FwcGxpY2F0aW9uL2pzb24nOiBKU09OLnBhcnNlXG59O1xuXG4vKipcbiAqIFBhcnNlIHRoZSBnaXZlbiBoZWFkZXIgYHN0cmAgaW50b1xuICogYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIG1hcHBlZCBmaWVsZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7T2JqZWN0fVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXIoc3RyKSB7XG4gIHZhciBsaW5lcyA9IHN0ci5zcGxpdCgvXFxyP1xcbi8pO1xuICB2YXIgZmllbGRzID0ge307XG4gIHZhciBpbmRleDtcbiAgdmFyIGxpbmU7XG4gIHZhciBmaWVsZDtcbiAgdmFyIHZhbDtcblxuICBsaW5lcy5wb3AoKTsgLy8gdHJhaWxpbmcgQ1JMRlxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBsaW5lcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIGxpbmUgPSBsaW5lc1tpXTtcbiAgICBpbmRleCA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGZpZWxkID0gbGluZS5zbGljZSgwLCBpbmRleCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB0cmltKGxpbmUuc2xpY2UoaW5kZXggKyAxKSk7XG4gICAgZmllbGRzW2ZpZWxkXSA9IHZhbDtcbiAgfVxuXG4gIHJldHVybiBmaWVsZHM7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBtaW1lIHR5cGUgZm9yIHRoZSBnaXZlbiBgc3RyYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiB0eXBlKHN0cil7XG4gIHJldHVybiBzdHIuc3BsaXQoLyAqOyAqLykuc2hpZnQoKTtcbn07XG5cbi8qKlxuICogUmV0dXJuIGhlYWRlciBmaWVsZCBwYXJhbWV0ZXJzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcmFtcyhzdHIpe1xuICByZXR1cm4gcmVkdWNlKHN0ci5zcGxpdCgvICo7ICovKSwgZnVuY3Rpb24ob2JqLCBzdHIpe1xuICAgIHZhciBwYXJ0cyA9IHN0ci5zcGxpdCgvICo9ICovKVxuICAgICAgLCBrZXkgPSBwYXJ0cy5zaGlmdCgpXG4gICAgICAsIHZhbCA9IHBhcnRzLnNoaWZ0KCk7XG5cbiAgICBpZiAoa2V5ICYmIHZhbCkgb2JqW2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIG9iajtcbiAgfSwge30pO1xufTtcblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IGBSZXNwb25zZWAgd2l0aCB0aGUgZ2l2ZW4gYHhocmAuXG4gKlxuICogIC0gc2V0IGZsYWdzICgub2ssIC5lcnJvciwgZXRjKVxuICogIC0gcGFyc2UgaGVhZGVyXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogIEFsaWFzaW5nIGBzdXBlcmFnZW50YCBhcyBgcmVxdWVzdGAgaXMgbmljZTpcbiAqXG4gKiAgICAgIHJlcXVlc3QgPSBzdXBlcmFnZW50O1xuICpcbiAqICBXZSBjYW4gdXNlIHRoZSBwcm9taXNlLWxpa2UgQVBJLCBvciBwYXNzIGNhbGxiYWNrczpcbiAqXG4gKiAgICAgIHJlcXVlc3QuZ2V0KCcvJykuZW5kKGZ1bmN0aW9uKHJlcyl7fSk7XG4gKiAgICAgIHJlcXVlc3QuZ2V0KCcvJywgZnVuY3Rpb24ocmVzKXt9KTtcbiAqXG4gKiAgU2VuZGluZyBkYXRhIGNhbiBiZSBjaGFpbmVkOlxuICpcbiAqICAgICAgcmVxdWVzdFxuICogICAgICAgIC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgLmVuZChmdW5jdGlvbihyZXMpe30pO1xuICpcbiAqICBPciBwYXNzZWQgdG8gYC5zZW5kKClgOlxuICpcbiAqICAgICAgcmVxdWVzdFxuICogICAgICAgIC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0sIGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogIE9yIHBhc3NlZCB0byBgLnBvc3QoKWA6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJywgeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgLmVuZChmdW5jdGlvbihyZXMpe30pO1xuICpcbiAqIE9yIGZ1cnRoZXIgcmVkdWNlZCB0byBhIHNpbmdsZSBjYWxsIGZvciBzaW1wbGUgY2FzZXM6XG4gKlxuICogICAgICByZXF1ZXN0XG4gKiAgICAgICAgLnBvc3QoJy91c2VyJywgeyBuYW1lOiAndGonIH0sIGZ1bmN0aW9uKHJlcyl7fSk7XG4gKlxuICogQHBhcmFtIHtYTUxIVFRQUmVxdWVzdH0geGhyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gUmVzcG9uc2UocmVxLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB0aGlzLnJlcSA9IHJlcTtcbiAgdGhpcy54aHIgPSB0aGlzLnJlcS54aHI7XG4gIHRoaXMudGV4dCA9IHRoaXMucmVxLm1ldGhvZCAhPSdIRUFEJyBcbiAgICAgPyB0aGlzLnhoci5yZXNwb25zZVRleHQgXG4gICAgIDogbnVsbDtcbiAgdGhpcy5zZXRTdGF0dXNQcm9wZXJ0aWVzKHRoaXMueGhyLnN0YXR1cyk7XG4gIHRoaXMuaGVhZGVyID0gdGhpcy5oZWFkZXJzID0gcGFyc2VIZWFkZXIodGhpcy54aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpO1xuICAvLyBnZXRBbGxSZXNwb25zZUhlYWRlcnMgc29tZXRpbWVzIGZhbHNlbHkgcmV0dXJucyBcIlwiIGZvciBDT1JTIHJlcXVlc3RzLCBidXRcbiAgLy8gZ2V0UmVzcG9uc2VIZWFkZXIgc3RpbGwgd29ya3MuIHNvIHdlIGdldCBjb250ZW50LXR5cGUgZXZlbiBpZiBnZXR0aW5nXG4gIC8vIG90aGVyIGhlYWRlcnMgZmFpbHMuXG4gIHRoaXMuaGVhZGVyWydjb250ZW50LXR5cGUnXSA9IHRoaXMueGhyLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXR5cGUnKTtcbiAgdGhpcy5zZXRIZWFkZXJQcm9wZXJ0aWVzKHRoaXMuaGVhZGVyKTtcbiAgdGhpcy5ib2R5ID0gdGhpcy5yZXEubWV0aG9kICE9ICdIRUFEJ1xuICAgID8gdGhpcy5wYXJzZUJvZHkodGhpcy50ZXh0KVxuICAgIDogbnVsbDtcbn1cblxuLyoqXG4gKiBHZXQgY2FzZS1pbnNlbnNpdGl2ZSBgZmllbGRgIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZFxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXNwb25zZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oZmllbGQpe1xuICByZXR1cm4gdGhpcy5oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV07XG59O1xuXG4vKipcbiAqIFNldCBoZWFkZXIgcmVsYXRlZCBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBgLnR5cGVgIHRoZSBjb250ZW50IHR5cGUgd2l0aG91dCBwYXJhbXNcbiAqXG4gKiBBIHJlc3BvbnNlIG9mIFwiQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluOyBjaGFyc2V0PXV0Zi04XCJcbiAqIHdpbGwgcHJvdmlkZSB5b3Ugd2l0aCBhIGAudHlwZWAgb2YgXCJ0ZXh0L3BsYWluXCIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGhlYWRlclxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVzcG9uc2UucHJvdG90eXBlLnNldEhlYWRlclByb3BlcnRpZXMgPSBmdW5jdGlvbihoZWFkZXIpe1xuICAvLyBjb250ZW50LXR5cGVcbiAgdmFyIGN0ID0gdGhpcy5oZWFkZXJbJ2NvbnRlbnQtdHlwZSddIHx8ICcnO1xuICB0aGlzLnR5cGUgPSB0eXBlKGN0KTtcblxuICAvLyBwYXJhbXNcbiAgdmFyIG9iaiA9IHBhcmFtcyhjdCk7XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHRoaXNba2V5XSA9IG9ialtrZXldO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYm9keSBgc3RyYC5cbiAqXG4gKiBVc2VkIGZvciBhdXRvLXBhcnNpbmcgb2YgYm9kaWVzLiBQYXJzZXJzXG4gKiBhcmUgZGVmaW5lZCBvbiB0aGUgYHN1cGVyYWdlbnQucGFyc2VgIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlc3BvbnNlLnByb3RvdHlwZS5wYXJzZUJvZHkgPSBmdW5jdGlvbihzdHIpe1xuICB2YXIgcGFyc2UgPSByZXF1ZXN0LnBhcnNlW3RoaXMudHlwZV07XG4gIHJldHVybiBwYXJzZSAmJiBzdHIgJiYgc3RyLmxlbmd0aFxuICAgID8gcGFyc2Uoc3RyKVxuICAgIDogbnVsbDtcbn07XG5cbi8qKlxuICogU2V0IGZsYWdzIHN1Y2ggYXMgYC5va2AgYmFzZWQgb24gYHN0YXR1c2AuXG4gKlxuICogRm9yIGV4YW1wbGUgYSAyeHggcmVzcG9uc2Ugd2lsbCBnaXZlIHlvdSBhIGAub2tgIG9mIF9fdHJ1ZV9fXG4gKiB3aGVyZWFzIDV4eCB3aWxsIGJlIF9fZmFsc2VfXyBhbmQgYC5lcnJvcmAgd2lsbCBiZSBfX3RydWVfXy4gVGhlXG4gKiBgLmNsaWVudEVycm9yYCBhbmQgYC5zZXJ2ZXJFcnJvcmAgYXJlIGFsc28gYXZhaWxhYmxlIHRvIGJlIG1vcmVcbiAqIHNwZWNpZmljLCBhbmQgYC5zdGF0dXNUeXBlYCBpcyB0aGUgY2xhc3Mgb2YgZXJyb3IgcmFuZ2luZyBmcm9tIDEuLjVcbiAqIHNvbWV0aW1lcyB1c2VmdWwgZm9yIG1hcHBpbmcgcmVzcG9uZCBjb2xvcnMgZXRjLlxuICpcbiAqIFwic3VnYXJcIiBwcm9wZXJ0aWVzIGFyZSBhbHNvIGRlZmluZWQgZm9yIGNvbW1vbiBjYXNlcy4gQ3VycmVudGx5IHByb3ZpZGluZzpcbiAqXG4gKiAgIC0gLm5vQ29udGVudFxuICogICAtIC5iYWRSZXF1ZXN0XG4gKiAgIC0gLnVuYXV0aG9yaXplZFxuICogICAtIC5ub3RBY2NlcHRhYmxlXG4gKiAgIC0gLm5vdEZvdW5kXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHN0YXR1c1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVzcG9uc2UucHJvdG90eXBlLnNldFN0YXR1c1Byb3BlcnRpZXMgPSBmdW5jdGlvbihzdGF0dXMpe1xuICB2YXIgdHlwZSA9IHN0YXR1cyAvIDEwMCB8IDA7XG5cbiAgLy8gc3RhdHVzIC8gY2xhc3NcbiAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gIHRoaXMuc3RhdHVzVHlwZSA9IHR5cGU7XG5cbiAgLy8gYmFzaWNzXG4gIHRoaXMuaW5mbyA9IDEgPT0gdHlwZTtcbiAgdGhpcy5vayA9IDIgPT0gdHlwZTtcbiAgdGhpcy5jbGllbnRFcnJvciA9IDQgPT0gdHlwZTtcbiAgdGhpcy5zZXJ2ZXJFcnJvciA9IDUgPT0gdHlwZTtcbiAgdGhpcy5lcnJvciA9ICg0ID09IHR5cGUgfHwgNSA9PSB0eXBlKVxuICAgID8gdGhpcy50b0Vycm9yKClcbiAgICA6IGZhbHNlO1xuXG4gIC8vIHN1Z2FyXG4gIHRoaXMuYWNjZXB0ZWQgPSAyMDIgPT0gc3RhdHVzO1xuICB0aGlzLm5vQ29udGVudCA9IDIwNCA9PSBzdGF0dXMgfHwgMTIyMyA9PSBzdGF0dXM7XG4gIHRoaXMuYmFkUmVxdWVzdCA9IDQwMCA9PSBzdGF0dXM7XG4gIHRoaXMudW5hdXRob3JpemVkID0gNDAxID09IHN0YXR1cztcbiAgdGhpcy5ub3RBY2NlcHRhYmxlID0gNDA2ID09IHN0YXR1cztcbiAgdGhpcy5ub3RGb3VuZCA9IDQwNCA9PSBzdGF0dXM7XG4gIHRoaXMuZm9yYmlkZGVuID0gNDAzID09IHN0YXR1cztcbn07XG5cbi8qKlxuICogUmV0dXJuIGFuIGBFcnJvcmAgcmVwcmVzZW50YXRpdmUgb2YgdGhpcyByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJuIHtFcnJvcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVzcG9uc2UucHJvdG90eXBlLnRvRXJyb3IgPSBmdW5jdGlvbigpe1xuICB2YXIgcmVxID0gdGhpcy5yZXE7XG4gIHZhciBtZXRob2QgPSByZXEubWV0aG9kO1xuICB2YXIgdXJsID0gcmVxLnVybDtcblxuICB2YXIgbXNnID0gJ2Nhbm5vdCAnICsgbWV0aG9kICsgJyAnICsgdXJsICsgJyAoJyArIHRoaXMuc3RhdHVzICsgJyknO1xuICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gIGVyci5zdGF0dXMgPSB0aGlzLnN0YXR1cztcbiAgZXJyLm1ldGhvZCA9IG1ldGhvZDtcbiAgZXJyLnVybCA9IHVybDtcblxuICByZXR1cm4gZXJyO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYFJlc3BvbnNlYC5cbiAqL1xuXG5yZXF1ZXN0LlJlc3BvbnNlID0gUmVzcG9uc2U7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBhIG5ldyBgUmVxdWVzdGAgd2l0aCB0aGUgZ2l2ZW4gYG1ldGhvZGAgYW5kIGB1cmxgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXRob2RcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gUmVxdWVzdChtZXRob2QsIHVybCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgdGhpcy5fcXVlcnkgPSB0aGlzLl9xdWVyeSB8fCBbXTtcbiAgdGhpcy5tZXRob2QgPSBtZXRob2Q7XG4gIHRoaXMudXJsID0gdXJsO1xuICB0aGlzLmhlYWRlciA9IHt9O1xuICB0aGlzLl9oZWFkZXIgPSB7fTtcbiAgdGhpcy5vbignZW5kJywgZnVuY3Rpb24oKXtcbiAgICB2YXIgZXJyID0gbnVsbDtcbiAgICB2YXIgcmVzID0gbnVsbDtcblxuICAgIHRyeSB7XG4gICAgICByZXMgPSBuZXcgUmVzcG9uc2Uoc2VsZik7IFxuICAgIH0gY2F0Y2goZSkge1xuICAgICAgZXJyID0gbmV3IEVycm9yKCdQYXJzZXIgaXMgdW5hYmxlIHRvIHBhcnNlIHRoZSByZXNwb25zZScpO1xuICAgICAgZXJyLnBhcnNlID0gdHJ1ZTtcbiAgICAgIGVyci5vcmlnaW5hbCA9IGU7XG4gICAgfVxuXG4gICAgc2VsZi5jYWxsYmFjayhlcnIsIHJlcyk7XG4gIH0pO1xufVxuXG4vKipcbiAqIE1peGluIGBFbWl0dGVyYC5cbiAqL1xuXG5FbWl0dGVyKFJlcXVlc3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBBbGxvdyBmb3IgZXh0ZW5zaW9uXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24oZm4pIHtcbiAgZm4odGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIFNldCB0aW1lb3V0IHRvIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uKG1zKXtcbiAgdGhpcy5fdGltZW91dCA9IG1zO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogQ2xlYXIgcHJldmlvdXMgdGltZW91dC5cbiAqXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2xlYXJUaW1lb3V0ID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5fdGltZW91dCA9IDA7XG4gIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBYm9ydCB0aGUgcmVxdWVzdCwgYW5kIGNsZWFyIHBvdGVudGlhbCB0aW1lb3V0LlxuICpcbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKXtcbiAgaWYgKHRoaXMuYWJvcnRlZCkgcmV0dXJuO1xuICB0aGlzLmFib3J0ZWQgPSB0cnVlO1xuICB0aGlzLnhoci5hYm9ydCgpO1xuICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICB0aGlzLmVtaXQoJ2Fib3J0Jyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgaGVhZGVyIGBmaWVsZGAgdG8gYHZhbGAsIG9yIG11bHRpcGxlIGZpZWxkcyB3aXRoIG9uZSBvYmplY3QuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAuc2V0KCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpXG4gKiAgICAgICAgLnNldCgnWC1BUEktS2V5JywgJ2Zvb2JhcicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogICAgICByZXEuZ2V0KCcvJylcbiAqICAgICAgICAuc2V0KHsgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsICdYLUFQSS1LZXknOiAnZm9vYmFyJyB9KVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfE9iamVjdH0gZmllbGRcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWxcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihmaWVsZCwgdmFsKXtcbiAgaWYgKGlzT2JqZWN0KGZpZWxkKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBmaWVsZCkge1xuICAgICAgdGhpcy5zZXQoa2V5LCBmaWVsZFtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdGhpcy5faGVhZGVyW2ZpZWxkLnRvTG93ZXJDYXNlKCldID0gdmFsO1xuICB0aGlzLmhlYWRlcltmaWVsZF0gPSB2YWw7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgaGVhZGVyIGBmaWVsZGAuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgIHJlcS5nZXQoJy8nKVxuICogICAgICAgIC51bnNldCgnVXNlci1BZ2VudCcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGZpZWxkXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUudW5zZXQgPSBmdW5jdGlvbihmaWVsZCl7XG4gIGRlbGV0ZSB0aGlzLl9oZWFkZXJbZmllbGQudG9Mb3dlckNhc2UoKV07XG4gIGRlbGV0ZSB0aGlzLmhlYWRlcltmaWVsZF07XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBHZXQgY2FzZS1pbnNlbnNpdGl2ZSBoZWFkZXIgYGZpZWxkYCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gZmllbGRcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmdldEhlYWRlciA9IGZ1bmN0aW9uKGZpZWxkKXtcbiAgcmV0dXJuIHRoaXMuX2hlYWRlcltmaWVsZC50b0xvd2VyQ2FzZSgpXTtcbn07XG5cbi8qKlxuICogU2V0IENvbnRlbnQtVHlwZSB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy54bWwgPSAnYXBwbGljYXRpb24veG1sJztcbiAqXG4gKiAgICAgIHJlcXVlc3QucG9zdCgnLycpXG4gKiAgICAgICAgLnR5cGUoJ3htbCcpXG4gKiAgICAgICAgLnNlbmQoeG1sc3RyaW5nKVxuICogICAgICAgIC5lbmQoY2FsbGJhY2spO1xuICpcbiAqICAgICAgcmVxdWVzdC5wb3N0KCcvJylcbiAqICAgICAgICAudHlwZSgnYXBwbGljYXRpb24veG1sJylcbiAqICAgICAgICAuc2VuZCh4bWxzdHJpbmcpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS50eXBlID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdDb250ZW50LVR5cGUnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEFjY2VwdCB0byBgdHlwZWAsIG1hcHBpbmcgdmFsdWVzIGZyb20gYHJlcXVlc3QudHlwZXNgLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgICAgc3VwZXJhZ2VudC50eXBlcy5qc29uID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xuICpcbiAqICAgICAgcmVxdWVzdC5nZXQoJy9hZ2VudCcpXG4gKiAgICAgICAgLmFjY2VwdCgnanNvbicpXG4gKiAgICAgICAgLmVuZChjYWxsYmFjayk7XG4gKlxuICogICAgICByZXF1ZXN0LmdldCgnL2FnZW50JylcbiAqICAgICAgICAuYWNjZXB0KCdhcHBsaWNhdGlvbi9qc29uJylcbiAqICAgICAgICAuZW5kKGNhbGxiYWNrKTtcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWNjZXB0XG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24odHlwZSl7XG4gIHRoaXMuc2V0KCdBY2NlcHQnLCByZXF1ZXN0LnR5cGVzW3R5cGVdIHx8IHR5cGUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2V0IEF1dGhvcml6YXRpb24gZmllbGQgdmFsdWUgd2l0aCBgdXNlcmAgYW5kIGBwYXNzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXNlclxuICogQHBhcmFtIHtTdHJpbmd9IHBhc3NcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5hdXRoID0gZnVuY3Rpb24odXNlciwgcGFzcyl7XG4gIHZhciBzdHIgPSBidG9hKHVzZXIgKyAnOicgKyBwYXNzKTtcbiAgdGhpcy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIHN0cik7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4qIEFkZCBxdWVyeS1zdHJpbmcgYHZhbGAuXG4qXG4qIEV4YW1wbGVzOlxuKlxuKiAgIHJlcXVlc3QuZ2V0KCcvc2hvZXMnKVxuKiAgICAgLnF1ZXJ5KCdzaXplPTEwJylcbiogICAgIC5xdWVyeSh7IGNvbG9yOiAnYmx1ZScgfSlcbipcbiogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSB2YWxcbiogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4qIEBhcGkgcHVibGljXG4qL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5xdWVyeSA9IGZ1bmN0aW9uKHZhbCl7XG4gIGlmICgnc3RyaW5nJyAhPSB0eXBlb2YgdmFsKSB2YWwgPSBzZXJpYWxpemUodmFsKTtcbiAgaWYgKHZhbCkgdGhpcy5fcXVlcnkucHVzaCh2YWwpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogV3JpdGUgdGhlIGZpZWxkIGBuYW1lYCBhbmQgYHZhbGAgZm9yIFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiXG4gKiByZXF1ZXN0IGJvZGllcy5cbiAqXG4gKiBgYGAganNcbiAqIHJlcXVlc3QucG9zdCgnL3VwbG9hZCcpXG4gKiAgIC5maWVsZCgnZm9vJywgJ2JhcicpXG4gKiAgIC5lbmQoY2FsbGJhY2spO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfEJsb2J8RmlsZX0gdmFsXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fSBmb3IgY2hhaW5pbmdcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuZmllbGQgPSBmdW5jdGlvbihuYW1lLCB2YWwpe1xuICBpZiAoIXRoaXMuX2Zvcm1EYXRhKSB0aGlzLl9mb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICB0aGlzLl9mb3JtRGF0YS5hcHBlbmQobmFtZSwgdmFsKTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFF1ZXVlIHRoZSBnaXZlbiBgZmlsZWAgYXMgYW4gYXR0YWNobWVudCB0byB0aGUgc3BlY2lmaWVkIGBmaWVsZGAsXG4gKiB3aXRoIG9wdGlvbmFsIGBmaWxlbmFtZWAuXG4gKlxuICogYGBgIGpzXG4gKiByZXF1ZXN0LnBvc3QoJy91cGxvYWQnKVxuICogICAuYXR0YWNoKG5ldyBCbG9iKFsnPGEgaWQ9XCJhXCI+PGIgaWQ9XCJiXCI+aGV5ITwvYj48L2E+J10sIHsgdHlwZTogXCJ0ZXh0L2h0bWxcIn0pKVxuICogICAuZW5kKGNhbGxiYWNrKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWVsZFxuICogQHBhcmFtIHtCbG9ifEZpbGV9IGZpbGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlbmFtZVxuICogQHJldHVybiB7UmVxdWVzdH0gZm9yIGNoYWluaW5nXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblJlcXVlc3QucHJvdG90eXBlLmF0dGFjaCA9IGZ1bmN0aW9uKGZpZWxkLCBmaWxlLCBmaWxlbmFtZSl7XG4gIGlmICghdGhpcy5fZm9ybURhdGEpIHRoaXMuX2Zvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIHRoaXMuX2Zvcm1EYXRhLmFwcGVuZChmaWVsZCwgZmlsZSwgZmlsZW5hbWUpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogU2VuZCBgZGF0YWAsIGRlZmF1bHRpbmcgdGhlIGAudHlwZSgpYCB0byBcImpzb25cIiB3aGVuXG4gKiBhbiBvYmplY3QgaXMgZ2l2ZW4uXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgICAgLy8gcXVlcnlzdHJpbmdcbiAqICAgICAgIHJlcXVlc3QuZ2V0KCcvc2VhcmNoJylcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBtdWx0aXBsZSBkYXRhIFwid3JpdGVzXCJcbiAqICAgICAgIHJlcXVlc3QuZ2V0KCcvc2VhcmNoJylcbiAqICAgICAgICAgLnNlbmQoeyBzZWFyY2g6ICdxdWVyeScgfSlcbiAqICAgICAgICAgLnNlbmQoeyByYW5nZTogJzEuLjUnIH0pXG4gKiAgICAgICAgIC5zZW5kKHsgb3JkZXI6ICdkZXNjJyB9KVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIG1hbnVhbCBqc29uXG4gKiAgICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAqICAgICAgICAgLnR5cGUoJ2pzb24nKVxuICogICAgICAgICAuc2VuZCgne1wibmFtZVwiOlwidGpcIn0pXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogICAgICAgLy8gYXV0byBqc29uXG4gKiAgICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAqICAgICAgICAgLnNlbmQoeyBuYW1lOiAndGonIH0pXG4gKiAgICAgICAgIC5lbmQoY2FsbGJhY2spXG4gKlxuICogICAgICAgLy8gbWFudWFsIHgtd3d3LWZvcm0tdXJsZW5jb2RlZFxuICogICAgICAgcmVxdWVzdC5wb3N0KCcvdXNlcicpXG4gKiAgICAgICAgIC50eXBlKCdmb3JtJylcbiAqICAgICAgICAgLnNlbmQoJ25hbWU9dGonKVxuICogICAgICAgICAuZW5kKGNhbGxiYWNrKVxuICpcbiAqICAgICAgIC8vIGF1dG8geC13d3ctZm9ybS11cmxlbmNvZGVkXG4gKiAgICAgICByZXF1ZXN0LnBvc3QoJy91c2VyJylcbiAqICAgICAgICAgLnR5cGUoJ2Zvcm0nKVxuICogICAgICAgICAuc2VuZCh7IG5hbWU6ICd0aicgfSlcbiAqICAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiAgICAgICAvLyBkZWZhdWx0cyB0byB4LXd3dy1mb3JtLXVybGVuY29kZWRcbiAgKiAgICAgIHJlcXVlc3QucG9zdCgnL3VzZXInKVxuICAqICAgICAgICAuc2VuZCgnbmFtZT10b2JpJylcbiAgKiAgICAgICAgLnNlbmQoJ3NwZWNpZXM9ZmVycmV0JylcbiAgKiAgICAgICAgLmVuZChjYWxsYmFjaylcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGRhdGFcbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oZGF0YSl7XG4gIHZhciBvYmogPSBpc09iamVjdChkYXRhKTtcbiAgdmFyIHR5cGUgPSB0aGlzLmdldEhlYWRlcignQ29udGVudC1UeXBlJyk7XG5cbiAgLy8gbWVyZ2VcbiAgaWYgKG9iaiAmJiBpc09iamVjdCh0aGlzLl9kYXRhKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICB0aGlzLl9kYXRhW2tleV0gPSBkYXRhW2tleV07XG4gICAgfVxuICB9IGVsc2UgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBkYXRhKSB7XG4gICAgaWYgKCF0eXBlKSB0aGlzLnR5cGUoJ2Zvcm0nKTtcbiAgICB0eXBlID0gdGhpcy5nZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICgnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyA9PSB0eXBlKSB7XG4gICAgICB0aGlzLl9kYXRhID0gdGhpcy5fZGF0YVxuICAgICAgICA/IHRoaXMuX2RhdGEgKyAnJicgKyBkYXRhXG4gICAgICAgIDogZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fZGF0YSA9ICh0aGlzLl9kYXRhIHx8ICcnKSArIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICB9XG5cbiAgaWYgKCFvYmopIHJldHVybiB0aGlzO1xuICBpZiAoIXR5cGUpIHRoaXMudHlwZSgnanNvbicpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qKlxuICogSW52b2tlIHRoZSBjYWxsYmFjayB3aXRoIGBlcnJgIGFuZCBgcmVzYFxuICogYW5kIGhhbmRsZSBhcml0eSBjaGVjay5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJcbiAqIEBwYXJhbSB7UmVzcG9uc2V9IHJlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY2FsbGJhY2sgPSBmdW5jdGlvbihlcnIsIHJlcyl7XG4gIHZhciBmbiA9IHRoaXMuX2NhbGxiYWNrO1xuICB0aGlzLmNsZWFyVGltZW91dCgpO1xuICBpZiAoMiA9PSBmbi5sZW5ndGgpIHJldHVybiBmbihlcnIsIHJlcyk7XG4gIGlmIChlcnIpIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTtcbiAgZm4ocmVzKTtcbn07XG5cbi8qKlxuICogSW52b2tlIGNhbGxiYWNrIHdpdGggeC1kb21haW4gZXJyb3IuXG4gKlxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUuY3Jvc3NEb21haW5FcnJvciA9IGZ1bmN0aW9uKCl7XG4gIHZhciBlcnIgPSBuZXcgRXJyb3IoJ09yaWdpbiBpcyBub3QgYWxsb3dlZCBieSBBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nKTtcbiAgZXJyLmNyb3NzRG9tYWluID0gdHJ1ZTtcbiAgdGhpcy5jYWxsYmFjayhlcnIpO1xufTtcblxuLyoqXG4gKiBJbnZva2UgY2FsbGJhY2sgd2l0aCB0aW1lb3V0IGVycm9yLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblJlcXVlc3QucHJvdG90eXBlLnRpbWVvdXRFcnJvciA9IGZ1bmN0aW9uKCl7XG4gIHZhciB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgdmFyIGVyciA9IG5ldyBFcnJvcigndGltZW91dCBvZiAnICsgdGltZW91dCArICdtcyBleGNlZWRlZCcpO1xuICBlcnIudGltZW91dCA9IHRpbWVvdXQ7XG4gIHRoaXMuY2FsbGJhY2soZXJyKTtcbn07XG5cbi8qKlxuICogRW5hYmxlIHRyYW5zbWlzc2lvbiBvZiBjb29raWVzIHdpdGggeC1kb21haW4gcmVxdWVzdHMuXG4gKlxuICogTm90ZSB0aGF0IGZvciB0aGlzIHRvIHdvcmsgdGhlIG9yaWdpbiBtdXN0IG5vdCBiZVxuICogdXNpbmcgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIiB3aXRoIGEgd2lsZGNhcmQsXG4gKiBhbmQgYWxzbyBtdXN0IHNldCBcIkFjY2Vzcy1Db250cm9sLUFsbG93LUNyZWRlbnRpYWxzXCJcbiAqIHRvIFwidHJ1ZVwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuUmVxdWVzdC5wcm90b3R5cGUud2l0aENyZWRlbnRpYWxzID0gZnVuY3Rpb24oKXtcbiAgdGhpcy5fd2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIEluaXRpYXRlIHJlcXVlc3QsIGludm9raW5nIGNhbGxiYWNrIGBmbihyZXMpYFxuICogd2l0aCBhbiBpbnN0YW5jZW9mIGBSZXNwb25zZWAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge1JlcXVlc3R9IGZvciBjaGFpbmluZ1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5SZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihmbil7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHhociA9IHRoaXMueGhyID0gZ2V0WEhSKCk7XG4gIHZhciBxdWVyeSA9IHRoaXMuX3F1ZXJ5LmpvaW4oJyYnKTtcbiAgdmFyIHRpbWVvdXQgPSB0aGlzLl90aW1lb3V0O1xuICB2YXIgZGF0YSA9IHRoaXMuX2Zvcm1EYXRhIHx8IHRoaXMuX2RhdGE7XG5cbiAgLy8gc3RvcmUgY2FsbGJhY2tcbiAgdGhpcy5fY2FsbGJhY2sgPSBmbiB8fCBub29wO1xuXG4gIC8vIHN0YXRlIGNoYW5nZVxuICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKXtcbiAgICBpZiAoNCAhPSB4aHIucmVhZHlTdGF0ZSkgcmV0dXJuO1xuICAgIGlmICgwID09IHhoci5zdGF0dXMpIHtcbiAgICAgIGlmIChzZWxmLmFib3J0ZWQpIHJldHVybiBzZWxmLnRpbWVvdXRFcnJvcigpO1xuICAgICAgcmV0dXJuIHNlbGYuY3Jvc3NEb21haW5FcnJvcigpO1xuICAgIH1cbiAgICBzZWxmLmVtaXQoJ2VuZCcpO1xuICB9O1xuXG4gIC8vIHByb2dyZXNzXG4gIGlmICh4aHIudXBsb2FkKSB7XG4gICAgeGhyLnVwbG9hZC5vbnByb2dyZXNzID0gZnVuY3Rpb24oZSl7XG4gICAgICBlLnBlcmNlbnQgPSBlLmxvYWRlZCAvIGUudG90YWwgKiAxMDA7XG4gICAgICBzZWxmLmVtaXQoJ3Byb2dyZXNzJywgZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIHRpbWVvdXRcbiAgaWYgKHRpbWVvdXQgJiYgIXRoaXMuX3RpbWVyKSB7XG4gICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICBzZWxmLmFib3J0KCk7XG4gICAgfSwgdGltZW91dCk7XG4gIH1cblxuICAvLyBxdWVyeXN0cmluZ1xuICBpZiAocXVlcnkpIHtcbiAgICBxdWVyeSA9IHJlcXVlc3Quc2VyaWFsaXplT2JqZWN0KHF1ZXJ5KTtcbiAgICB0aGlzLnVybCArPSB+dGhpcy51cmwuaW5kZXhPZignPycpXG4gICAgICA/ICcmJyArIHF1ZXJ5XG4gICAgICA6ICc/JyArIHF1ZXJ5O1xuICB9XG5cbiAgLy8gaW5pdGlhdGUgcmVxdWVzdFxuICB4aHIub3Blbih0aGlzLm1ldGhvZCwgdGhpcy51cmwsIHRydWUpO1xuXG4gIC8vIENPUlNcbiAgaWYgKHRoaXMuX3dpdGhDcmVkZW50aWFscykgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG5cbiAgLy8gYm9keVxuICBpZiAoJ0dFVCcgIT0gdGhpcy5tZXRob2QgJiYgJ0hFQUQnICE9IHRoaXMubWV0aG9kICYmICdzdHJpbmcnICE9IHR5cGVvZiBkYXRhICYmICFpc0hvc3QoZGF0YSkpIHtcbiAgICAvLyBzZXJpYWxpemUgc3R1ZmZcbiAgICB2YXIgc2VyaWFsaXplID0gcmVxdWVzdC5zZXJpYWxpemVbdGhpcy5nZXRIZWFkZXIoJ0NvbnRlbnQtVHlwZScpXTtcbiAgICBpZiAoc2VyaWFsaXplKSBkYXRhID0gc2VyaWFsaXplKGRhdGEpO1xuICB9XG5cbiAgLy8gc2V0IGhlYWRlciBmaWVsZHNcbiAgZm9yICh2YXIgZmllbGQgaW4gdGhpcy5oZWFkZXIpIHtcbiAgICBpZiAobnVsbCA9PSB0aGlzLmhlYWRlcltmaWVsZF0pIGNvbnRpbnVlO1xuICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGZpZWxkLCB0aGlzLmhlYWRlcltmaWVsZF0pO1xuICB9XG5cbiAgLy8gc2VuZCBzdHVmZlxuICB0aGlzLmVtaXQoJ3JlcXVlc3QnLCB0aGlzKTtcbiAgeGhyLnNlbmQoZGF0YSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYFJlcXVlc3RgLlxuICovXG5cbnJlcXVlc3QuUmVxdWVzdCA9IFJlcXVlc3Q7XG5cbi8qKlxuICogSXNzdWUgYSByZXF1ZXN0OlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqICAgIHJlcXVlc3QoJ0dFVCcsICcvdXNlcnMnKS5lbmQoY2FsbGJhY2spXG4gKiAgICByZXF1ZXN0KCcvdXNlcnMnKS5lbmQoY2FsbGJhY2spXG4gKiAgICByZXF1ZXN0KCcvdXNlcnMnLCBjYWxsYmFjaylcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kXG4gKiBAcGFyYW0ge1N0cmluZ3xGdW5jdGlvbn0gdXJsIG9yIGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiByZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gIC8vIGNhbGxiYWNrXG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiB1cmwpIHtcbiAgICByZXR1cm4gbmV3IFJlcXVlc3QoJ0dFVCcsIG1ldGhvZCkuZW5kKHVybCk7XG4gIH1cblxuICAvLyB1cmwgZmlyc3RcbiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCgnR0VUJywgbWV0aG9kKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgUmVxdWVzdChtZXRob2QsIHVybCk7XG59XG5cbi8qKlxuICogR0VUIGB1cmxgIHdpdGggb3B0aW9uYWwgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR8RnVuY3Rpb259IGRhdGEgb3IgZm5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0LmdldCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgZm4pe1xuICB2YXIgcmVxID0gcmVxdWVzdCgnR0VUJywgdXJsKTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGRhdGEpIGZuID0gZGF0YSwgZGF0YSA9IG51bGw7XG4gIGlmIChkYXRhKSByZXEucXVlcnkoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIEhFQUQgYHVybGAgd2l0aCBvcHRpb25hbCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtNaXhlZHxGdW5jdGlvbn0gZGF0YSBvciBmblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnJlcXVlc3QuaGVhZCA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgZm4pe1xuICB2YXIgcmVxID0gcmVxdWVzdCgnSEVBRCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSBmbiA9IGRhdGEsIGRhdGEgPSBudWxsO1xuICBpZiAoZGF0YSkgcmVxLnNlbmQoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIERFTEVURSBgdXJsYCB3aXRoIG9wdGlvbmFsIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5kZWwgPSBmdW5jdGlvbih1cmwsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ0RFTEVURScsIHVybCk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIFBBVENIIGB1cmxgIHdpdGggb3B0aW9uYWwgYGRhdGFgIGFuZCBjYWxsYmFjayBgZm4ocmVzKWAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVybFxuICogQHBhcmFtIHtNaXhlZH0gZGF0YVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge1JlcXVlc3R9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbnJlcXVlc3QucGF0Y2ggPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BBVENIJywgdXJsKTtcbiAgaWYgKCdmdW5jdGlvbicgPT0gdHlwZW9mIGRhdGEpIGZuID0gZGF0YSwgZGF0YSA9IG51bGw7XG4gIGlmIChkYXRhKSByZXEuc2VuZChkYXRhKTtcbiAgaWYgKGZuKSByZXEuZW5kKGZuKTtcbiAgcmV0dXJuIHJlcTtcbn07XG5cbi8qKlxuICogUE9TVCBgdXJsYCB3aXRoIG9wdGlvbmFsIGBkYXRhYCBhbmQgY2FsbGJhY2sgYGZuKHJlcylgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmxcbiAqIEBwYXJhbSB7TWl4ZWR9IGRhdGFcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcmV0dXJuIHtSZXF1ZXN0fVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5yZXF1ZXN0LnBvc3QgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BPU1QnLCB1cmwpO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgZGF0YSkgZm4gPSBkYXRhLCBkYXRhID0gbnVsbDtcbiAgaWYgKGRhdGEpIHJlcS5zZW5kKGRhdGEpO1xuICBpZiAoZm4pIHJlcS5lbmQoZm4pO1xuICByZXR1cm4gcmVxO1xufTtcblxuLyoqXG4gKiBQVVQgYHVybGAgd2l0aCBvcHRpb25hbCBgZGF0YWAgYW5kIGNhbGxiYWNrIGBmbihyZXMpYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge01peGVkfEZ1bmN0aW9ufSBkYXRhIG9yIGZuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHJldHVybiB7UmVxdWVzdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxucmVxdWVzdC5wdXQgPSBmdW5jdGlvbih1cmwsIGRhdGEsIGZuKXtcbiAgdmFyIHJlcSA9IHJlcXVlc3QoJ1BVVCcsIHVybCk7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBkYXRhKSBmbiA9IGRhdGEsIGRhdGEgPSBudWxsO1xuICBpZiAoZGF0YSkgcmVxLnNlbmQoZGF0YSk7XG4gIGlmIChmbikgcmVxLmVuZChmbik7XG4gIHJldHVybiByZXE7XG59O1xuXG4vKipcbiAqIEV4cG9zZSBgcmVxdWVzdGAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1ZXN0O1xuIl19
